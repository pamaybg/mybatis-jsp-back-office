<?xml version="1.0" encoding="UTF-8"?><!--Converted at: Wed May 02 13:57:40 KST 2018-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.icignal.kepler.report.mapper.KprLoyReportMapper">


    <select id="selectStoreList" parameterType="com.icignal.kepler.report.dto.request.KprReportStoreReqDto" 
    resultType="com.icignal.kepler.report.dto.response.KprReportStoreResDto">
       	/* KPRReport.selectStoreList*/
<!--        	 SELECT	STORE_CD			AS storeCd -->
<!-- 				,STORE_NM			AS storeNm -->
<!-- 				,${strColumn} -->
<!-- 		  FROM mrt.D_STORE -->
<!-- 	     where ${strCondWhere} -->
<!--        		   ${strEndPaging} -->
       	SELECT CHNL_NM		AS storeNm,
       		   CHNL_NO		AS storeCd,
       		   ${strColumn}
          FROM LOY.LOY_CHNL
         WHERE  ${strCondWhere}
       		   	${strEndPaging}
    </select>

    <select id="selectAgeList" parameterType="com.icignal.kepler.report.dto.request.KprReportStoreReqDto" 
    resultType="com.icignal.kepler.report.dto.response.KprReportAgeCdResDto">
     SELECT age_cd		AS ageCd
		   ,age_NM		AS ageNm
	   FROM MRT.D_AGE
	</select>

	  <select id="testList" parameterType="com.icignal.kepler.report.dto.request.KprReportStoreReqDto" 
	  resultType="com.icignal.kepler.report.dto.response.KprReportAgeCdResDto">
 		 SELECT  STORE_CD			AS storeCd
				,STORE_NM			AS storeNm
				,${strColumn}
		  FROM mrt.D_STORE
		  where STORE_CD=#{storeCd}
       		   ${strEndPaging}
	</select>


	<select id="selectDaysSal" parameterType="com.icignal.kepler.report.dto.request.KprReportReqDto"
	 resultType="com.icignal.kepler.report.dto.response.KprReportDaysSalseResDto">
		/* KPRReport.selectDaysSal*/
		/*2-1*/
		SELECT CONCAT(SUBSTRING(YYYYMMDD,1,4), '-', SUBSTRING(YYYYMMDD,5,2), '-', SUBSTRING(YYYYMMDD,7,2)) AS days
		     ,TOT_MEM_CNT 	 as     buyMbr						 --구매 회원수
		     ,SALE_CNT       as     buyCnt		                 --구매횟수
		     ,RECP_CNT       as     rciptCnt	                 --영수증건수
		     ,RECP_AMT_CNT   as     rciptAmt	                 --영수증건단가
		     ,SALE_AMT       as     salAmt	                     --매출금액
		     ,MBR_MEM_CNT    as     membership	                 --맴버십 구매회원수
		     ,EAS_MEM_CNT    as     sotreMbr	                 --간편가입 구매회원수
		     ,WIP_MEM_CNT    as     mbrWp		                 --위포인트 구매회원수
		     ,WD_MEM_CNT			AS wdMemCnt					 --탈회 회원
		     ,TOT_RDM_PNT    as     usePnt		                 --사용포인트
		     ,TOT_ACRL_PNT   as     savePnt		                 --적립포인트
		     ,BAS_ACRL_PNT   as     basicPnt	                 --기본 적립포인트
		     ,EVT_ACRL_PNT   as     evtPnt		                 --이벤트 적립포인트
		     ,${strColumn}
		FROM MRT.FT_SALE_VOL_D
		WHERE YYYYMMDD BETWEEN CONCAT(SUBSTRING(#{yyyymm},1,6), '01') AND com.TO_CHAR(EOMONTH(com.TO_DATE(#{yyyymm},'YYYYMM')),'YYYYMMDD')
<!-- 		<if test="qryType =='AAA'" > -->
		 AND QRY_TYPE = #{qryType}

		  <if test="@infavor.icncommon.util.ICNStringUtility@isNotEmpty(storeCd)">
		 	AND STORE_CD =#{storeCd}
		  </if>
		  <if test="@infavor.icncommon.util.ICNStringUtility@isNotEmpty(genCd)">
		 	AND GEND_CD =#{genCd}
		  </if>
		  <if test="@infavor.icncommon.util.ICNStringUtility@isNotEmpty(ageCd)">
		 	AND AGE_CD =#{ageCd}
		  </if>
		ORDER BY 1
	</select>

	<select id="selectMonthSal" parameterType="com.icignal.kepler.report.dto.request.KprReportReqDto"
	 resultType="com.icignal.kepler.report.dto.response.KprReportMonthSalseResDto">
		/* KPRReport.selectMonthSal*/
		/*2-2*/
		SELECT   CONCAT(SUBSTRING(YYYYMM,1,4), '-', SUBSTRING(YYYYMM,5,2)) 		AS month
		        ,TOT_MEM_CNT        AS buyMbr  	            --구매회원수
		        ,SALE_CNT           AS buyCnt		        --구매횟수
		        ,RECP_CNT           AS rciptCnt	            --영수증건수
		        ,RECP_AMT_CNT       AS rciptAmt	            --영수증건단가
		        ,SALE_AMT           AS salAmt		        --매출금액
		        ,MBR_MEM_CNT        AS membership	        --맴버십 구매회원수
		        ,EAS_MEM_CNT        AS sotreMbr	            --간편가입 구매회원수
		        ,WIP_MEM_CNT        AS mbrWp		        --위포인트 구매회원수
		        ,WD_MEM_CNT			AS wdMemCnt				--탈회 회원
		        ,TOT_RDM_PNT        AS usePnt		        --사용 포인트
		        ,TOT_ACRL_PNT       AS savePnt		        --적립 포인트
		        ,TOT_DISA_PNT       AS dropPnt		        --소멸 포인트
		        ,BAS_ACRL_PNT       AS basicPnt	            --기본 적립포인트
		        ,EVT_ACRL_PNT       AS evtPnt		        --이벤트 적립포인트
		        ,${strColumn}
		FROM MRT.FT_SALE_VOL_M
		WHERE YYYYMM BETWEEN #{yyyymm} AND #{endyyyymm}
		AND QRY_TYPE = #{qryType}

		  <if test="@infavor.icncommon.util.ICNStringUtility@isNotEmpty(storeCd)">
		 	AND STORE_CD =#{storeCd}
		  </if>
		  <if test="@infavor.icncommon.util.ICNStringUtility@isNotEmpty(genCd)">
		 	AND GEND_CD =#{genCd}
		  </if>
		  <if test="@infavor.icncommon.util.ICNStringUtility@isNotEmpty(ageCd)">
		 	AND AGE_CD =#{ageCd}
		  </if>
		 ORDER BY 1
	</select>

	<select id="selectNoneBuyMbr" parameterType="com.icignal.kepler.report.dto.request.KprReportReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportDoNotBuyMbrResDto">
			/* KPRReport.selectNoneBuyMbr*/
			SELECT 	 CONCAT(SUBSTRING(YYYYMM,1,4), '-', SUBSTRING(YYYYMM,5,2))		  as yyyymm
			        ,DOR_CNT          AS dorCnt			--휴면회원수
			        ,NOPUR_23M_CNT    as mbr23m
			        ,NOPUR_22M_CNT    as mbr22m
			        ,NOPUR_21M_CNT    as mbr21m
			        ,NOPUR_20M_CNT    as mbr20m
			        ,NOPUR_19M_CNT    as mbr19m
			        ,NOPUR_18M_CNT    as mbr18m
			        ,NOPUR_17M_CNT    as mbr17m
			        ,NOPUR_16M_CNT    as mbr16m
			        ,NOPUR_15M_CNT    as mbr15m
			        ,NOPUR_14M_CNT    as mbr14m
			        ,NOPUR_13M_CNT    as mbr13m
			        ,NOPUR_12M_CNT    as mbr12m
			        ,NOPUR_11M_CNT    as mbr11m
			        ,NOPUR_10M_CNT    as mbr10m
			        ,NOPUR_9M_CNT     as mbr9m
			        ,NOPUR_8M_CNT     as mbr8m
			        ,NOPUR_7M_CNT     as mbr7m
			        ,NOPUR_6M_CNT     as mbr6m
			        ,NOPUR_5M_CNT     as mbr5m
			        ,NOPUR_4M_CNT     as mbr4m
			        ,NOPUR_3M_CNT     as mbr3m
			        ,NOPUR_2M_CNT     as mbr2m
			        ,NOPUR_1M_CNT     as mbr1m
			        ,${strColumn}
			FROM MRT.FT_NOSALE_VOL_M
			WHERE YYYYMM BETWEEN #{yyyymm} AND #{endyyyymm}
			AND QRY_TYPE = #{qryType}
			<if test="@infavor.icncommon.util.ICNStringUtility@isNotEmpty(genCd)">
		 	AND GEND_CD =#{genCd}
		  	</if>
		  	<if test="@infavor.icncommon.util.ICNStringUtility@isNotEmpty(ageCd)">
		 	AND AGE_CD =#{ageCd}
		 	</if>
			ORDER BY YYYYMM
	</select>

	<select id="selectTimesSal" parameterType="com.icignal.kepler.report.dto.request.KprReportReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportTimesSalResDto">
			/* KPRReport.selectTimesSal*/
			SELECT   A.HH_NM                    AS  times
			        ,com.nvl(B.TOT_PUR_MEM_CNT ,0)  AS  buyMbr	           --구매회원수
			        ,com.nvl(B.TOT_RECP_CNT    ,0)  AS  rciptCnt	       --영수증건수
			        ,com.nvl(B.TOT_RECP_AMT_CNT,0)  AS  rciptAmt	       --영수증건단가
			        ,com.nvl(B.TOT_PUR_AMT     ,0)  AS  salAmt	           --매출금액
			        ,com.nvl(B.TOT_RDM_PNT     ,0)  AS  usePnt	           --사용포인트
			        ,com.nvl(B.TOT_ACRL_PNT    ,0)  AS  savePnt	           --적립포인트
			        ,com.nvl(B.BAS_ACRL_PNT    ,0)  AS  basicPnt	       --기본   적립포인트
			        ,com.nvl(B.EVT_ACRL_PNT    ,0)  AS  evtPnt	           --이벤트 적립포인트
			        ,${strColumn}
			FROM   MRT.D_HH A
			     , MRT.FT_SALE_TIME_M B
			WHERE B.YYYYMM (+)= SUBSTRING(#{yyyymm},1,6)
			AND B.QRY_TYPE (+)= #{qryType}
			AND A.HH_CD = B.TIME_CD(+)
		  <if test="@infavor.icncommon.util.ICNStringUtility@isNotEmpty(storeCd)">
		 	AND STORE_CD =#{storeCd}
		  </if>
		  <if test="@infavor.icncommon.util.ICNStringUtility@isNotEmpty(genCd)">
		 	AND GEND_CD =#{genCd}
		  </if>
		  <if test="@infavor.icncommon.util.ICNStringUtility@isNotEmpty(ageCd)">
		 	AND AGE_CD =#{ageCd}
		  </if>
			ORDER BY 1
	</select>
	<select id="selectAgoMonth" parameterType="com.icignal.kepler.report.dto.request.KprReportReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportAgoMonthDateResDto">
		SELECT /*+ index_desc(A D_DD_DATE_PK)*/ DD_CD as yyyymm
		  FROM  MRT.D_DD_DATE	A
		 WHERE  MM_CD =#{agoMonth}
		   AND  ROWNUM =1
	</select>
	<select id="selectmbrCaseList" parameterType="com.icignal.kepler.report.dto.request.KprReportReqDto"
	 resultType="com.icignal.kepler.report.dto.response.KprReportMbrCaseResDto">
		/* KPRReport.selectmbrCaseList*/
		<![CDATA[
		SELECT LV AS SEQ
		      ,CASE WHEN LV IN (1,2,3,4,5) THEN '맴버십 누적 회원수' WHEN LV IN (6,7,8,9) THEN '가입 채널별 신규 가입 회원수' WHEN LV = 10 THEN '탈회' WHEN LV IN (11,12) THEN '패밀리' END AS TYPEA
		      ,CASE WHEN LV = 1 THEN '총회원수' WHEN LV = 2 THEN '신규 맴버십 회원수' WHEN LV = 3 THEN '현재 간편 회원수' WHEN LV = 4 THEN '현재 위포인트 회원수' WHEN LV = 5 THEN '현재 IBK 회원수'
		            WHEN LV = 6 THEN '신규회원수' WHEN LV = 7 THEN 'APP' WHEN LV = 8 THEN 'WEB' WHEN LV = 9 THEN '제휴(IBK)' WHEN LV = 10 THEN '탈회' WHEN LV = 11 THEN '패밀리 가구수' WHEN LV = 12 THEN '패밀리 가입자수' END AS TYPEB
		      ,DECODE(LV,1 ,TOT_MEM_CNT_0M  , 2,NEW_MBR_CNT_0M  , 3,EAS_MEM_CNT_0M  , 4,WIP_MEM_CNT_0M  , 5,WII_MEM_CNT_0M  , 6,FST_MEM_CNT_0M  , 7,NEW_APP_MEM_CNT_0M  , 8,NEW_WEB_MEM_CNT_0M  , 9,NEW_IBK_WEBID_0M     , 10,WITHD_MEM_CNT_0M    , 11,FAM_CNT_DD_0M    , 12,FAM_MEM_CNT_DD_0M    ) AS mon0m
		      ,DECODE(LV,1 ,TOT_MEM_CNT_1M  , 2,NEW_MBR_CNT_1M  , 3,EAS_MEM_CNT_1M  , 4,WIP_MEM_CNT_1M  , 5,WII_MEM_CNT_1M  , 6,FST_MEM_CNT_1M  , 7,NEW_APP_MEM_CNT_1M  , 8,NEW_WEB_MEM_CNT_1M  , 9,NEW_IBK_WEBID_1M     , 10,WITHD_MEM_CNT_1M    , 11,FAM_CNT_DD_1M    , 12,FAM_MEM_CNT_DD_1M    ) AS mon1m
		      ,DECODE(LV,1 ,TOT_MEM_1M_RT   , 2,NEW_MBR_1M_RT   , 3,EAS_MEM_1M_RT   , 4,WIP_MEM_1M_RT   , 5,WII_MEM_1M_RT   , 6,FST_MEM_1M_RT   , 7,NEW_APP_MEM_1M_RT   , 8,NEW_WEB_MEM_1M_RT   , 9,NEW_IBK_WEBID_1M_RT  , 10,WITHD_MEM_CNT_1M_RT , 11,FAM_CNT_DD_1M_RT , 12,FAM_MEM_CNT_DD_1M_RT ) AS mon1mRate
		      ,DECODE(LV,1 ,TOT_MEM_CNT_12M , 2,NEW_MBR_CNT_12M , 3,EAS_MEM_CNT_12M , 4,WIP_MEM_CNT_12M , 5,WII_MEM_CNT_12M , 6,FST_MEM_CNT_12M , 7,NEW_APP_MEM_CNT_12M , 8,NEW_WEB_MEM_CNT_12M , 9,NEW_IBK_WEBID_12M    , 10,WITHD_MEM_CNT_12M   , 11,FAM_CNT_DD_12M   , 12,FAM_MEM_CNT_DD_12M   ) AS mon12m
		      ,DECODE(LV,1 ,TOT_MEM_12M_RT  , 2,NEW_MBR_12M_RT  , 3,EAS_MEM_12M_RT  , 4,WIP_MEM_12M_RT  , 5,WII_MEM_12M_RT  , 6,FST_MEM_12M_RT  , 7,NEW_APP_MEM_12M_RT  , 8,NEW_WEB_MEM_12M_RT  , 9,NEW_IBK_WEBID_12M_RT , 10,WITHD_MEM_CNT_12M_RT, 11,FAM_CNT_DD_12M_RT, 12,FAM_MEM_CNT_DD_12M_RT) AS mon12mRate
		FROM
		    (
		    SELECT
		         SUM(TOT_MEM_CNT_0M     ) AS TOT_MEM_CNT_0M         --당월총회원수
		        ,SUM(TOT_MEM_CNT_1M     ) AS TOT_MEM_CNT_1M         --전월총회원수
		        ,SUM(TOT_MEM_CNT_12M    ) AS TOT_MEM_CNT_12M        --전년동월총회원수
		        ,SUM(NEW_MBR_CNT_0M     ) AS NEW_MBR_CNT_0M         --당월신규맴버십회원수
		        ,SUM(NEW_MBR_CNT_1M     ) AS NEW_MBR_CNT_1M         --전월신규맴버십회원수
		        ,SUM(NEW_MBR_CNT_12M    ) AS NEW_MBR_CNT_12M        --전년동월맴버십회원수
		        ,SUM(EAS_MEM_CNT_0M     ) AS EAS_MEM_CNT_0M         --당월간편가입회원수
		        ,SUM(EAS_MEM_CNT_1M     ) AS EAS_MEM_CNT_1M         --전월간편가입회원수
		        ,SUM(EAS_MEM_CNT_12M    ) AS EAS_MEM_CNT_12M        --전년동월간편가입회원수
		        ,SUM(WIP_MEM_CNT_0M     ) AS WIP_MEM_CNT_0M         --당월위포인트가입회원수
		        ,SUM(WIP_MEM_CNT_1M     ) AS WIP_MEM_CNT_1M         --전월위포인트가입회원수
		        ,SUM(WIP_MEM_CNT_12M    ) AS WIP_MEM_CNT_12M        --전년동월위포인트가입회원수
		        ,SUM(WII_MEM_CNT_0M     ) AS WII_MEM_CNT_0M         --당월IBK회원수
		        ,SUM(WII_MEM_CNT_1M     ) AS WII_MEM_CNT_1M         --전월IBK회원수
		        ,SUM(WII_MEM_CNT_12M    ) AS WII_MEM_CNT_12M        --전년동월IBK회원수
		        ,SUM(FST_MEM_CNT_0M     ) AS FST_MEM_CNT_0M         --당월신규회원수
		        ,SUM(FST_MEM_CNT_1M     ) AS FST_MEM_CNT_1M         --전월신규회원수
		        ,SUM(FST_MEM_CNT_12M    ) AS FST_MEM_CNT_12M        --전년동월신규회원수
		        ,SUM(NEW_APP_MEM_CNT_0M ) AS NEW_APP_MEM_CNT_0M     --당월신규APP회원수
		        ,SUM(NEW_APP_MEM_CNT_1M ) AS NEW_APP_MEM_CNT_1M     --전월신규APP회원수
		        ,SUM(NEW_APP_MEM_CNT_12M) AS NEW_APP_MEM_CNT_12M    --전년동월신규APP회원수
		        ,SUM(NEW_WEB_MEM_CNT_0M ) AS NEW_WEB_MEM_CNT_0M     --당월신규WEB회원수
		        ,SUM(NEW_WEB_MEM_CNT_1M ) AS NEW_WEB_MEM_CNT_1M     --전월신규WEB회원수
		        ,SUM(NEW_WEB_MEM_CNT_12M) AS NEW_WEB_MEM_CNT_12M    --전년동월신규WEB회원수
		        ,SUM(NEW_IBK_WEBID_0M   ) AS NEW_IBK_WEBID_0M       --당월신규IBK회원수
		        ,SUM(NEW_IBK_WEBID_1M   ) AS NEW_IBK_WEBID_1M       --전월신규IBK회원수
		        ,SUM(NEW_IBK_WEBID_12M  ) AS NEW_IBK_WEBID_12M      --전년동월신규IBK회원수
		        ,SUM(WITHD_MEM_CNT_0M   ) AS WITHD_MEM_CNT_0M       --당월탈퇴회원수
		        ,SUM(WITHD_MEM_CNT_1M   ) AS WITHD_MEM_CNT_1M       --전월탈퇴회원수
		        ,SUM(WITHD_MEM_CNT_12M  ) AS WITHD_MEM_CNT_12M      --전년동월탈퇴회원수
		        ,SUM(FAM_CNT_DD_0M      ) AS FAM_CNT_DD_0M          --당월가구화수
		        ,SUM(FAM_CNT_DD_1M      ) AS FAM_CNT_DD_1M          --전월가구화수
		        ,SUM(FAM_CNT_DD_12M     ) AS FAM_CNT_DD_12M         --전년동월가구화수
		        ,SUM(FAM_MEM_CNT_DD_0M  ) AS FAM_MEM_CNT_DD_0M      --당월가구화구성회원수
		        ,SUM(FAM_MEM_CNT_DD_1M  ) AS FAM_MEM_CNT_DD_1M      --전월가구화구성회원수
		        ,SUM(FAM_MEM_CNT_DD_12M ) AS FAM_MEM_CNT_DD_12M     --전년동월가구화구성회원수
		        ,CASE WHEN SUM(TOT_MEM_CNT_1M)  = 0 THEN 0 ELSE CASE WHEN SUM(TOT_MEM_CNT_0M) / SUM(TOT_MEM_CNT_1M ) -1 >= 1 THEN 1 ELSE ROUND(SUM(TOT_MEM_CNT_0M) / SUM(TOT_MEM_CNT_1M ) -1,2) END END AS TOT_MEM_1M_RT
		        ,CASE WHEN SUM(TOT_MEM_CNT_12M) = 0 THEN 0 ELSE CASE WHEN SUM(TOT_MEM_CNT_0M) / SUM(TOT_MEM_CNT_12M) -1 >= 1 THEN 1 ELSE ROUND(SUM(TOT_MEM_CNT_0M) / SUM(TOT_MEM_CNT_12M) -1,2) END END AS TOT_MEM_12M_RT
		        ,CASE WHEN SUM(NEW_MBR_CNT_1M)  = 0 THEN 0 ELSE CASE WHEN SUM(NEW_MBR_CNT_0M) / SUM(NEW_MBR_CNT_1M ) -1 >= 1 THEN 1 ELSE ROUND(SUM(NEW_MBR_CNT_0M) / SUM(NEW_MBR_CNT_1M ) -1,2) END END AS NEW_MBR_1M_RT
		        ,CASE WHEN SUM(NEW_MBR_CNT_12M) = 0 THEN 0 ELSE CASE WHEN SUM(NEW_MBR_CNT_0M) / SUM(NEW_MBR_CNT_12M) -1 >= 1 THEN 1 ELSE ROUND(SUM(NEW_MBR_CNT_0M) / SUM(NEW_MBR_CNT_12M) -1,2) END END AS NEW_MBR_12M_RT
		        ,CASE WHEN SUM(EAS_MEM_CNT_1M)  = 0 THEN 0 ELSE CASE WHEN SUM(EAS_MEM_CNT_0M) / SUM(EAS_MEM_CNT_1M ) -1 >= 1 THEN 1 ELSE ROUND(SUM(EAS_MEM_CNT_0M) / SUM(EAS_MEM_CNT_1M ) -1,2) END END AS EAS_MEM_1M_RT
		        ,CASE WHEN SUM(EAS_MEM_CNT_12M) = 0 THEN 0 ELSE CASE WHEN SUM(EAS_MEM_CNT_0M) / SUM(EAS_MEM_CNT_12M) -1 >= 1 THEN 1 ELSE ROUND(SUM(EAS_MEM_CNT_0M) / SUM(EAS_MEM_CNT_12M) -1,2) END END AS EAS_MEM_12M_RT
		        ,CASE WHEN SUM(WIP_MEM_CNT_1M)  = 0 THEN 0 ELSE CASE WHEN SUM(WIP_MEM_CNT_0M) / SUM(WIP_MEM_CNT_1M ) -1 >= 1 THEN 1 ELSE ROUND(SUM(WIP_MEM_CNT_0M) / SUM(WIP_MEM_CNT_1M ) -1,2) END END AS WIP_MEM_1M_RT
		        ,CASE WHEN SUM(WIP_MEM_CNT_12M) = 0 THEN 0 ELSE CASE WHEN SUM(WIP_MEM_CNT_0M) / SUM(WIP_MEM_CNT_12M) -1 >= 1 THEN 1 ELSE ROUND(SUM(WIP_MEM_CNT_0M) / SUM(WIP_MEM_CNT_12M) -1,2) END END AS WIP_MEM_12M_RT
		        ,CASE WHEN SUM(WII_MEM_CNT_1M)  = 0 THEN 0 ELSE CASE WHEN SUM(WII_MEM_CNT_0M) / SUM(WII_MEM_CNT_1M ) -1 >= 1 THEN 1 ELSE ROUND(SUM(WII_MEM_CNT_0M) / SUM(WII_MEM_CNT_1M ) -1,2) END END AS WII_MEM_1M_RT
		        ,CASE WHEN SUM(WII_MEM_CNT_12M) = 0 THEN 0 ELSE CASE WHEN SUM(WII_MEM_CNT_0M) / SUM(WII_MEM_CNT_12M) -1 >= 1 THEN 1 ELSE ROUND(SUM(WII_MEM_CNT_0M) / SUM(WII_MEM_CNT_12M) -1,2) END END AS WII_MEM_12M_RT
		        ,CASE WHEN SUM(FST_MEM_CNT_1M)  = 0 THEN 0 ELSE CASE WHEN SUM(FST_MEM_CNT_0M) / SUM(FST_MEM_CNT_1M ) -1 >= 1 THEN 1 ELSE ROUND(SUM(FST_MEM_CNT_0M) / SUM(FST_MEM_CNT_1M ) -1,2) END END AS FST_MEM_1M_RT
		        ,CASE WHEN SUM(FST_MEM_CNT_12M) = 0 THEN 0 ELSE CASE WHEN SUM(FST_MEM_CNT_0M) / SUM(FST_MEM_CNT_12M) -1 >= 1 THEN 1 ELSE ROUND(SUM(FST_MEM_CNT_0M) / SUM(FST_MEM_CNT_12M) -1,2) END END AS FST_MEM_12M_RT
		        ,CASE WHEN SUM(NEW_APP_MEM_CNT_1M)  = 0 THEN 0 ELSE CASE WHEN SUM(NEW_APP_MEM_CNT_0M) / SUM(NEW_APP_MEM_CNT_1M ) -1 >= 1 THEN 1 ELSE ROUND(SUM(NEW_APP_MEM_CNT_0M) / SUM(NEW_APP_MEM_CNT_1M ) -1,2) END END AS NEW_APP_MEM_1M_RT
		        ,CASE WHEN SUM(NEW_APP_MEM_CNT_12M) = 0 THEN 0 ELSE CASE WHEN SUM(NEW_APP_MEM_CNT_0M) / SUM(NEW_APP_MEM_CNT_12M) -1 >= 1 THEN 1 ELSE ROUND(SUM(NEW_APP_MEM_CNT_0M) / SUM(NEW_APP_MEM_CNT_12M) -1,2) END END AS NEW_APP_MEM_12M_RT
		        ,CASE WHEN SUM(NEW_WEB_MEM_CNT_1M)  = 0 THEN 0 ELSE CASE WHEN SUM(NEW_WEB_MEM_CNT_0M) / SUM(NEW_WEB_MEM_CNT_1M ) -1 >= 1 THEN 1 ELSE ROUND(SUM(NEW_WEB_MEM_CNT_0M) / SUM(NEW_WEB_MEM_CNT_1M ) -1,2) END END AS NEW_WEB_MEM_1M_RT
		        ,CASE WHEN SUM(NEW_WEB_MEM_CNT_12M) = 0 THEN 0 ELSE CASE WHEN SUM(NEW_WEB_MEM_CNT_0M) / SUM(NEW_WEB_MEM_CNT_12M) -1 >= 1 THEN 1 ELSE ROUND(SUM(NEW_WEB_MEM_CNT_0M) / SUM(NEW_WEB_MEM_CNT_12M) -1,2) END END AS NEW_WEB_MEM_12M_RT
		        ,CASE WHEN SUM(NEW_IBK_WEBID_1M)    = 0 THEN 0 ELSE CASE WHEN SUM(NEW_IBK_WEBID_0M)   / SUM(NEW_IBK_WEBID_1M )   -1 >= 1 THEN 1 ELSE ROUND(SUM(NEW_IBK_WEBID_0M)   / SUM(NEW_IBK_WEBID_1M )   -1,2) END END AS NEW_IBK_WEBID_1M_RT
		        ,CASE WHEN SUM(NEW_IBK_WEBID_12M)   = 0 THEN 0 ELSE CASE WHEN SUM(NEW_IBK_WEBID_0M)   / SUM(NEW_IBK_WEBID_12M)   -1 >= 1 THEN 1 ELSE ROUND(SUM(NEW_IBK_WEBID_0M)   / SUM(NEW_IBK_WEBID_12M)   -1,2) END END AS NEW_IBK_WEBID_12M_RT
		        ,CASE WHEN SUM(WITHD_MEM_CNT_1M)    = 0 THEN 0 ELSE CASE WHEN SUM(WITHD_MEM_CNT_0M)   / SUM(WITHD_MEM_CNT_1M )   -1 >= 1 THEN 1 ELSE ROUND(SUM(WITHD_MEM_CNT_0M)   / SUM(WITHD_MEM_CNT_1M )   -1,2) END END AS WITHD_MEM_CNT_1M_RT
		        ,CASE WHEN SUM(WITHD_MEM_CNT_12M)   = 0 THEN 0 ELSE CASE WHEN SUM(WITHD_MEM_CNT_0M)   / SUM(WITHD_MEM_CNT_12M)   -1 >= 1 THEN 1 ELSE ROUND(SUM(WITHD_MEM_CNT_0M)   / SUM(WITHD_MEM_CNT_12M)   -1,2) END END AS WITHD_MEM_CNT_12M_RT
		        ,CASE WHEN SUM(FAM_CNT_DD_1M)       = 0 THEN 0 ELSE CASE WHEN SUM(FAM_CNT_DD_0M)      / SUM(FAM_CNT_DD_1M )      -1 >= 1 THEN 1 ELSE ROUND(SUM(FAM_CNT_DD_0M)      / SUM(FAM_CNT_DD_1M )      -1,2) END END AS FAM_CNT_DD_1M_RT
		        ,CASE WHEN SUM(FAM_CNT_DD_12M)      = 0 THEN 0 ELSE CASE WHEN SUM(FAM_CNT_DD_0M)      / SUM(FAM_CNT_DD_12M)      -1 >= 1 THEN 1 ELSE ROUND(SUM(FAM_CNT_DD_0M)      / SUM(FAM_CNT_DD_12M)      -1,2) END END AS FAM_CNT_DD_12M_RT
		        ,CASE WHEN SUM(FAM_MEM_CNT_DD_1M)   = 0 THEN 0 ELSE CASE WHEN SUM(FAM_MEM_CNT_DD_0M)  / SUM(FAM_MEM_CNT_DD_1M )  -1 >= 1 THEN 1 ELSE ROUND(SUM(FAM_MEM_CNT_DD_0M)  / SUM(FAM_MEM_CNT_DD_1M )  -1,2) END END AS FAM_MEM_CNT_DD_1M_RT
		        ,CASE WHEN SUM(FAM_MEM_CNT_DD_12M)  = 0 THEN 0 ELSE CASE WHEN SUM(FAM_MEM_CNT_DD_0M)  / SUM(FAM_MEM_CNT_DD_12M)  -1 >= 1 THEN 1 ELSE ROUND(SUM(FAM_MEM_CNT_DD_0M)  / SUM(FAM_MEM_CNT_DD_12M)  -1,2) END END AS FAM_MEM_CNT_DD_12M_RT
		    FROM
		        (
		        SELECT CASE WHEN YYYYMMDD = #{yyyymm} THEN TOT_MEM_CNT ELSE 0 END                                                             AS TOT_MEM_CNT_0M
		              ,CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMMDD'),-1),'YYYYMMDD')  THEN TOT_MEM_CNT ELSE 0 END     AS TOT_MEM_CNT_1M
		              ,CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMMDD'),-12),'YYYYMMDD') THEN TOT_MEM_CNT ELSE 0 END     AS TOT_MEM_CNT_12M
		              ,CASE WHEN YYYYMMDD = #{yyyymm} THEN NEW_MBR_CNT ELSE 0 END                                                             AS NEW_MBR_CNT_0M
		              ,CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMMDD'),-1),'YYYYMMDD')  THEN NEW_MBR_CNT ELSE 0 END     AS NEW_MBR_CNT_1M
		              ,CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMMDD'),-12),'YYYYMMDD') THEN NEW_MBR_CNT ELSE 0 END     AS NEW_MBR_CNT_12M
		              ,CASE WHEN YYYYMMDD = #{yyyymm} THEN EAS_MEM_CNT ELSE 0 END                                                             AS EAS_MEM_CNT_0M
		              ,CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMMDD'),-1),'YYYYMMDD')  THEN EAS_MEM_CNT ELSE 0 END     AS EAS_MEM_CNT_1M
		              ,CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMMDD'),-12),'YYYYMMDD') THEN EAS_MEM_CNT ELSE 0 END     AS EAS_MEM_CNT_12M
		              ,CASE WHEN YYYYMMDD = #{yyyymm} THEN WIP_MEM_CNT ELSE 0 END                                                             AS WIP_MEM_CNT_0M
		              ,CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMMDD'),-1),'YYYYMMDD')  THEN WIP_MEM_CNT ELSE 0 END     AS WIP_MEM_CNT_1M
		              ,CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMMDD'),-12),'YYYYMMDD') THEN WIP_MEM_CNT ELSE 0 END     AS WIP_MEM_CNT_12M
		              ,CASE WHEN YYYYMMDD = #{yyyymm} THEN WII_MEM_CNT ELSE 0 END                                                             AS WII_MEM_CNT_0M
		              ,CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMMDD'),-1),'YYYYMMDD')  THEN WII_MEM_CNT ELSE 0 END     AS WII_MEM_CNT_1M
		              ,CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMMDD'),-12),'YYYYMMDD') THEN WII_MEM_CNT ELSE 0 END     AS WII_MEM_CNT_12M
		              ,CASE WHEN YYYYMMDD = #{yyyymm} THEN FST_MEM_CNT ELSE 0 END                                                             AS FST_MEM_CNT_0M
		              ,CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMMDD'),-1),'YYYYMMDD')  THEN FST_MEM_CNT ELSE 0 END     AS FST_MEM_CNT_1M
		              ,CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMMDD'),-12),'YYYYMMDD') THEN FST_MEM_CNT ELSE 0 END     AS FST_MEM_CNT_12M
		              ,CASE WHEN YYYYMMDD = #{yyyymm} THEN NEW_APP_MEM_CNT ELSE 0 END                                                         AS NEW_APP_MEM_CNT_0M
		              ,CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMMDD'),-1),'YYYYMMDD')  THEN NEW_APP_MEM_CNT ELSE 0 END AS NEW_APP_MEM_CNT_1M
		              ,CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMMDD'),-12),'YYYYMMDD') THEN NEW_APP_MEM_CNT ELSE 0 END AS NEW_APP_MEM_CNT_12M
		              ,CASE WHEN YYYYMMDD = #{yyyymm} THEN NEW_WEB_MEM_CNT ELSE 0 END                                                         AS NEW_WEB_MEM_CNT_0M
		              ,CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMMDD'),-1),'YYYYMMDD')  THEN NEW_WEB_MEM_CNT ELSE 0 END AS NEW_WEB_MEM_CNT_1M
		              ,CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMMDD'),-12),'YYYYMMDD') THEN NEW_WEB_MEM_CNT ELSE 0 END AS NEW_WEB_MEM_CNT_12M
		              ,CASE WHEN YYYYMMDD = #{yyyymm} THEN NEW_IBK_WEBID ELSE 0 END                                                           AS NEW_IBK_WEBID_0M
		              ,CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMMDD'),-1),'YYYYMMDD')  THEN NEW_IBK_WEBID ELSE 0 END   AS NEW_IBK_WEBID_1M
		              ,CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMMDD'),-12),'YYYYMMDD') THEN NEW_IBK_WEBID ELSE 0 END   AS NEW_IBK_WEBID_12M
		              ,CASE WHEN YYYYMMDD = #{yyyymm} THEN WITHD_MEM_CNT_DD ELSE 0 END                                                        AS WITHD_MEM_CNT_0M
		              ,CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMMDD'),-1),'YYYYMMDD')  THEN WITHD_MEM_CNT_DD ELSE 0 END AS WITHD_MEM_CNT_1M
		              ,CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMMDD'),-12),'YYYYMMDD') THEN WITHD_MEM_CNT_DD ELSE 0 END AS WITHD_MEM_CNT_12M
		              ,CASE WHEN YYYYMMDD = #{yyyymm} THEN FAM_CNT_DD ELSE 0 END                                                               AS FAM_CNT_DD_0M
		              ,CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMMDD'),-1),'YYYYMMDD')  THEN FAM_CNT_DD ELSE 0 END       AS FAM_CNT_DD_1M
		              ,CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMMDD'),-12),'YYYYMMDD') THEN FAM_CNT_DD ELSE 0 END       AS FAM_CNT_DD_12M
		              ,CASE WHEN YYYYMMDD = #{yyyymm} THEN FAM_MEM_CNT_DD ELSE 0 END                                                           AS FAM_MEM_CNT_DD_0M
		              ,CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMMDD'),-1),'YYYYMMDD')  THEN FAM_MEM_CNT_DD ELSE 0 END   AS FAM_MEM_CNT_DD_1M
		              ,CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMMDD'),-12),'YYYYMMDD') THEN FAM_MEM_CNT_DD ELSE 0 END   AS FAM_MEM_CNT_DD_12M
		        FROM MRT.FT_MEM_CNT_M
		        WHERE YYYYMMDD IN ( com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMMDD'),-12),'YYYYMMDD'), com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMMDD'),-1),'YYYYMMDD'),#{yyyymm})
		        )
		    )A,
		    (
		    SELECT LEVEL LV
		    FROM DUAL
		    CONNECT BY LEVEL <= 12
		    ) B
		UNION ALL
		SELECT SEQ,TYPEA,TYPEB,mon0m,mon1m,mon1mRate,mon12m,mon12mRate
		FROM
		(
		SELECT B.LV AS SEQ
		     , CASE WHEN B.LV IN (13,14,15,16,17) THEN '개인등급' END AS TYPEA
		     , CASE WHEN B.LV= 13 THEN 'VVIP' WHEN B.LV = 14 THEN 'VIP' WHEN B.LV = 15 THEN 'GOLD' WHEN B.LV= 16 THEN 'SILVER' WHEN B.LV = 17 THEN 'BRONZE' END AS TYPEB
		     , DECODE(LV,13 ,GR_0M_1    ,14,GR_0M_2    ,15,GR_0M_3    ,16,GR_0M_4    ,17,GR_0M_5 )       AS mon0m
		     , DECODE(LV,13 ,GR_1M_1    ,14,GR_1M_2    ,15,GR_1M_3    ,16,GR_1M_4    ,17,GR_1M_5 )       AS mon1m
		     , DECODE(LV,13 ,GR_1M_1_RT ,14,GR_1M_2_RT ,15,GR_1M_3_RT ,16,GR_1M_4_RT ,17,GR_1M_1_RT)     AS mon1mRate
		     , DECODE(LV,13 ,GR_12M_1   ,14,GR_12M_2   ,15,GR_12M_3   ,16,GR_12M_4   ,17,GR_12M_5)       AS mon12m
		     , DECODE(LV,13 ,GR_12M_1_RT,14,GR_12M_2_RT,15,GR_12M_3_RT,16,GR_12M_4_RT,17,GR_12M_1_RT)    AS mon12mRate
		FROM
		    (
		SELECT GR_0M_1,GR_0M_2,GR_0M_3,GR_0M_4,GR_0M_5,
		       GR_1M_1,GR_1M_2,GR_1M_3,GR_1M_4,GR_1M_5,
		       GR_12M_1,GR_12M_2,GR_12M_3,GR_12M_4,GR_12M_5,
		       CASE WHEN GR_1M_1  = 0 THEN 0 ELSE CASE WHEN (GR_0M_1-GR_1M_1)/GR_1M_1*100   >= 100 THEN 100 ELSE ROUND((GR_0M_1-GR_1M_1)/GR_1M_1  *100,2) END END AS GR_1M_1_RT,
		       CASE WHEN GR_1M_2  = 0 THEN 0 ELSE CASE WHEN (GR_0M_2-GR_1M_2)/GR_1M_2*100   >= 100 THEN 100 ELSE ROUND((GR_0M_2-GR_1M_2)/GR_1M_2  *100,2) END END AS GR_1M_2_RT,
		       CASE WHEN GR_1M_3  = 0 THEN 0 ELSE CASE WHEN (GR_0M_3-GR_1M_3)/GR_1M_3*100   >= 100 THEN 100 ELSE ROUND((GR_0M_3-GR_1M_3)/GR_1M_3  *100,2) END END AS GR_1M_3_RT,
		       CASE WHEN GR_1M_4  = 0 THEN 0 ELSE CASE WHEN (GR_0M_4-GR_1M_4)/GR_1M_4*100   >= 100 THEN 100 ELSE ROUND((GR_0M_4-GR_1M_4)/GR_1M_4  *100,2) END END AS GR_1M_4_RT,
		       CASE WHEN GR_1M_5  = 0 THEN 0 ELSE CASE WHEN (GR_0M_5-GR_1M_5)/GR_1M_5*100   >= 100 THEN 100 ELSE ROUND((GR_0M_5-GR_1M_5)/GR_1M_5  *100,2) END END AS GR_1M_5_RT,
		       CASE WHEN GR_12M_1 = 0 THEN 0 ELSE CASE WHEN (GR_0M_1-GR_12M_1)/GR_12M_1*100 >= 100 THEN 100 ELSE ROUND((GR_0M_1-GR_12M_1)/GR_12M_1*100,2) END END AS GR_12M_1_RT,
		       CASE WHEN GR_12M_2 = 0 THEN 0 ELSE CASE WHEN (GR_0M_2-GR_12M_2)/GR_12M_2*100 >= 100 THEN 100 ELSE ROUND((GR_0M_2-GR_12M_2)/GR_12M_2*100,2) END END AS GR_12M_2_RT,
		       CASE WHEN GR_12M_3 = 0 THEN 0 ELSE CASE WHEN (GR_0M_3-GR_12M_3)/GR_12M_3*100 >= 100 THEN 100 ELSE ROUND((GR_0M_3-GR_12M_3)/GR_12M_3*100,2) END END AS GR_12M_3_RT,
		       CASE WHEN GR_12M_4 = 0 THEN 0 ELSE CASE WHEN (GR_0M_4-GR_12M_4)/GR_12M_4*100 >= 100 THEN 100 ELSE ROUND((GR_0M_4-GR_12M_4)/GR_12M_4*100,2) END END AS GR_12M_4_RT,
		       CASE WHEN GR_12M_5 = 0 THEN 0 ELSE CASE WHEN (GR_0M_5-GR_12M_5)/GR_12M_5*100 >= 100 THEN 100 ELSE ROUND((GR_0M_5-GR_12M_5)/GR_12M_5*100,2) END END AS GR_12M_5_RT

		FROM (
		    SELECT SUM(CASE WHEN YYYYMM = SUBSTRING(#{yyyymm},1,6) THEN PERS_1GR_MEM_CNT ELSE 0 END) AS GR_0M_1
		          ,SUM(CASE WHEN YYYYMM = SUBSTRING(#{yyyymm},1,6) THEN PERS_2GR_MEM_CNT ELSE 0 END) AS GR_0M_2
		          ,SUM(CASE WHEN YYYYMM = SUBSTRING(#{yyyymm},1,6) THEN PERS_3GR_MEM_CNT ELSE 0 END) AS GR_0M_3
		          ,SUM(CASE WHEN YYYYMM = SUBSTRING(#{yyyymm},1,6) THEN PERS_4GR_MEM_CNT ELSE 0 END) AS GR_0M_4
		          ,SUM(CASE WHEN YYYYMM = SUBSTRING(#{yyyymm},1,6) THEN PERS_5GR_MEM_CNT ELSE 0 END) AS GR_0M_5
		          ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(SUBSTRING(#{yyyymm},1,6),'YYYYMM'),-1),'YYYYMM') THEN PERS_1GR_MEM_CNT ELSE 0 END) AS GR_1M_1
		          ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(SUBSTRING(#{yyyymm},1,6),'YYYYMM'),-1),'YYYYMM') THEN PERS_2GR_MEM_CNT ELSE 0 END) AS GR_1M_2
		          ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(SUBSTRING(#{yyyymm},1,6),'YYYYMM'),-1),'YYYYMM') THEN PERS_3GR_MEM_CNT ELSE 0 END) AS GR_1M_3
		          ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(SUBSTRING(#{yyyymm},1,6),'YYYYMM'),-1),'YYYYMM') THEN PERS_4GR_MEM_CNT ELSE 0 END) AS GR_1M_4
		          ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(SUBSTRING(#{yyyymm},1,6),'YYYYMM'),-1),'YYYYMM') THEN PERS_5GR_MEM_CNT ELSE 0 END) AS GR_1M_5
		          ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(SUBSTRING(#{yyyymm},1,6),'YYYYMM'),-12),'YYYYMM') THEN PERS_1GR_MEM_CNT ELSE 0 END) AS GR_12M_1
		          ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(SUBSTRING(#{yyyymm},1,6),'YYYYMM'),-12),'YYYYMM') THEN PERS_2GR_MEM_CNT ELSE 0 END) AS GR_12M_2
		          ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(SUBSTRING(#{yyyymm},1,6),'YYYYMM'),-12),'YYYYMM') THEN PERS_3GR_MEM_CNT ELSE 0 END) AS GR_12M_3
		          ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(SUBSTRING(#{yyyymm},1,6),'YYYYMM'),-12),'YYYYMM') THEN PERS_4GR_MEM_CNT ELSE 0 END) AS GR_12M_4
		          ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(SUBSTRING(#{yyyymm},1,6),'YYYYMM'),-12),'YYYYMM') THEN PERS_5GR_MEM_CNT ELSE 0 END) AS GR_12M_5
		    FROM MRT.FT_MEM_GRD_M
		    WHERE YYYYMM IN (SUBSTRING(#{yyyymm},1,6),com.TO_CHAR(ADD_MONTHS(com.TO_DATE(SUBSTRING(#{yyyymm},1,6),'YYYYMM'),-1),'YYYYMM'),com.TO_CHAR(ADD_MONTHS(com.TO_DATE(SUBSTRING(#{yyyymm},1,6),'YYYYMM'),-12),'YYYYMM'))
		    )
		    ) A,
		(
		    SELECT LEVEL LV
		    FROM DUAL
		    CONNECT BY LEVEL <= 17
		    ) B
		)
		WHERE SEQ >= 13 AND SEQ <= 17
		    ]]>

	</select>

	<select id="selectPntSaveUseList" parameterType="com.icignal.kepler.report.dto.request.KprReportReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportPntUseSaveResDto">
		SELECT   CONCAT(SUBSTRING(YYYYMMDD,1,4), '-', SUBSTRING(YYYYMMDD,5,2), '-', SUBSTRING(YYYYMMDD,7,2))			AS  yyyymm
				,PNT_00000_MEM_CNT	as  pntAmt0
		        ,PNT_00999_MEM_CNT	as  pntAmt1000
		        ,PNT_01000_MEM_CNT  as  pntAmt2000
		        ,PNT_02000_MEM_CNT  as  pntAmt3000
		        ,PNT_03000_MEM_CNT  as  pntAmt4000
		        ,PNT_04000_MEM_CNT  as  pntAmt5000
		        ,PNT_05000_MEM_CNT  as  pntAmt6000
		        ,PNT_06000_MEM_CNT  as  pntAmt7000
		        ,PNT_07000_MEM_CNT  as  pntAmt8000
		        ,PNT_08000_MEM_CNT  as  pntAmt9000
		        ,PNT_09000_MEM_CNT  as  pntAmt10000
		        ,PNT_10000_MEM_CNT  as  pntAmt11000
		        ,PNT_11000_MEM_CNT  as  pntAmt12000
		        ,PNT_12000_MEM_CNT  as  pntAmt13000
		        ,PNT_13000_MEM_CNT  as  pntAmt14000
		        ,PNT_14000_MEM_CNT  as  pntAmt15000
		        ,PNT_15200_MEM_CNT  as  pntAmt15000u
		        ,PNT_20000_MEM_CNT  as  pntAmt20000d
		       --
		       	,RDM_00000_MEM_CNT  as  pntUse0
		        ,RDM_00999_MEM_CNT  as  pntUse1000
		        ,RDM_01000_MEM_CNT  as  pntUse2000
		        ,RDM_02000_MEM_CNT  as  pntUse3000
		        ,RDM_03000_MEM_CNT  as  pntUse4000
		        ,RDM_04000_MEM_CNT  as  pntUse5000
		        ,RDM_05000_MEM_CNT  as  pntUse6000
		        ,RDM_06000_MEM_CNT  as  pntUse7000
		        ,RDM_07000_MEM_CNT  as  pntUse8000
		        ,RDM_08000_MEM_CNT  as  pntUse9000
		        ,RDM_09000_MEM_CNT  as  pntUse10000
		        ,RDM_10000_MEM_CNT  as  pntUse11000
		        ,RDM_11000_MEM_CNT  as  pntUse12000
		        ,RDM_12000_MEM_CNT  as  pntUse13000
		        ,RDM_13000_MEM_CNT  as  pntUse14000
		        ,RDM_14000_MEM_CNT  as  pntUse15000
		        ,RDM_15200_MEM_CNT  as  pntUse15000u
		        ,RDM_20000_MEM_CNT  as  pntUse20000d
		       --
		        ,AMT_00000_MEM_CNT  as  pntBuyMbr0
		        ,AMT_00999_MEM_CNT  as  pntBuyMbr1000
		        ,AMT_01000_MEM_CNT  as  pntBuyMbr2000
		        ,AMT_02000_MEM_CNT  as  pntBuyMbr3000
		        ,AMT_03000_MEM_CNT  as  pntBuyMbr4000
		        ,AMT_04000_MEM_CNT  as  pntBuyMbr5000
		        ,AMT_05000_MEM_CNT  as  pntBuyMbr6000
		        ,AMT_06000_MEM_CNT  as  pntBuyMbr7000
		        ,AMT_07000_MEM_CNT  as  pntBuyMbr8000
		        ,AMT_08000_MEM_CNT  as  pntBuyMbr9000
		        ,AMT_09000_MEM_CNT  as  pntBuyMbr10000
		        ,AMT_10000_MEM_CNT  as  pntBuyMbr11000
		        ,AMT_11000_MEM_CNT  as  pntBuyMbr12000
		        ,AMT_12000_MEM_CNT  as  pntBuyMbr13000
		        ,AMT_13000_MEM_CNT  as  pntBuyMbr14000
		        ,AMT_14000_MEM_CNT  as  pntBuyMbr15000
		        ,AMT_15000_MEM_CNT  as  pntBuyMbr16000
		        ,AMT_16000_MEM_CNT  as  pntBuyMbr17000
		        ,AMT_17000_MEM_CNT  as  pntBuyMbr18000
		        ,AMT_18000_MEM_CNT  as  pntBuyMbr19000
		        ,AMT_19000_MEM_CNT  as  pntBuyMbr20000
		        ,AMT_20000_MEM_CNT  as  pntBuyMbr21000
		        ,AMT_21000_MEM_CNT  as  pntBuyMbr22000
		        ,AMT_22000_MEM_CNT  as  pntBuyMbr23000
		        ,AMT_23000_MEM_CNT  as  pntBuyMbr24000
		        ,AMT_24000_MEM_CNT  as  pntBuyMbr25000
		        ,AMT_25000_MEM_CNT  as  pntBuyMbr26000
		        ,AMT_26000_MEM_CNT  as  pntBuyMbr27000
		        ,AMT_27000_MEM_CNT  as  pntBuyMbr28000
		        ,AMT_28000_MEM_CNT  as  pntBuyMbr29000
		        ,AMT_29000_MEM_CNT  as  pntBuyMbr30000
		        ,AMT_30000_MEM_CNT  as  pntBuyMbr30000u
		        ,${strColumn}
		FROM MRT.FT_PNT_BAND_D
		WHERE YYYYMMDD BETWEEN CONCAT(#{yyyymm}, '01') AND com.TO_CHAR(EOMONTH(com.TO_DATE(#{yyyymm},'YYYYMM')),'YYYYMMDD')
		AND QRY_TYPE = #{qryType}
		<if test="@infavor.icncommon.util.ICNStringUtility@isNotEmpty(storeCd)">
		 	AND STORE_CD =#{storeCd}
		</if>
		<if test="@infavor.icncommon.util.ICNStringUtility@isNotEmpty(genCd)">
		 	AND GEND_CD =#{genCd}
		</if>
		<if test="@infavor.icncommon.util.ICNStringUtility@isNotEmpty(ageCd)">
		 	AND AGE_CD =#{ageCd}
		</if>
		ORDER BY 1
	</select>

	<select id="selectMbrMonthSalList" parameterType="com.icignal.kepler.report.dto.request.KprReportReqDto"
	 resultType="com.icignal.kepler.report.dto.response.KprReportMbrMonthSalResDto">
	<if test="@infavor.icncommon.util.ICNStringUtility@isNotEmpty(toMonth)">
	<![CDATA[
		SELECT
	       LV AS seq
	      ,CASE WHEN LV BETWEEN 1 AND 18 THEN '포인트 보유 금액별' WHEN LV BETWEEN 19 AND 36 THEN '포인트 사용 금액별' WHEN LV BETWEEN 37 AND 68 THEN '구매금액 기준 회원수' END AS typea
	      ,CASE WHEN LV = 1 THEN '0'      WHEN LV = 2 THEN '~ 1000' WHEN LV = 3 THEN '~ 2000' WHEN LV = 4 THEN '~ 3000' WHEN LV = 5  THEN '~ 4000'  WHEN LV = 6 THEN '~ 5000'
	            WHEN LV = 7 THEN '~ 6000' WHEN LV = 8 THEN '~ 7000' WHEN LV = 9 THEN '~ 8000' WHEN LV =10 THEN '~ 9000' WHEN LV = 11 THEN '~ 10000' WHEN LV = 12 THEN '~ 11000'
	            WHEN LV = 13 THEN '~ 12000' WHEN LV = 14 THEN '~ 13000' WHEN LV = 15 THEN '~ 14000' WHEN LV = 16 THEN '~ 15000' WHEN LV = 17 THEN '15000 ~ 20000'  WHEN LV = 18 THEN ' 20000 이상'
	            WHEN LV = 19 THEN '0'      WHEN LV = 20 THEN '~ 1000' WHEN LV = 21 THEN '~ 2000' WHEN LV = 22 THEN '~ 3000' WHEN LV = 23  THEN '~ 4000'  WHEN LV = 24 THEN '~ 5000'
	            WHEN LV = 25 THEN '~ 6000' WHEN LV = 26 THEN '~ 7000' WHEN LV = 27 THEN '~ 8000' WHEN LV = 28 THEN '~ 9000' WHEN LV = 29 THEN '~ 10000' WHEN LV = 30 THEN '~ 11000'
	            WHEN LV = 31 THEN '~ 12000' WHEN LV = 32 THEN '~ 13000' WHEN LV = 33 THEN '~ 14000' WHEN LV = 34 THEN '~ 15000' WHEN LV = 35 THEN '15000 ~ 20000'  WHEN LV = 36 THEN ' 20000 이상' END typeb
	      ,DECODE(LV,1 ,PNT_00000_0M ,2 ,PNT_00999_0M ,3 ,PNT_01000_0M ,4 ,PNT_02000_0M ,5 ,PNT_03000_0M ,6 ,PNT_04000_0M ,7 ,PNT_05000_0M ,8 ,PNT_06000_0M ,9 ,PNT_07000_0M ,10,PNT_08000_0M ,11,PNT_09000_0M ,12,PNT_10000_0M ,13,PNT_11000_0M ,14,PNT_12000_0M ,15,PNT_13000_0M ,16,PNT_14000_0M ,17,PNT_15200_0M ,18,PNT_20000_0M
	                ,19,RDM_00000_0M ,20,RDM_00999_0M ,21,RDM_01000_0M ,22,RDM_02000_0M ,23,RDM_03000_0M ,24,RDM_04000_0M ,25,RDM_05000_0M ,26,RDM_06000_0M ,27,RDM_07000_0M ,28,RDM_08000_0M ,29,RDM_09000_0M ,30,RDM_10000_0M ,31,RDM_11000_0M ,32,RDM_12000_0M ,33,RDM_13000_0M ,34,RDM_14000_0M ,35,RDM_15200_0M ,36,RDM_20000_0M ) AS month0m
	      ,DECODE(LV,1 ,PNT_00000_1M ,2 ,PNT_00999_1M ,3 ,PNT_01000_1M ,4 ,PNT_02000_1M ,5 ,PNT_03000_1M ,6 ,PNT_04000_1M ,7 ,PNT_05000_1M ,8 ,PNT_06000_1M ,9 ,PNT_07000_1M ,10,PNT_08000_1M ,11,PNT_09000_1M ,12,PNT_10000_1M ,13,PNT_11000_1M ,14,PNT_12000_1M ,15,PNT_13000_1M ,16,PNT_14000_1M ,17,PNT_15200_1M ,18,PNT_20000_1M
	                ,19,RDM_00000_1M ,20,RDM_00999_1M ,21,RDM_01000_1M ,22,RDM_02000_1M ,23,RDM_03000_1M ,24,RDM_04000_1M ,25,RDM_05000_1M ,26,RDM_06000_1M ,27,RDM_07000_1M ,28,RDM_08000_1M ,29,RDM_09000_1M ,30,RDM_10000_1M ,31,RDM_11000_1M ,32,RDM_12000_1M ,33,RDM_13000_1M ,34,RDM_14000_1M ,35,RDM_15200_1M ,36,RDM_20000_1M ) AS month1m
	      ,DECODE(LV,1 ,PNT_00000_12M,2 ,PNT_00999_12M,3 ,PNT_01000_12M,4 ,PNT_02000_12M,5 ,PNT_03000_12M,6 ,PNT_04000_12M,7 ,PNT_05000_12M,8 ,PNT_06000_12M,9 ,PNT_07000_12M,10,PNT_08000_12M,11,PNT_09000_12M,12,PNT_10000_12M,13,PNT_11000_12M,14,PNT_12000_12M,15,PNT_13000_12M,16,PNT_14000_12M,17,PNT_15200_12M,18,PNT_20000_12M
	                ,19,RDM_00000_12M,20,RDM_00999_12M,21,RDM_01000_12M,22,RDM_02000_12M,23,RDM_03000_12M,24,RDM_04000_12M,25,RDM_05000_12M,26,RDM_06000_12M,27,RDM_07000_12M,28,RDM_08000_12M,29,RDM_09000_12M,30,RDM_10000_12M,31,RDM_11000_12M,32,RDM_12000_12M,33,RDM_13000_12M,34,RDM_14000_12M,35,RDM_15200_12M,36,RDM_20000_12M ) AS month12m
	      ,DECODE(LV,1 ,PNT_00000_1M_RATE ,2 ,PNT_00999_1M_RATE ,3 ,PNT_01000_1M_RATE ,4 ,PNT_02000_1M_RATE ,5 ,PNT_03000_1M_RATE ,6 ,PNT_04000_1M_RATE ,7 ,PNT_05000_1M_RATE ,8 ,PNT_06000_1M_RATE ,9 ,PNT_07000_1M_RATE ,10,PNT_08000_1M_RATE ,11,PNT_09000_1M_RATE ,12,PNT_10000_1M_RATE ,13,PNT_11000_1M_RATE ,14,PNT_12000_1M_RATE ,15,PNT_13000_1M_RATE ,16,PNT_14000_1M_RATE ,17,PNT_15200_1M_RATE ,18,PNT_20000_1M_RATE
	                ,19,RDM_00000_1M_RATE ,20,RDM_00999_1M_RATE ,21,RDM_01000_1M_RATE ,22,RDM_02000_1M_RATE ,23,RDM_03000_1M_RATE ,24,RDM_04000_1M_RATE ,25,RDM_05000_1M_RATE ,26,RDM_06000_1M_RATE ,27,RDM_07000_1M_RATE ,28,RDM_08000_1M_RATE ,29,RDM_09000_1M_RATE ,30,RDM_10000_1M_RATE ,31,RDM_11000_1M_RATE ,32,RDM_12000_1M_RATE ,33,RDM_13000_1M_RATE ,34,RDM_14000_1M_RATE ,35,RDM_15200_1M_RATE ,36,RDM_20000_1M_RATE ) AS month1mRate
	      ,DECODE(LV,1 ,PNT_00000_12M_RATE,2 ,PNT_00999_12M_RATE,3 ,PNT_01000_12M_RATE,4 ,PNT_02000_12M_RATE,5 ,PNT_03000_12M_RATE,6 ,PNT_04000_12M_RATE,7 ,PNT_05000_12M_RATE,8 ,PNT_06000_12M_RATE,9 ,PNT_07000_12M_RATE,10,PNT_08000_12M_RATE,11,PNT_09000_12M_RATE,12,PNT_10000_12M_RATE,13,PNT_11000_12M_RATE,14,PNT_12000_12M_RATE,15,PNT_13000_12M_RATE,16,PNT_14000_12M_RATE,17,PNT_15200_12M_RATE,18,PNT_20000_12M_RATE
	                ,19,RDM_00000_12M_RATE,20,RDM_00999_12M_RATE,21,RDM_01000_12M_RATE,22,RDM_02000_12M_RATE,23,RDM_03000_12M_RATE,24,RDM_04000_12M_RATE,25,RDM_05000_12M_RATE,26,RDM_06000_12M_RATE,27,RDM_07000_12M_RATE,28,RDM_08000_12M_RATE,29,RDM_09000_12M_RATE,30,RDM_10000_12M_RATE,31,RDM_11000_12M_RATE,32,RDM_12000_12M_RATE,33,RDM_13000_12M_RATE,34,RDM_14000_12M_RATE,35,RDM_15200_12M_RATE,36,RDM_20000_12M_RATE ) AS month12mRate
	FROM
	    (
	    SELECT   PNT_00000_0M,PNT_00999_0M,PNT_01000_0M,PNT_02000_0M,PNT_03000_0M,PNT_04000_0M,PNT_05000_0M,PNT_06000_0M,PNT_07000_0M,PNT_08000_0M,PNT_09000_0M,PNT_10000_0M
	            ,PNT_11000_0M,PNT_12000_0M,PNT_13000_0M,PNT_14000_0M,PNT_15200_0M,PNT_20000_0M,RDM_00000_0M,RDM_00999_0M,RDM_01000_0M,RDM_02000_0M,RDM_03000_0M,RDM_04000_0M
	            ,RDM_05000_0M,RDM_06000_0M,RDM_07000_0M,RDM_08000_0M,RDM_09000_0M,RDM_10000_0M,RDM_11000_0M,RDM_12000_0M,RDM_13000_0M,RDM_14000_0M,RDM_15200_0M,RDM_20000_0M
	            ,PNT_00000_1M,PNT_00999_1M,PNT_01000_1M,PNT_02000_1M,PNT_03000_1M,PNT_04000_1M,PNT_05000_1M,PNT_06000_1M,PNT_07000_1M,PNT_08000_1M,PNT_09000_1M,PNT_10000_1M
	            ,PNT_11000_1M,PNT_12000_1M,PNT_13000_1M,PNT_14000_1M,PNT_15200_1M,PNT_20000_1M,RDM_00000_1M,RDM_00999_1M,RDM_01000_1M,RDM_02000_1M,RDM_03000_1M,RDM_04000_1M
	            ,RDM_05000_1M,RDM_06000_1M,RDM_07000_1M,RDM_08000_1M,RDM_09000_1M,RDM_10000_1M,RDM_11000_1M,RDM_12000_1M,RDM_13000_1M,RDM_14000_1M,RDM_15200_1M,RDM_20000_1M
	            ,PNT_00000_12M,PNT_00999_12M,PNT_01000_12M,PNT_02000_12M,PNT_03000_12M,PNT_04000_12M,PNT_05000_12M,PNT_06000_12M,PNT_07000_12M,PNT_08000_12M,PNT_09000_12M,PNT_10000_12M
	            ,PNT_11000_12M,PNT_12000_12M,PNT_13000_12M,PNT_14000_12M,PNT_15200_12M,PNT_20000_12M,RDM_00000_12M,RDM_00999_12M,RDM_01000_12M,RDM_02000_12M,RDM_03000_12M,RDM_04000_12M
	            ,RDM_05000_12M,RDM_06000_12M,RDM_07000_12M,RDM_08000_12M,RDM_09000_12M,RDM_10000_12M,RDM_11000_12M,RDM_12000_12M,RDM_13000_12M,RDM_14000_12M,RDM_15200_12M,RDM_20000_12M
	            ,CASE WHEN PNT_00000_1M  = 0 THEN 0 ELSE ROUND((PNT_00000_0M - PNT_00000_1M )/PNT_00000_1M*100,1 ) END AS PNT_00000_1M_RATE
	            ,CASE WHEN PNT_00999_1M  = 0 THEN 0 ELSE ROUND((PNT_00999_0M - PNT_00999_1M )/PNT_00999_1M*100,1 ) END AS PNT_00999_1M_RATE
	            ,CASE WHEN PNT_01000_1M  = 0 THEN 0 ELSE ROUND((PNT_01000_0M - PNT_01000_1M )/PNT_01000_1M*100,1 ) END AS PNT_01000_1M_RATE
	            ,CASE WHEN PNT_02000_1M  = 0 THEN 0 ELSE ROUND((PNT_02000_0M - PNT_02000_1M )/PNT_02000_1M*100,1 ) END AS PNT_02000_1M_RATE
	            ,CASE WHEN PNT_03000_1M  = 0 THEN 0 ELSE ROUND((PNT_03000_0M - PNT_03000_1M )/PNT_03000_1M*100,1 ) END AS PNT_03000_1M_RATE
	            ,CASE WHEN PNT_04000_1M  = 0 THEN 0 ELSE ROUND((PNT_04000_0M - PNT_04000_1M )/PNT_04000_1M*100,1 ) END AS PNT_04000_1M_RATE
	            ,CASE WHEN PNT_05000_1M  = 0 THEN 0 ELSE ROUND((PNT_05000_0M - PNT_05000_1M )/PNT_05000_1M*100,1 ) END AS PNT_05000_1M_RATE
	            ,CASE WHEN PNT_06000_1M  = 0 THEN 0 ELSE ROUND((PNT_06000_0M - PNT_06000_1M )/PNT_06000_1M*100,1 ) END AS PNT_06000_1M_RATE
	            ,CASE WHEN PNT_07000_1M  = 0 THEN 0 ELSE ROUND((PNT_07000_0M - PNT_07000_1M )/PNT_07000_1M*100,1 ) END AS PNT_07000_1M_RATE
	            ,CASE WHEN PNT_08000_1M  = 0 THEN 0 ELSE ROUND((PNT_08000_0M - PNT_08000_1M )/PNT_08000_1M*100,1 ) END AS PNT_08000_1M_RATE
	            ,CASE WHEN PNT_09000_1M  = 0 THEN 0 ELSE ROUND((PNT_09000_0M - PNT_09000_1M )/PNT_09000_1M*100,1 ) END AS PNT_09000_1M_RATE
	            ,CASE WHEN PNT_10000_1M  = 0 THEN 0 ELSE ROUND((PNT_10000_0M - PNT_10000_1M )/PNT_10000_1M*100,1 ) END AS PNT_10000_1M_RATE
	            ,CASE WHEN PNT_11000_1M  = 0 THEN 0 ELSE ROUND((PNT_11000_0M - PNT_11000_1M )/PNT_11000_1M*100,1 ) END AS PNT_11000_1M_RATE
	            ,CASE WHEN PNT_12000_1M  = 0 THEN 0 ELSE ROUND((PNT_12000_0M - PNT_12000_1M )/PNT_12000_1M*100,1 ) END AS PNT_12000_1M_RATE
	            ,CASE WHEN PNT_13000_1M  = 0 THEN 0 ELSE ROUND((PNT_13000_0M - PNT_13000_1M )/PNT_13000_1M*100,1 ) END AS PNT_13000_1M_RATE
	            ,CASE WHEN PNT_14000_1M  = 0 THEN 0 ELSE ROUND((PNT_14000_0M - PNT_14000_1M )/PNT_14000_1M*100,1 ) END AS PNT_14000_1M_RATE
	            ,CASE WHEN PNT_15200_1M  = 0 THEN 0 ELSE ROUND((PNT_15200_0M - PNT_15200_1M )/PNT_15200_1M*100,1 ) END AS PNT_15200_1M_RATE
	            ,CASE WHEN PNT_20000_1M  = 0 THEN 0 ELSE ROUND((PNT_20000_0M - PNT_20000_1M )/PNT_20000_1M*100,1 ) END AS PNT_20000_1M_RATE
	            ,CASE WHEN RDM_00000_1M  = 0 THEN 0 ELSE ROUND((RDM_00000_0M - RDM_00000_1M )/RDM_00000_1M*100,1 ) END AS RDM_00000_1M_RATE
	            ,CASE WHEN RDM_00999_1M  = 0 THEN 0 ELSE ROUND((RDM_00999_0M - RDM_00999_1M )/RDM_00999_1M*100,1 ) END AS RDM_00999_1M_RATE
	            ,CASE WHEN RDM_01000_1M  = 0 THEN 0 ELSE ROUND((RDM_01000_0M - RDM_01000_1M )/RDM_01000_1M*100,1 ) END AS RDM_01000_1M_RATE
	            ,CASE WHEN RDM_02000_1M  = 0 THEN 0 ELSE ROUND((RDM_02000_0M - RDM_02000_1M )/RDM_02000_1M*100,1 ) END AS RDM_02000_1M_RATE
	            ,CASE WHEN RDM_03000_1M  = 0 THEN 0 ELSE ROUND((RDM_03000_0M - RDM_03000_1M )/RDM_03000_1M*100,1 ) END AS RDM_03000_1M_RATE
	            ,CASE WHEN RDM_04000_1M  = 0 THEN 0 ELSE ROUND((RDM_04000_0M - RDM_04000_1M )/RDM_04000_1M*100,1 ) END AS RDM_04000_1M_RATE
	            ,CASE WHEN RDM_05000_1M  = 0 THEN 0 ELSE ROUND((RDM_05000_0M - RDM_05000_1M )/RDM_05000_1M*100,1 ) END AS RDM_05000_1M_RATE
	            ,CASE WHEN RDM_06000_1M  = 0 THEN 0 ELSE ROUND((RDM_06000_0M - RDM_06000_1M )/RDM_06000_1M*100,1 ) END AS RDM_06000_1M_RATE
	            ,CASE WHEN RDM_07000_1M  = 0 THEN 0 ELSE ROUND((RDM_07000_0M - RDM_07000_1M )/RDM_07000_1M*100,1 ) END AS RDM_07000_1M_RATE
	            ,CASE WHEN RDM_08000_1M  = 0 THEN 0 ELSE ROUND((RDM_08000_0M - RDM_08000_1M )/RDM_08000_1M*100,1 ) END AS RDM_08000_1M_RATE
	            ,CASE WHEN RDM_09000_1M  = 0 THEN 0 ELSE ROUND((RDM_09000_0M - RDM_09000_1M )/RDM_09000_1M*100,1 ) END AS RDM_09000_1M_RATE
	            ,CASE WHEN RDM_10000_1M  = 0 THEN 0 ELSE ROUND((RDM_10000_0M - RDM_10000_1M )/RDM_10000_1M*100,1 ) END AS RDM_10000_1M_RATE
	            ,CASE WHEN RDM_11000_1M  = 0 THEN 0 ELSE ROUND((RDM_11000_0M - RDM_11000_1M )/RDM_11000_1M*100,1 ) END AS RDM_11000_1M_RATE
	            ,CASE WHEN RDM_12000_1M  = 0 THEN 0 ELSE ROUND((RDM_12000_0M - RDM_12000_1M )/RDM_12000_1M*100,1 ) END AS RDM_12000_1M_RATE
	            ,CASE WHEN RDM_13000_1M  = 0 THEN 0 ELSE ROUND((RDM_13000_0M - RDM_13000_1M )/RDM_13000_1M*100,1 ) END AS RDM_13000_1M_RATE
	            ,CASE WHEN RDM_14000_1M  = 0 THEN 0 ELSE ROUND((RDM_14000_0M - RDM_14000_1M )/RDM_14000_1M*100,1 ) END AS RDM_14000_1M_RATE
	            ,CASE WHEN RDM_15200_1M  = 0 THEN 0 ELSE ROUND((RDM_15200_0M - RDM_15200_1M )/RDM_15200_1M*100,1 ) END AS RDM_15200_1M_RATE
	            ,CASE WHEN RDM_20000_1M  = 0 THEN 0 ELSE ROUND((RDM_20000_0M - RDM_20000_1M )/RDM_20000_1M*100,1 ) END AS RDM_20000_1M_RATE
	            ,CASE WHEN PNT_00000_12M = 0 THEN 0 ELSE ROUND((PNT_00000_0M - PNT_00000_12M)/PNT_00000_12M*100,1) END AS PNT_00000_12M_RATE
	            ,CASE WHEN PNT_00999_12M = 0 THEN 0 ELSE ROUND((PNT_00999_0M - PNT_00999_12M)/PNT_00999_12M*100,1) END AS PNT_00999_12M_RATE
	            ,CASE WHEN PNT_01000_12M = 0 THEN 0 ELSE ROUND((PNT_01000_0M - PNT_01000_12M)/PNT_01000_12M*100,1) END AS PNT_01000_12M_RATE
	            ,CASE WHEN PNT_02000_12M = 0 THEN 0 ELSE ROUND((PNT_02000_0M - PNT_02000_12M)/PNT_02000_12M*100,1) END AS PNT_02000_12M_RATE
	            ,CASE WHEN PNT_03000_12M = 0 THEN 0 ELSE ROUND((PNT_03000_0M - PNT_03000_12M)/PNT_03000_12M*100,1) END AS PNT_03000_12M_RATE
	            ,CASE WHEN PNT_04000_12M = 0 THEN 0 ELSE ROUND((PNT_04000_0M - PNT_04000_12M)/PNT_04000_12M*100,1) END AS PNT_04000_12M_RATE
	            ,CASE WHEN PNT_05000_12M = 0 THEN 0 ELSE ROUND((PNT_05000_0M - PNT_05000_12M)/PNT_05000_12M*100,1) END AS PNT_05000_12M_RATE
	            ,CASE WHEN PNT_06000_12M = 0 THEN 0 ELSE ROUND((PNT_06000_0M - PNT_06000_12M)/PNT_06000_12M*100,1) END AS PNT_06000_12M_RATE
	            ,CASE WHEN PNT_07000_12M = 0 THEN 0 ELSE ROUND((PNT_07000_0M - PNT_07000_12M)/PNT_07000_12M*100,1) END AS PNT_07000_12M_RATE
	            ,CASE WHEN PNT_08000_12M = 0 THEN 0 ELSE ROUND((PNT_08000_0M - PNT_08000_12M)/PNT_08000_12M*100,1) END AS PNT_08000_12M_RATE
	            ,CASE WHEN PNT_09000_12M = 0 THEN 0 ELSE ROUND((PNT_09000_0M - PNT_09000_12M)/PNT_09000_12M*100,1) END AS PNT_09000_12M_RATE
	            ,CASE WHEN PNT_10000_12M = 0 THEN 0 ELSE ROUND((PNT_10000_0M - PNT_10000_12M)/PNT_10000_12M*100,1) END AS PNT_10000_12M_RATE
	            ,CASE WHEN PNT_11000_12M = 0 THEN 0 ELSE ROUND((PNT_11000_0M - PNT_11000_12M)/PNT_11000_12M*100,1) END AS PNT_11000_12M_RATE
	            ,CASE WHEN PNT_12000_12M = 0 THEN 0 ELSE ROUND((PNT_12000_0M - PNT_12000_12M)/PNT_12000_12M*100,1) END AS PNT_12000_12M_RATE
	            ,CASE WHEN PNT_13000_12M = 0 THEN 0 ELSE ROUND((PNT_13000_0M - PNT_13000_12M)/PNT_13000_12M*100,1) END AS PNT_13000_12M_RATE
	            ,CASE WHEN PNT_14000_12M = 0 THEN 0 ELSE ROUND((PNT_14000_0M - PNT_14000_12M)/PNT_14000_12M*100,1) END AS PNT_14000_12M_RATE
	            ,CASE WHEN PNT_15200_12M = 0 THEN 0 ELSE ROUND((PNT_15200_0M - PNT_15200_12M)/PNT_15200_12M*100,1) END AS PNT_15200_12M_RATE
	            ,CASE WHEN PNT_20000_12M = 0 THEN 0 ELSE ROUND((PNT_20000_0M - PNT_20000_12M)/PNT_20000_12M*100,1) END AS PNT_20000_12M_RATE
	            ,CASE WHEN RDM_00000_12M = 0 THEN 0 ELSE ROUND((RDM_00000_0M - RDM_00000_12M)/RDM_00000_12M*100,1) END AS RDM_00000_12M_RATE
	            ,CASE WHEN RDM_00999_12M = 0 THEN 0 ELSE ROUND((RDM_00999_0M - RDM_00999_12M)/RDM_00999_12M*100,1) END AS RDM_00999_12M_RATE
	            ,CASE WHEN RDM_01000_12M = 0 THEN 0 ELSE ROUND((RDM_01000_0M - RDM_01000_12M)/RDM_01000_12M*100,1) END AS RDM_01000_12M_RATE
	            ,CASE WHEN RDM_02000_12M = 0 THEN 0 ELSE ROUND((RDM_02000_0M - RDM_02000_12M)/RDM_02000_12M*100,1) END AS RDM_02000_12M_RATE
	            ,CASE WHEN RDM_03000_12M = 0 THEN 0 ELSE ROUND((RDM_03000_0M - RDM_03000_12M)/RDM_03000_12M*100,1) END AS RDM_03000_12M_RATE
	            ,CASE WHEN RDM_04000_12M = 0 THEN 0 ELSE ROUND((RDM_04000_0M - RDM_04000_12M)/RDM_04000_12M*100,1) END AS RDM_04000_12M_RATE
	            ,CASE WHEN RDM_05000_12M = 0 THEN 0 ELSE ROUND((RDM_05000_0M - RDM_05000_12M)/RDM_05000_12M*100,1) END AS RDM_05000_12M_RATE
	            ,CASE WHEN RDM_06000_12M = 0 THEN 0 ELSE ROUND((RDM_06000_0M - RDM_06000_12M)/RDM_06000_12M*100,1) END AS RDM_06000_12M_RATE
	            ,CASE WHEN RDM_07000_12M = 0 THEN 0 ELSE ROUND((RDM_07000_0M - RDM_07000_12M)/RDM_07000_12M*100,1) END AS RDM_07000_12M_RATE
	            ,CASE WHEN RDM_08000_12M = 0 THEN 0 ELSE ROUND((RDM_08000_0M - RDM_08000_12M)/RDM_08000_12M*100,1) END AS RDM_08000_12M_RATE
	            ,CASE WHEN RDM_09000_12M = 0 THEN 0 ELSE ROUND((RDM_09000_0M - RDM_09000_12M)/RDM_09000_12M*100,1) END AS RDM_09000_12M_RATE
	            ,CASE WHEN RDM_10000_12M = 0 THEN 0 ELSE ROUND((RDM_10000_0M - RDM_10000_12M)/RDM_10000_12M*100,1) END AS RDM_10000_12M_RATE
	            ,CASE WHEN RDM_11000_12M = 0 THEN 0 ELSE ROUND((RDM_11000_0M - RDM_11000_12M)/RDM_11000_12M*100,1) END AS RDM_11000_12M_RATE
	            ,CASE WHEN RDM_12000_12M = 0 THEN 0 ELSE ROUND((RDM_12000_0M - RDM_12000_12M)/RDM_12000_12M*100,1) END AS RDM_12000_12M_RATE
	            ,CASE WHEN RDM_13000_12M = 0 THEN 0 ELSE ROUND((RDM_13000_0M - RDM_13000_12M)/RDM_13000_12M*100,1) END AS RDM_13000_12M_RATE
	            ,CASE WHEN RDM_14000_12M = 0 THEN 0 ELSE ROUND((RDM_14000_0M - RDM_14000_12M)/RDM_14000_12M*100,1) END AS RDM_14000_12M_RATE
	            ,CASE WHEN RDM_15200_12M = 0 THEN 0 ELSE ROUND((RDM_15200_0M - RDM_15200_12M)/RDM_15200_12M*100,1) END AS RDM_15200_12M_RATE
	            ,CASE WHEN RDM_20000_12M = 0 THEN 0 ELSE ROUND((RDM_20000_0M - RDM_20000_12M)/RDM_20000_12M*100,1) END AS RDM_20000_12M_RATE
	    FROM
	        (
		        SELECT
		             SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                    THEN PNT_00000_MEM_CNT ELSE 0 END) AS PNT_00000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                    THEN PNT_00999_MEM_CNT ELSE 0 END) AS PNT_00999_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                    THEN PNT_01000_MEM_CNT ELSE 0 END) AS PNT_01000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                    THEN PNT_02000_MEM_CNT ELSE 0 END) AS PNT_02000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                    THEN PNT_03000_MEM_CNT ELSE 0 END) AS PNT_03000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                    THEN PNT_04000_MEM_CNT ELSE 0 END) AS PNT_04000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                    THEN PNT_05000_MEM_CNT ELSE 0 END) AS PNT_05000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                    THEN PNT_06000_MEM_CNT ELSE 0 END) AS PNT_06000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                    THEN PNT_07000_MEM_CNT ELSE 0 END) AS PNT_07000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                    THEN PNT_08000_MEM_CNT ELSE 0 END) AS PNT_08000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                    THEN PNT_09000_MEM_CNT ELSE 0 END) AS PNT_09000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                    THEN PNT_10000_MEM_CNT ELSE 0 END) AS PNT_10000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                    THEN PNT_11000_MEM_CNT ELSE 0 END) AS PNT_11000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                    THEN PNT_12000_MEM_CNT ELSE 0 END) AS PNT_12000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                    THEN PNT_13000_MEM_CNT ELSE 0 END) AS PNT_13000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                    THEN PNT_14000_MEM_CNT ELSE 0 END) AS PNT_14000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                    THEN PNT_15200_MEM_CNT ELSE 0 END) AS PNT_15200_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                    THEN PNT_20000_MEM_CNT ELSE 0 END) AS PNT_20000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                    THEN RDM_00000_MEM_CNT ELSE 0 END) AS RDM_00000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                    THEN RDM_00999_MEM_CNT ELSE 0 END) AS RDM_00999_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                    THEN RDM_01000_MEM_CNT ELSE 0 END) AS RDM_01000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                    THEN RDM_02000_MEM_CNT ELSE 0 END) AS RDM_02000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                    THEN RDM_03000_MEM_CNT ELSE 0 END) AS RDM_03000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                    THEN RDM_04000_MEM_CNT ELSE 0 END) AS RDM_04000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                    THEN RDM_05000_MEM_CNT ELSE 0 END) AS RDM_05000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                    THEN RDM_06000_MEM_CNT ELSE 0 END) AS RDM_06000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                    THEN RDM_07000_MEM_CNT ELSE 0 END) AS RDM_07000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                    THEN RDM_08000_MEM_CNT ELSE 0 END) AS RDM_08000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                    THEN RDM_09000_MEM_CNT ELSE 0 END) AS RDM_09000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                    THEN RDM_10000_MEM_CNT ELSE 0 END) AS RDM_10000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                    THEN RDM_11000_MEM_CNT ELSE 0 END) AS RDM_11000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                    THEN RDM_12000_MEM_CNT ELSE 0 END) AS RDM_12000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                    THEN RDM_13000_MEM_CNT ELSE 0 END) AS RDM_13000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                    THEN RDM_14000_MEM_CNT ELSE 0 END) AS RDM_14000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                    THEN RDM_15200_MEM_CNT ELSE 0 END) AS RDM_15200_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                    THEN RDM_20000_MEM_CNT ELSE 0 END) AS RDM_20000_0M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN PNT_00000_MEM_CNT ELSE 0 END) AS PNT_00000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN PNT_00999_MEM_CNT ELSE 0 END) AS PNT_00999_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN PNT_01000_MEM_CNT ELSE 0 END) AS PNT_01000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN PNT_02000_MEM_CNT ELSE 0 END) AS PNT_02000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN PNT_03000_MEM_CNT ELSE 0 END) AS PNT_03000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN PNT_04000_MEM_CNT ELSE 0 END) AS PNT_04000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN PNT_05000_MEM_CNT ELSE 0 END) AS PNT_05000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN PNT_06000_MEM_CNT ELSE 0 END) AS PNT_06000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN PNT_07000_MEM_CNT ELSE 0 END) AS PNT_07000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN PNT_08000_MEM_CNT ELSE 0 END) AS PNT_08000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN PNT_09000_MEM_CNT ELSE 0 END) AS PNT_09000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN PNT_10000_MEM_CNT ELSE 0 END) AS PNT_10000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN PNT_11000_MEM_CNT ELSE 0 END) AS PNT_11000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN PNT_12000_MEM_CNT ELSE 0 END) AS PNT_12000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN PNT_13000_MEM_CNT ELSE 0 END) AS PNT_13000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN PNT_14000_MEM_CNT ELSE 0 END) AS PNT_14000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN PNT_15200_MEM_CNT ELSE 0 END) AS PNT_15200_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN PNT_20000_MEM_CNT ELSE 0 END) AS PNT_20000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN RDM_00000_MEM_CNT ELSE 0 END) AS RDM_00000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN RDM_00999_MEM_CNT ELSE 0 END) AS RDM_00999_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN RDM_01000_MEM_CNT ELSE 0 END) AS RDM_01000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN RDM_02000_MEM_CNT ELSE 0 END) AS RDM_02000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN RDM_03000_MEM_CNT ELSE 0 END) AS RDM_03000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN RDM_04000_MEM_CNT ELSE 0 END) AS RDM_04000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN RDM_05000_MEM_CNT ELSE 0 END) AS RDM_05000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN RDM_06000_MEM_CNT ELSE 0 END) AS RDM_06000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN RDM_07000_MEM_CNT ELSE 0 END) AS RDM_07000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN RDM_08000_MEM_CNT ELSE 0 END) AS RDM_08000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN RDM_09000_MEM_CNT ELSE 0 END) AS RDM_09000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN RDM_10000_MEM_CNT ELSE 0 END) AS RDM_10000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN RDM_11000_MEM_CNT ELSE 0 END) AS RDM_11000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN RDM_12000_MEM_CNT ELSE 0 END) AS RDM_12000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN RDM_13000_MEM_CNT ELSE 0 END) AS RDM_13000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN RDM_14000_MEM_CNT ELSE 0 END) AS RDM_14000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN RDM_15200_MEM_CNT ELSE 0 END) AS RDM_15200_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN RDM_20000_MEM_CNT ELSE 0 END) AS RDM_20000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN PNT_00000_MEM_CNT ELSE 0 END) AS PNT_00000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN PNT_00999_MEM_CNT ELSE 0 END) AS PNT_00999_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN PNT_01000_MEM_CNT ELSE 0 END) AS PNT_01000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN PNT_02000_MEM_CNT ELSE 0 END) AS PNT_02000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN PNT_03000_MEM_CNT ELSE 0 END) AS PNT_03000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN PNT_04000_MEM_CNT ELSE 0 END) AS PNT_04000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN PNT_05000_MEM_CNT ELSE 0 END) AS PNT_05000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN PNT_06000_MEM_CNT ELSE 0 END) AS PNT_06000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN PNT_07000_MEM_CNT ELSE 0 END) AS PNT_07000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN PNT_08000_MEM_CNT ELSE 0 END) AS PNT_08000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN PNT_09000_MEM_CNT ELSE 0 END) AS PNT_09000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN PNT_10000_MEM_CNT ELSE 0 END) AS PNT_10000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN PNT_11000_MEM_CNT ELSE 0 END) AS PNT_11000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN PNT_12000_MEM_CNT ELSE 0 END) AS PNT_12000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN PNT_13000_MEM_CNT ELSE 0 END) AS PNT_13000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN PNT_14000_MEM_CNT ELSE 0 END) AS PNT_14000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN PNT_15200_MEM_CNT ELSE 0 END) AS PNT_15200_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN PNT_20000_MEM_CNT ELSE 0 END) AS PNT_20000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN RDM_00000_MEM_CNT ELSE 0 END) AS RDM_00000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN RDM_00999_MEM_CNT ELSE 0 END) AS RDM_00999_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN RDM_01000_MEM_CNT ELSE 0 END) AS RDM_01000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN RDM_02000_MEM_CNT ELSE 0 END) AS RDM_02000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN RDM_03000_MEM_CNT ELSE 0 END) AS RDM_03000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN RDM_04000_MEM_CNT ELSE 0 END) AS RDM_04000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN RDM_05000_MEM_CNT ELSE 0 END) AS RDM_05000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN RDM_06000_MEM_CNT ELSE 0 END) AS RDM_06000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN RDM_07000_MEM_CNT ELSE 0 END) AS RDM_07000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN RDM_08000_MEM_CNT ELSE 0 END) AS RDM_08000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN RDM_09000_MEM_CNT ELSE 0 END) AS RDM_09000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN RDM_10000_MEM_CNT ELSE 0 END) AS RDM_10000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN RDM_11000_MEM_CNT ELSE 0 END) AS RDM_11000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN RDM_12000_MEM_CNT ELSE 0 END) AS RDM_12000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN RDM_13000_MEM_CNT ELSE 0 END) AS RDM_13000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN RDM_14000_MEM_CNT ELSE 0 END) AS RDM_14000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN RDM_15200_MEM_CNT ELSE 0 END) AS RDM_15200_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN RDM_20000_MEM_CNT ELSE 0 END) AS RDM_20000_12M
		        FROM MRT.FT_PNT_BAND_D_ACL
		        WHERE YYYYMMDD IN (#{toMonth},com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD'),
		                    com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') ) ]]>
		        AND QRY_TYPE = #{qryType}
				<if test="@infavor.icncommon.util.ICNStringUtility@isNotEmpty(storeCd)">
				 	AND STORE_CD =#{storeCd}
				</if>
				<if test="@infavor.icncommon.util.ICNStringUtility@isNotEmpty(genCd)">
				 	AND GEND_CD =#{genCd}
				</if>
				<if test="@infavor.icncommon.util.ICNStringUtility@isNotEmpty(ageCd)">
				 	AND AGE_CD =#{ageCd}
				</if>
		        )
		    ) A
		    ,(
		        SELECT LEVEL LV
		        FROM DUAL
		       <![CDATA[ CONNECT BY LEVEL <= 36]]>
		    ) B
		    <![CDATA[
		UNION ALL
		SELECT
		        LV AS seq
		      ,CASE WHEN LV BETWEEN 1 AND 18 THEN '포인트 보유 금액별' WHEN LV BETWEEN 19 AND 36 THEN '포인트 사용 금액별' WHEN LV BETWEEN 37 AND 68 THEN '구매금액 기준 회원수' END AS typea
		      ,CASE WHEN LV = 37 THEN '0'     WHEN LV = 38 THEN '~ 1000' WHEN LV = 39 THEN '~ 2000' WHEN LV = 40 THEN '~ 3000' WHEN LV = 41  THEN '~ 4000'  WHEN LV = 42 THEN '~ 5000'
		            WHEN LV = 43 THEN '~ 6000' WHEN LV = 44 THEN '~ 7000' WHEN LV = 45 THEN '~ 8000' WHEN LV = 46 THEN '~ 9000' WHEN LV = 47 THEN '~ 10000' WHEN LV = 48 THEN '~ 11000'
		            WHEN LV = 49 THEN '~ 12000' WHEN LV = 50 THEN '~ 13000' WHEN LV = 51 THEN '~ 14000' WHEN LV = 52 THEN '~ 15000' WHEN LV = 53 THEN '~ 16000'  WHEN LV = 54 THEN '~ 17000'
		            WHEN LV = 55 THEN '~ 18000' WHEN LV = 56 THEN '~ 19000' WHEN LV = 57 THEN '~ 20000' WHEN LV = 58 THEN '~ 21000' WHEN LV = 59  THEN '~ 22000'  WHEN LV = 60 THEN '~ 23000'
		            WHEN LV = 61 THEN '~ 24000' WHEN LV = 62 THEN '~ 25000' WHEN LV = 63 THEN '~ 26000' WHEN LV = 64 THEN '~ 27000' WHEN LV = 65 THEN '~ 28000' WHEN LV = 66 THEN '~ 29000'
		            WHEN LV = 67 THEN '~ 30000' WHEN LV = 68 THEN '30000 이상' END typeb
		      ,DECODE(LV,37,AMT_00000_0M ,38,AMT_00999_0M ,39,AMT_01000_0M ,40,AMT_02000_0M ,41,AMT_03000_0M ,42,AMT_04000_0M ,43,AMT_05000_0M ,44,AMT_06000_0M ,45,AMT_07000_0M ,46,AMT_08000_0M ,47,AMT_09000_0M ,48,AMT_10000_0M ,49,AMT_11000_0M ,50,AMT_12000_0M ,51,AMT_13000_0M ,52,AMT_14000_0M
		                ,53,AMT_15000_0M ,54,AMT_16000_0M ,55,AMT_17000_0M ,56,AMT_18000_0M ,57,AMT_19000_0M ,58,AMT_20000_0M ,59,AMT_21000_0M ,60,AMT_22000_0M ,61,AMT_23000_0M ,62,AMT_24000_0M ,63,AMT_25000_0M ,64,AMT_26000_0M ,65,AMT_27000_0M ,66,AMT_28000_0M ,67,AMT_29000_0M ,68,AMT_30000_0M) AS month0m
		      ,DECODE(LV,37,AMT_00000_1M ,38,AMT_00999_1M ,39,AMT_01000_1M ,40,AMT_02000_1M ,41,AMT_03000_1M ,42,AMT_04000_1M ,43,AMT_05000_1M ,44,AMT_06000_1M ,45,AMT_07000_1M ,46,AMT_08000_1M ,47,AMT_09000_1M ,48,AMT_10000_1M ,49,AMT_11000_1M ,50,AMT_12000_1M ,51,AMT_13000_1M ,52,AMT_14000_1M
		                ,53,AMT_15000_1M ,54,AMT_16000_1M ,55,AMT_17000_1M ,56,AMT_18000_1M ,57,AMT_19000_1M ,58,AMT_20000_1M ,59,AMT_21000_1M ,60,AMT_22000_1M ,61,AMT_23000_1M ,62,AMT_24000_1M ,63,AMT_25000_1M ,64,AMT_26000_1M ,65,AMT_27000_1M ,66,AMT_28000_1M ,67,AMT_29000_1M ,68,AMT_30000_1M) AS month1m
		      ,DECODE(LV,37,AMT_00000_12M,38,AMT_00999_12M,39,AMT_01000_12M,40,AMT_02000_12M,41,AMT_03000_12M,42,AMT_04000_12M,43,AMT_05000_12M,44,AMT_06000_12M,45,AMT_07000_12M,46,AMT_08000_12M,47,AMT_09000_12M,48,AMT_10000_12M,49,AMT_11000_12M,50,AMT_12000_12M,51,AMT_13000_12M,52,AMT_14000_12M
		                ,53,AMT_15000_12M,54,AMT_16000_12M,55,AMT_17000_12M,56,AMT_18000_12M,57,AMT_19000_12M,58,AMT_20000_12M,59,AMT_21000_12M,60,AMT_22000_12M,61,AMT_23000_12M,62,AMT_24000_12M,63,AMT_25000_12M,64,AMT_26000_12M,65,AMT_27000_12M,66,AMT_28000_12M,67,AMT_29000_12M,68,AMT_30000_12M) AS month12m
		      ,DECODE(LV,37,AMT_00000_1M_RATE,38,AMT_00999_1M_RATE,39,AMT_01000_1M_RATE,40,AMT_02000_1M_RATE,41,AMT_03000_1M_RATE,42,AMT_04000_1M_RATE,43,AMT_05000_1M_RATE,44,AMT_06000_1M_RATE,45,AMT_07000_1M_RATE,46,AMT_08000_1M_RATE,47,AMT_09000_1M_RATE,48,AMT_10000_1M_RATE,49,AMT_11000_1M_RATE,50,AMT_12000_1M_RATE,51,AMT_13000_1M_RATE,52,AMT_14000_1M_RATE
		                ,53,AMT_15000_1M_RATE,54,AMT_16000_1M_RATE,55,AMT_17000_1M_RATE,56,AMT_18000_1M_RATE,57,AMT_19000_1M_RATE,58,AMT_20000_1M_RATE,59,AMT_21000_1M_RATE,60,AMT_22000_1M_RATE,61,AMT_23000_1M_RATE,62,AMT_24000_1M_RATE,63,AMT_25000_1M_RATE,64,AMT_26000_1M_RATE,65,AMT_27000_1M_RATE,66,AMT_28000_1M_RATE,67,AMT_29000_1M_RATE,68,AMT_30000_1M_RATE) AS month1mRate
		      ,DECODE(LV,37,AMT_00000_12M_RATE,38,AMT_00999_12M_RATE,39,AMT_01000_12M_RATE,40,AMT_02000_12M_RATE,41,AMT_03000_12M_RATE,42,AMT_04000_12M_RATE,43,AMT_05000_12M_RATE,44,AMT_06000_12M_RATE,45,AMT_07000_12M_RATE,46,AMT_08000_12M_RATE,47,AMT_09000_12M_RATE,48,AMT_10000_12M_RATE,49,AMT_11000_12M_RATE,50,AMT_12000_12M_RATE,51,AMT_13000_12M_RATE,52,AMT_14000_12M_RATE
		                ,53,AMT_15000_12M_RATE,54,AMT_16000_12M_RATE,55,AMT_17000_12M_RATE,56,AMT_18000_12M_RATE,57,AMT_19000_12M_RATE,58,AMT_20000_12M_RATE,59,AMT_21000_12M_RATE,60,AMT_22000_12M_RATE,61,AMT_23000_12M_RATE,62,AMT_24000_12M_RATE,63,AMT_25000_12M_RATE,64,AMT_26000_12M_RATE,65,AMT_27000_12M_RATE,66,AMT_28000_12M_RATE,67,AMT_29000_12M_RATE,68,AMT_30000_12M_RATE) AS month12mRate
		FROM
		    (
		    SELECT   AMT_00000_0M,AMT_00999_0M,AMT_01000_0M,AMT_02000_0M,AMT_03000_0M,AMT_04000_0M,AMT_05000_0M,AMT_06000_0M,AMT_07000_0M,AMT_08000_0M,AMT_09000_0M
		            ,AMT_10000_0M,AMT_11000_0M,AMT_12000_0M,AMT_13000_0M,AMT_14000_0M,AMT_15000_0M,AMT_16000_0M,AMT_17000_0M,AMT_18000_0M,AMT_19000_0M,AMT_20000_0M
		            ,AMT_21000_0M,AMT_22000_0M,AMT_23000_0M,AMT_24000_0M,AMT_25000_0M,AMT_26000_0M,AMT_27000_0M,AMT_28000_0M,AMT_29000_0M,AMT_30000_0M
		            ,AMT_00000_1M,AMT_00999_1M,AMT_01000_1M,AMT_02000_1M,AMT_03000_1M,AMT_04000_1M,AMT_05000_1M,AMT_06000_1M,AMT_07000_1M,AMT_08000_1M,AMT_09000_1M
		            ,AMT_10000_1M,AMT_11000_1M,AMT_12000_1M,AMT_13000_1M,AMT_14000_1M,AMT_15000_1M,AMT_16000_1M,AMT_17000_1M,AMT_18000_1M,AMT_19000_1M,AMT_20000_1M
		            ,AMT_21000_1M,AMT_22000_1M,AMT_23000_1M,AMT_24000_1M,AMT_25000_1M,AMT_26000_1M,AMT_27000_1M,AMT_28000_1M,AMT_29000_1M,AMT_30000_1M
		            ,AMT_00000_12M,AMT_00999_12M,AMT_01000_12M,AMT_02000_12M,AMT_03000_12M,AMT_04000_12M,AMT_05000_12M,AMT_06000_12M,AMT_07000_12M,AMT_08000_12M,AMT_09000_12M
		            ,AMT_10000_12M,AMT_11000_12M,AMT_12000_12M,AMT_13000_12M,AMT_14000_12M,AMT_15000_12M,AMT_16000_12M,AMT_17000_12M,AMT_18000_12M,AMT_19000_12M,AMT_20000_12M
		            ,AMT_21000_12M,AMT_22000_12M,AMT_23000_12M,AMT_24000_12M,AMT_25000_12M,AMT_26000_12M,AMT_27000_12M,AMT_28000_12M,AMT_29000_12M,AMT_30000_12M
		            ,CASE WHEN AMT_00000_1M  = 0 THEN 0 ELSE ROUND((AMT_00000_0M - AMT_00000_1M )/AMT_00000_1M*100,1 ) END AS AMT_00000_1M_RATE
		            ,CASE WHEN AMT_00999_1M  = 0 THEN 0 ELSE ROUND((AMT_00999_0M - AMT_00999_1M )/AMT_00999_1M*100,1 ) END AS AMT_00999_1M_RATE
		            ,CASE WHEN AMT_01000_1M  = 0 THEN 0 ELSE ROUND((AMT_01000_0M - AMT_01000_1M )/AMT_01000_1M*100,1 ) END AS AMT_01000_1M_RATE
		            ,CASE WHEN AMT_02000_1M  = 0 THEN 0 ELSE ROUND((AMT_02000_0M - AMT_02000_1M )/AMT_02000_1M*100,1 ) END AS AMT_02000_1M_RATE
		            ,CASE WHEN AMT_03000_1M  = 0 THEN 0 ELSE ROUND((AMT_03000_0M - AMT_03000_1M )/AMT_03000_1M*100,1 ) END AS AMT_03000_1M_RATE
		            ,CASE WHEN AMT_04000_1M  = 0 THEN 0 ELSE ROUND((AMT_04000_0M - AMT_04000_1M )/AMT_04000_1M*100,1 ) END AS AMT_04000_1M_RATE
		            ,CASE WHEN AMT_05000_1M  = 0 THEN 0 ELSE ROUND((AMT_05000_0M - AMT_05000_1M )/AMT_05000_1M*100,1 ) END AS AMT_05000_1M_RATE
		            ,CASE WHEN AMT_06000_1M  = 0 THEN 0 ELSE ROUND((AMT_06000_0M - AMT_06000_1M )/AMT_06000_1M*100,1 ) END AS AMT_06000_1M_RATE
		            ,CASE WHEN AMT_07000_1M  = 0 THEN 0 ELSE ROUND((AMT_07000_0M - AMT_07000_1M )/AMT_07000_1M*100,1 ) END AS AMT_07000_1M_RATE
		            ,CASE WHEN AMT_08000_1M  = 0 THEN 0 ELSE ROUND((AMT_08000_0M - AMT_08000_1M )/AMT_08000_1M*100,1 ) END AS AMT_08000_1M_RATE
		            ,CASE WHEN AMT_09000_1M  = 0 THEN 0 ELSE ROUND((AMT_09000_0M - AMT_09000_1M )/AMT_09000_1M*100,1 ) END AS AMT_09000_1M_RATE
		            ,CASE WHEN AMT_10000_1M  = 0 THEN 0 ELSE ROUND((AMT_10000_0M - AMT_10000_1M )/AMT_10000_1M*100,1 ) END AS AMT_10000_1M_RATE
		            ,CASE WHEN AMT_11000_1M  = 0 THEN 0 ELSE ROUND((AMT_11000_0M - AMT_11000_1M )/AMT_11000_1M*100,1 ) END AS AMT_11000_1M_RATE
		            ,CASE WHEN AMT_12000_1M  = 0 THEN 0 ELSE ROUND((AMT_12000_0M - AMT_12000_1M )/AMT_12000_1M*100,1 ) END AS AMT_12000_1M_RATE
		            ,CASE WHEN AMT_13000_1M  = 0 THEN 0 ELSE ROUND((AMT_13000_0M - AMT_13000_1M )/AMT_13000_1M*100,1 ) END AS AMT_13000_1M_RATE
		            ,CASE WHEN AMT_14000_1M  = 0 THEN 0 ELSE ROUND((AMT_14000_0M - AMT_14000_1M )/AMT_14000_1M*100,1 ) END AS AMT_14000_1M_RATE
		            ,CASE WHEN AMT_15000_1M  = 0 THEN 0 ELSE ROUND((AMT_15000_0M - AMT_15000_1M )/AMT_15000_1M*100,1 ) END AS AMT_15000_1M_RATE
		            ,CASE WHEN AMT_16000_1M  = 0 THEN 0 ELSE ROUND((AMT_16000_0M - AMT_16000_1M )/AMT_16000_1M*100,1 ) END AS AMT_16000_1M_RATE
		            ,CASE WHEN AMT_17000_1M  = 0 THEN 0 ELSE ROUND((AMT_17000_0M - AMT_17000_1M )/AMT_17000_1M*100,1 ) END AS AMT_17000_1M_RATE
		            ,CASE WHEN AMT_18000_1M  = 0 THEN 0 ELSE ROUND((AMT_18000_0M - AMT_18000_1M )/AMT_18000_1M*100,1 ) END AS AMT_18000_1M_RATE
		            ,CASE WHEN AMT_19000_1M  = 0 THEN 0 ELSE ROUND((AMT_19000_0M - AMT_19000_1M )/AMT_19000_1M*100,1 ) END AS AMT_19000_1M_RATE
		            ,CASE WHEN AMT_20000_1M  = 0 THEN 0 ELSE ROUND((AMT_20000_0M - AMT_20000_1M )/AMT_20000_1M*100,1 ) END AS AMT_20000_1M_RATE
		            ,CASE WHEN AMT_21000_1M  = 0 THEN 0 ELSE ROUND((AMT_21000_0M - AMT_21000_1M )/AMT_21000_1M*100,1 ) END AS AMT_21000_1M_RATE
		            ,CASE WHEN AMT_22000_1M  = 0 THEN 0 ELSE ROUND((AMT_22000_0M - AMT_22000_1M )/AMT_22000_1M*100,1 ) END AS AMT_22000_1M_RATE
		            ,CASE WHEN AMT_23000_1M  = 0 THEN 0 ELSE ROUND((AMT_23000_0M - AMT_23000_1M )/AMT_23000_1M*100,1 ) END AS AMT_23000_1M_RATE
		            ,CASE WHEN AMT_24000_1M  = 0 THEN 0 ELSE ROUND((AMT_24000_0M - AMT_24000_1M )/AMT_24000_1M*100,1 ) END AS AMT_24000_1M_RATE
		            ,CASE WHEN AMT_25000_1M  = 0 THEN 0 ELSE ROUND((AMT_25000_0M - AMT_25000_1M )/AMT_25000_1M*100,1 ) END AS AMT_25000_1M_RATE
		            ,CASE WHEN AMT_26000_1M  = 0 THEN 0 ELSE ROUND((AMT_26000_0M - AMT_26000_1M )/AMT_26000_1M*100,1 ) END AS AMT_26000_1M_RATE
		            ,CASE WHEN AMT_27000_1M  = 0 THEN 0 ELSE ROUND((AMT_27000_0M - AMT_27000_1M )/AMT_27000_1M*100,1 ) END AS AMT_27000_1M_RATE
		            ,CASE WHEN AMT_28000_1M  = 0 THEN 0 ELSE ROUND((AMT_28000_0M - AMT_28000_1M )/AMT_28000_1M*100,1 ) END AS AMT_28000_1M_RATE
		            ,CASE WHEN AMT_29000_1M  = 0 THEN 0 ELSE ROUND((AMT_29000_0M - AMT_29000_1M )/AMT_29000_1M*100,1 ) END AS AMT_29000_1M_RATE
		            ,CASE WHEN AMT_30000_1M  = 0 THEN 0 ELSE ROUND((AMT_30000_0M - AMT_30000_1M )/AMT_30000_1M*100,1 ) END AS AMT_30000_1M_RATE
		            ,CASE WHEN AMT_00000_12M = 0 THEN 0 ELSE ROUND((AMT_00000_0M - AMT_00000_12M)/AMT_00000_12M*100,1) END AS AMT_00000_12M_RATE
		            ,CASE WHEN AMT_00999_12M = 0 THEN 0 ELSE ROUND((AMT_00999_0M - AMT_00999_12M)/AMT_00999_12M*100,1) END AS AMT_00999_12M_RATE
		            ,CASE WHEN AMT_01000_12M = 0 THEN 0 ELSE ROUND((AMT_01000_0M - AMT_01000_12M)/AMT_01000_12M*100,1) END AS AMT_01000_12M_RATE
		            ,CASE WHEN AMT_02000_12M = 0 THEN 0 ELSE ROUND((AMT_02000_0M - AMT_02000_12M)/AMT_02000_12M*100,1) END AS AMT_02000_12M_RATE
		            ,CASE WHEN AMT_03000_12M = 0 THEN 0 ELSE ROUND((AMT_03000_0M - AMT_03000_12M)/AMT_03000_12M*100,1) END AS AMT_03000_12M_RATE
		            ,CASE WHEN AMT_04000_12M = 0 THEN 0 ELSE ROUND((AMT_04000_0M - AMT_04000_12M)/AMT_04000_12M*100,1) END AS AMT_04000_12M_RATE
		            ,CASE WHEN AMT_05000_12M = 0 THEN 0 ELSE ROUND((AMT_05000_0M - AMT_05000_12M)/AMT_05000_12M*100,1) END AS AMT_05000_12M_RATE
		            ,CASE WHEN AMT_06000_12M = 0 THEN 0 ELSE ROUND((AMT_06000_0M - AMT_06000_12M)/AMT_06000_12M*100,1) END AS AMT_06000_12M_RATE
		            ,CASE WHEN AMT_07000_12M = 0 THEN 0 ELSE ROUND((AMT_07000_0M - AMT_07000_12M)/AMT_07000_12M*100,1) END AS AMT_07000_12M_RATE
		            ,CASE WHEN AMT_08000_12M = 0 THEN 0 ELSE ROUND((AMT_08000_0M - AMT_08000_12M)/AMT_08000_12M*100,1) END AS AMT_08000_12M_RATE
		            ,CASE WHEN AMT_09000_12M = 0 THEN 0 ELSE ROUND((AMT_09000_0M - AMT_09000_12M)/AMT_09000_12M*100,1) END AS AMT_09000_12M_RATE
		            ,CASE WHEN AMT_10000_12M = 0 THEN 0 ELSE ROUND((AMT_10000_0M - AMT_10000_12M)/AMT_10000_12M*100,1) END AS AMT_10000_12M_RATE
		            ,CASE WHEN AMT_11000_12M = 0 THEN 0 ELSE ROUND((AMT_11000_0M - AMT_11000_12M)/AMT_11000_12M*100,1) END AS AMT_11000_12M_RATE
		            ,CASE WHEN AMT_12000_12M = 0 THEN 0 ELSE ROUND((AMT_12000_0M - AMT_12000_12M)/AMT_12000_12M*100,1) END AS AMT_12000_12M_RATE
		            ,CASE WHEN AMT_13000_12M = 0 THEN 0 ELSE ROUND((AMT_13000_0M - AMT_13000_12M)/AMT_13000_12M*100,1) END AS AMT_13000_12M_RATE
		            ,CASE WHEN AMT_14000_12M = 0 THEN 0 ELSE ROUND((AMT_14000_0M - AMT_14000_12M)/AMT_14000_12M*100,1) END AS AMT_14000_12M_RATE
		            ,CASE WHEN AMT_15000_12M = 0 THEN 0 ELSE ROUND((AMT_15000_0M - AMT_15000_12M)/AMT_15000_12M*100,1) END AS AMT_15000_12M_RATE
		            ,CASE WHEN AMT_16000_12M = 0 THEN 0 ELSE ROUND((AMT_16000_0M - AMT_16000_12M)/AMT_16000_12M*100,1) END AS AMT_16000_12M_RATE
		            ,CASE WHEN AMT_17000_12M = 0 THEN 0 ELSE ROUND((AMT_17000_0M - AMT_17000_12M)/AMT_17000_12M*100,1) END AS AMT_17000_12M_RATE
		            ,CASE WHEN AMT_18000_12M = 0 THEN 0 ELSE ROUND((AMT_18000_0M - AMT_18000_12M)/AMT_18000_12M*100,1) END AS AMT_18000_12M_RATE
		            ,CASE WHEN AMT_19000_12M = 0 THEN 0 ELSE ROUND((AMT_19000_0M - AMT_19000_12M)/AMT_19000_12M*100,1) END AS AMT_19000_12M_RATE
		            ,CASE WHEN AMT_20000_12M = 0 THEN 0 ELSE ROUND((AMT_20000_0M - AMT_20000_12M)/AMT_20000_12M*100,1) END AS AMT_20000_12M_RATE
		            ,CASE WHEN AMT_21000_12M = 0 THEN 0 ELSE ROUND((AMT_21000_0M - AMT_21000_12M)/AMT_21000_12M*100,1) END AS AMT_21000_12M_RATE
		            ,CASE WHEN AMT_22000_12M = 0 THEN 0 ELSE ROUND((AMT_22000_0M - AMT_22000_12M)/AMT_22000_12M*100,1) END AS AMT_22000_12M_RATE
		            ,CASE WHEN AMT_23000_12M = 0 THEN 0 ELSE ROUND((AMT_23000_0M - AMT_23000_12M)/AMT_23000_12M*100,1) END AS AMT_23000_12M_RATE
		            ,CASE WHEN AMT_24000_12M = 0 THEN 0 ELSE ROUND((AMT_24000_0M - AMT_24000_12M)/AMT_24000_12M*100,1) END AS AMT_24000_12M_RATE
		            ,CASE WHEN AMT_25000_12M = 0 THEN 0 ELSE ROUND((AMT_25000_0M - AMT_25000_12M)/AMT_25000_12M*100,1) END AS AMT_25000_12M_RATE
		            ,CASE WHEN AMT_26000_12M = 0 THEN 0 ELSE ROUND((AMT_26000_0M - AMT_26000_12M)/AMT_26000_12M*100,1) END AS AMT_26000_12M_RATE
		            ,CASE WHEN AMT_27000_12M = 0 THEN 0 ELSE ROUND((AMT_27000_0M - AMT_27000_12M)/AMT_27000_12M*100,1) END AS AMT_27000_12M_RATE
		            ,CASE WHEN AMT_28000_12M = 0 THEN 0 ELSE ROUND((AMT_28000_0M - AMT_28000_12M)/AMT_28000_12M*100,1) END AS AMT_28000_12M_RATE
		            ,CASE WHEN AMT_29000_12M = 0 THEN 0 ELSE ROUND((AMT_29000_0M - AMT_29000_12M)/AMT_29000_12M*100,1) END AS AMT_29000_12M_RATE
		            ,CASE WHEN AMT_30000_12M = 0 THEN 0 ELSE ROUND((AMT_30000_0M - AMT_30000_12M)/AMT_30000_12M*100,1) END AS AMT_30000_12M_RATE
		    FROM
		        (
		        SELECT
		             SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                     THEN AMT_00000_MEM_CNT ELSE 0 END) AS AMT_00000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                     THEN AMT_00999_MEM_CNT ELSE 0 END) AS AMT_00999_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                     THEN AMT_01000_MEM_CNT ELSE 0 END) AS AMT_01000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                     THEN AMT_02000_MEM_CNT ELSE 0 END) AS AMT_02000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                     THEN AMT_03000_MEM_CNT ELSE 0 END) AS AMT_03000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                     THEN AMT_04000_MEM_CNT ELSE 0 END) AS AMT_04000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                     THEN AMT_05000_MEM_CNT ELSE 0 END) AS AMT_05000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                     THEN AMT_06000_MEM_CNT ELSE 0 END) AS AMT_06000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                     THEN AMT_07000_MEM_CNT ELSE 0 END) AS AMT_07000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                     THEN AMT_08000_MEM_CNT ELSE 0 END) AS AMT_08000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                     THEN AMT_09000_MEM_CNT ELSE 0 END) AS AMT_09000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                     THEN AMT_10000_MEM_CNT ELSE 0 END) AS AMT_10000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                     THEN AMT_11000_MEM_CNT ELSE 0 END) AS AMT_11000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                     THEN AMT_12000_MEM_CNT ELSE 0 END) AS AMT_12000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                     THEN AMT_13000_MEM_CNT ELSE 0 END) AS AMT_13000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                     THEN AMT_14000_MEM_CNT ELSE 0 END) AS AMT_14000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                     THEN AMT_15000_MEM_CNT ELSE 0 END) AS AMT_15000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                     THEN AMT_16000_MEM_CNT ELSE 0 END) AS AMT_16000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                     THEN AMT_17000_MEM_CNT ELSE 0 END) AS AMT_17000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                     THEN AMT_18000_MEM_CNT ELSE 0 END) AS AMT_18000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                     THEN AMT_19000_MEM_CNT ELSE 0 END) AS AMT_19000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                     THEN AMT_20000_MEM_CNT ELSE 0 END) AS AMT_20000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                     THEN AMT_21000_MEM_CNT ELSE 0 END) AS AMT_21000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                     THEN AMT_22000_MEM_CNT ELSE 0 END) AS AMT_22000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                     THEN AMT_23000_MEM_CNT ELSE 0 END) AS AMT_23000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                     THEN AMT_24000_MEM_CNT ELSE 0 END) AS AMT_24000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                     THEN AMT_25000_MEM_CNT ELSE 0 END) AS AMT_25000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                     THEN AMT_26000_MEM_CNT ELSE 0 END) AS AMT_26000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                     THEN AMT_27000_MEM_CNT ELSE 0 END) AS AMT_27000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                     THEN AMT_28000_MEM_CNT ELSE 0 END) AS AMT_28000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                     THEN AMT_29000_MEM_CNT ELSE 0 END) AS AMT_29000_0M
		            ,SUM(CASE WHEN YYYYMMDD = #{toMonth}                                                     THEN AMT_30000_MEM_CNT ELSE 0 END) AS AMT_30000_0M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN AMT_00000_MEM_CNT ELSE 0 END) AS AMT_00000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN AMT_00999_MEM_CNT ELSE 0 END) AS AMT_00999_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN AMT_01000_MEM_CNT ELSE 0 END) AS AMT_01000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN AMT_02000_MEM_CNT ELSE 0 END) AS AMT_02000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN AMT_03000_MEM_CNT ELSE 0 END) AS AMT_03000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN AMT_04000_MEM_CNT ELSE 0 END) AS AMT_04000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN AMT_05000_MEM_CNT ELSE 0 END) AS AMT_05000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN AMT_06000_MEM_CNT ELSE 0 END) AS AMT_06000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN AMT_07000_MEM_CNT ELSE 0 END) AS AMT_07000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN AMT_08000_MEM_CNT ELSE 0 END) AS AMT_08000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN AMT_09000_MEM_CNT ELSE 0 END) AS AMT_09000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN AMT_10000_MEM_CNT ELSE 0 END) AS AMT_10000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN AMT_11000_MEM_CNT ELSE 0 END) AS AMT_11000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN AMT_12000_MEM_CNT ELSE 0 END) AS AMT_12000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN AMT_13000_MEM_CNT ELSE 0 END) AS AMT_13000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN AMT_14000_MEM_CNT ELSE 0 END) AS AMT_14000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN AMT_15000_MEM_CNT ELSE 0 END) AS AMT_15000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN AMT_16000_MEM_CNT ELSE 0 END) AS AMT_16000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN AMT_17000_MEM_CNT ELSE 0 END) AS AMT_17000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN AMT_18000_MEM_CNT ELSE 0 END) AS AMT_18000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN AMT_19000_MEM_CNT ELSE 0 END) AS AMT_19000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN AMT_20000_MEM_CNT ELSE 0 END) AS AMT_20000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN AMT_21000_MEM_CNT ELSE 0 END) AS AMT_21000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN AMT_22000_MEM_CNT ELSE 0 END) AS AMT_22000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN AMT_23000_MEM_CNT ELSE 0 END) AS AMT_23000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN AMT_24000_MEM_CNT ELSE 0 END) AS AMT_24000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN AMT_25000_MEM_CNT ELSE 0 END) AS AMT_25000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN AMT_26000_MEM_CNT ELSE 0 END) AS AMT_26000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN AMT_27000_MEM_CNT ELSE 0 END) AS AMT_27000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN AMT_28000_MEM_CNT ELSE 0 END) AS AMT_28000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN AMT_29000_MEM_CNT ELSE 0 END) AS AMT_29000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD') THEN AMT_30000_MEM_CNT ELSE 0 END) AS AMT_30000_1M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN AMT_00000_MEM_CNT ELSE 0 END) AS AMT_00000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN AMT_00000_MEM_CNT ELSE 0 END) AS AMT_00999_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN AMT_01000_MEM_CNT ELSE 0 END) AS AMT_01000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN AMT_02000_MEM_CNT ELSE 0 END) AS AMT_02000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN AMT_03000_MEM_CNT ELSE 0 END) AS AMT_03000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN AMT_04000_MEM_CNT ELSE 0 END) AS AMT_04000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN AMT_05000_MEM_CNT ELSE 0 END) AS AMT_05000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN AMT_06000_MEM_CNT ELSE 0 END) AS AMT_06000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN AMT_07000_MEM_CNT ELSE 0 END) AS AMT_07000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN AMT_08000_MEM_CNT ELSE 0 END) AS AMT_08000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN AMT_09000_MEM_CNT ELSE 0 END) AS AMT_09000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN AMT_10000_MEM_CNT ELSE 0 END) AS AMT_10000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN AMT_11000_MEM_CNT ELSE 0 END) AS AMT_11000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN AMT_12000_MEM_CNT ELSE 0 END) AS AMT_12000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN AMT_13000_MEM_CNT ELSE 0 END) AS AMT_13000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN AMT_14000_MEM_CNT ELSE 0 END) AS AMT_14000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN AMT_15000_MEM_CNT ELSE 0 END) AS AMT_15000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN AMT_16000_MEM_CNT ELSE 0 END) AS AMT_16000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN AMT_17000_MEM_CNT ELSE 0 END) AS AMT_17000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN AMT_18000_MEM_CNT ELSE 0 END) AS AMT_18000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN AMT_19000_MEM_CNT ELSE 0 END) AS AMT_19000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN AMT_20000_MEM_CNT ELSE 0 END) AS AMT_20000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN AMT_21000_MEM_CNT ELSE 0 END) AS AMT_21000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN AMT_22000_MEM_CNT ELSE 0 END) AS AMT_22000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN AMT_23000_MEM_CNT ELSE 0 END) AS AMT_23000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN AMT_24000_MEM_CNT ELSE 0 END) AS AMT_24000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN AMT_25000_MEM_CNT ELSE 0 END) AS AMT_25000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN AMT_26000_MEM_CNT ELSE 0 END) AS AMT_26000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN AMT_27000_MEM_CNT ELSE 0 END) AS AMT_27000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN AMT_28000_MEM_CNT ELSE 0 END) AS AMT_28000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN AMT_29000_MEM_CNT ELSE 0 END) AS AMT_29000_12M
		            ,SUM(CASE WHEN YYYYMMDD = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') THEN AMT_30000_MEM_CNT ELSE 0 END) AS AMT_30000_12M
		        FROM MRT.FT_PNT_BAND_D_ACL
		        WHERE YYYYMMDD IN (#{toMonth},com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-1 ),'YYYYMMDD'),
		                    com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{toMonth},'YYYYMMDD'),-12),'YYYYMMDD') )]]>
		        AND QRY_TYPE = #{qryType}
				<if test="@infavor.icncommon.util.ICNStringUtility@isNotEmpty(storeCd)">
				 	AND STORE_CD =#{storeCd}
				</if>
				<if test="@infavor.icncommon.util.ICNStringUtility@isNotEmpty(genCd)">
				 	AND GEND_CD =#{genCd}
				</if>
				<if test="@infavor.icncommon.util.ICNStringUtility@isNotEmpty(ageCd)">
				 	AND AGE_CD =#{ageCd}
				</if>
		        )
		    ) A
		    ,(

		      <![CDATA[
		      SELECT LV
		        FROM (
		        SELECT LEVEL LV
		        FROM DUAL
		        CONNECT BY LEVEL <= 68
		        )
		        WHERE LV >= 37 AND LV <= 68
        	]]>
		    ) B
		</if>
		--4-2 현재와 다른 월 조회 시
		<if test="@infavor.icncommon.util.ICNStringUtility@isNotEmpty(agoMonth)">
		<![CDATA[
		SELECT
			 LV AS seq
			      ,CASE WHEN LV BETWEEN 1 AND 18 THEN '포인트 보유 금액별' WHEN LV BETWEEN 19 AND 36 THEN '포인트 사용 금액별' WHEN LV BETWEEN 37 AND 66 THEN '구매금액 기준 회원수' END AS typea
			      ,CASE WHEN LV = 1 THEN '0'      WHEN LV = 2 THEN '~ 1000' WHEN LV = 3 THEN '~ 2000' WHEN LV = 4 THEN '~ 3000' WHEN LV = 5  THEN '~ 4000'  WHEN LV = 6 THEN '~ 5000'
			            WHEN LV = 7 THEN '~ 6000' WHEN LV = 8 THEN '~ 7000' WHEN LV = 9 THEN '~ 8000' WHEN LV =10 THEN '~ 9000' WHEN LV = 11 THEN '~ 10000' WHEN LV = 12 THEN '~ 11000'
			            WHEN LV = 13 THEN '~ 12000' WHEN LV = 14 THEN '~ 13000' WHEN LV = 15 THEN '~ 14000' WHEN LV = 16 THEN '~ 15000' WHEN LV = 17 THEN '15000 ~ 20000'  WHEN LV = 18 THEN ' 20000 이상'
			            WHEN LV = 19 THEN '0'      WHEN LV = 20 THEN '~ 1000' WHEN LV = 21 THEN '~ 2000' WHEN LV = 22 THEN '~ 3000' WHEN LV = 23  THEN '~ 4000'  WHEN LV = 24 THEN '~ 5000'
			            WHEN LV = 25 THEN '~ 6000' WHEN LV = 26 THEN '~ 7000' WHEN LV = 27 THEN '~ 8000' WHEN LV = 28 THEN '~ 9000' WHEN LV = 29 THEN '~ 10000' WHEN LV = 30 THEN '~ 11000'
			            WHEN LV = 31 THEN '~ 12000' WHEN LV = 32 THEN '~ 13000' WHEN LV = 33 THEN '~ 14000' WHEN LV = 34 THEN '~ 15000' WHEN LV = 35 THEN '15000 ~ 20000'  WHEN LV = 36 THEN ' 20000 이상' END typeb
			      ,DECODE(LV,1 ,PNT_00000_0M ,2 ,PNT_00999_0M ,3 ,PNT_01000_0M ,4 ,PNT_02000_0M ,5 ,PNT_03000_0M ,6 ,PNT_04000_0M ,7 ,PNT_05000_0M ,8 ,PNT_06000_0M ,9 ,PNT_07000_0M ,10,PNT_08000_0M ,11,PNT_09000_0M ,12,PNT_10000_0M ,13,PNT_11000_0M ,14,PNT_12000_0M ,15,PNT_13000_0M ,16,PNT_14000_0M ,17,PNT_15200_0M ,18,PNT_20000_0M
			                ,19,RDM_00000_0M ,20,RDM_00999_0M ,21,RDM_01000_0M ,22,RDM_02000_0M ,23,RDM_03000_0M ,24,RDM_04000_0M ,25,RDM_05000_0M ,26,RDM_06000_0M ,27,RDM_07000_0M ,28,RDM_08000_0M ,29,RDM_09000_0M ,30,RDM_10000_0M ,31,RDM_11000_0M ,32,RDM_12000_0M ,33,RDM_13000_0M ,34,RDM_14000_0M ,35,RDM_15200_0M ,36,RDM_20000_0M ) AS month0m
			      ,DECODE(LV,1 ,PNT_00000_1M ,2 ,PNT_00999_1M ,3 ,PNT_01000_1M ,4 ,PNT_02000_1M ,5 ,PNT_03000_1M ,6 ,PNT_04000_1M ,7 ,PNT_05000_1M ,8 ,PNT_06000_1M ,9 ,PNT_07000_1M ,10,PNT_08000_1M ,11,PNT_09000_1M ,12,PNT_10000_1M ,13,PNT_11000_1M ,14,PNT_12000_1M ,15,PNT_13000_1M ,16,PNT_14000_1M ,17,PNT_15200_1M ,18,PNT_20000_1M
			                ,19,RDM_00000_1M ,20,RDM_00999_1M ,21,RDM_01000_1M ,22,RDM_02000_1M ,23,RDM_03000_1M ,24,RDM_04000_1M ,25,RDM_05000_1M ,26,RDM_06000_1M ,27,RDM_07000_1M ,28,RDM_08000_1M ,29,RDM_09000_1M ,30,RDM_10000_1M ,31,RDM_11000_1M ,32,RDM_12000_1M ,33,RDM_13000_1M ,34,RDM_14000_1M ,35,RDM_15200_1M ,36,RDM_20000_1M ) AS month1m
			      ,DECODE(LV,1 ,PNT_00000_12M,2 ,PNT_00999_12M,3 ,PNT_01000_12M,4 ,PNT_02000_12M,5 ,PNT_03000_12M,6 ,PNT_04000_12M,7 ,PNT_05000_12M,8 ,PNT_06000_12M,9 ,PNT_07000_12M,10,PNT_08000_12M,11,PNT_09000_12M,12,PNT_10000_12M,13,PNT_11000_12M,14,PNT_12000_12M,15,PNT_13000_12M,16,PNT_14000_12M,17,PNT_15200_12M,18,PNT_20000_12M
			                ,19,RDM_00000_12M,20,RDM_00999_12M,21,RDM_01000_12M,22,RDM_02000_12M,23,RDM_03000_12M,24,RDM_04000_12M,25,RDM_05000_12M,26,RDM_06000_12M,27,RDM_07000_12M,28,RDM_08000_12M,29,RDM_09000_12M,30,RDM_10000_12M,31,RDM_11000_12M,32,RDM_12000_12M,33,RDM_13000_12M,34,RDM_14000_12M,35,RDM_15200_12M,36,RDM_20000_12M ) AS month12m
			      ,DECODE(LV,1 ,PNT_00000_1M_RATE ,2 ,PNT_00999_1M_RATE ,3 ,PNT_01000_1M_RATE ,4 ,PNT_02000_1M_RATE ,5 ,PNT_03000_1M_RATE ,6 ,PNT_04000_1M_RATE ,7 ,PNT_05000_1M_RATE ,8 ,PNT_06000_1M_RATE ,9 ,PNT_07000_1M_RATE ,10,PNT_08000_1M_RATE ,11,PNT_09000_1M_RATE ,12,PNT_10000_1M_RATE ,13,PNT_11000_1M_RATE ,14,PNT_12000_1M_RATE ,15,PNT_13000_1M_RATE ,16,PNT_14000_1M_RATE ,17,PNT_15200_1M_RATE ,18,PNT_20000_1M_RATE
			                ,19,RDM_00000_1M_RATE ,20,RDM_00999_1M_RATE ,21,RDM_01000_1M_RATE ,22,RDM_02000_1M_RATE ,23,RDM_03000_1M_RATE ,24,RDM_04000_1M_RATE ,25,RDM_05000_1M_RATE ,26,RDM_06000_1M_RATE ,27,RDM_07000_1M_RATE ,28,RDM_08000_1M_RATE ,29,RDM_09000_1M_RATE ,30,RDM_10000_1M_RATE ,31,RDM_11000_1M_RATE ,32,RDM_12000_1M_RATE ,33,RDM_13000_1M_RATE ,34,RDM_14000_1M_RATE ,35,RDM_15200_1M_RATE ,36,RDM_20000_1M_RATE ) AS month1mRate
			      ,DECODE(LV,1 ,PNT_00000_12M_RATE,2 ,PNT_00999_12M_RATE,3 ,PNT_01000_12M_RATE ,4 ,PNT_02000_12M_RATE ,5 ,PNT_03000_12M_RATE ,6 ,PNT_04000_12M_RATE ,7 ,PNT_05000_12M_RATE ,8 ,PNT_06000_12M_RATE ,9 ,PNT_07000_12M_RATE ,10,PNT_08000_12M_RATE ,11,PNT_09000_12M_RATE ,12,PNT_10000_12M_RATE ,13,PNT_11000_12M_RATE ,14,PNT_12000_12M_RATE ,15,PNT_13000_12M_RATE ,16,PNT_14000_12M_RATE ,17,PNT_15200_12M_RATE ,18,PNT_20000_12M_RATE
			                ,19,RDM_00000_12M_RATE,20,RDM_00999_12M_RATE,21,RDM_01000_12M_RATE ,22,RDM_02000_12M_RATE ,23,RDM_03000_12M_RATE ,24,RDM_04000_12M_RATE ,25,RDM_05000_12M_RATE ,26,RDM_06000_12M_RATE ,27,RDM_07000_12M_RATE ,28,RDM_08000_12M_RATE ,29,RDM_09000_12M_RATE ,30,RDM_10000_12M_RATE ,31,RDM_11000_12M_RATE ,32,RDM_12000_12M_RATE ,33,RDM_13000_12M_RATE ,34,RDM_14000_12M_RATE ,35,RDM_15200_12M_RATE ,36,RDM_20000_12M_RATE ) AS month12mRate
			FROM
			    (
			    SELECT   PNT_00000_0M,PNT_00999_0M,PNT_01000_0M,PNT_02000_0M,PNT_03000_0M,PNT_04000_0M,PNT_05000_0M,PNT_06000_0M,PNT_07000_0M,PNT_08000_0M,PNT_09000_0M,PNT_10000_0M
			            ,PNT_11000_0M,PNT_12000_0M,PNT_13000_0M,PNT_14000_0M,PNT_15200_0M,PNT_20000_0M,RDM_00000_0M,RDM_00999_0M,RDM_01000_0M,RDM_02000_0M,RDM_03000_0M,RDM_04000_0M
			            ,RDM_05000_0M,RDM_06000_0M,RDM_07000_0M,RDM_08000_0M,RDM_09000_0M,RDM_10000_0M,RDM_11000_0M,RDM_12000_0M,RDM_13000_0M,RDM_14000_0M,RDM_15200_0M,RDM_20000_0M
			            ,PNT_00000_1M,PNT_00999_1M,PNT_01000_1M,PNT_02000_1M,PNT_03000_1M,PNT_04000_1M,PNT_05000_1M,PNT_06000_1M,PNT_07000_1M,PNT_08000_1M,PNT_09000_1M,PNT_10000_1M
			            ,PNT_11000_1M,PNT_12000_1M,PNT_13000_1M,PNT_14000_1M,PNT_15200_1M,PNT_20000_1M,RDM_00000_1M,RDM_00999_1M,RDM_01000_1M,RDM_02000_1M,RDM_03000_1M,RDM_04000_1M
			            ,RDM_05000_1M,RDM_06000_1M,RDM_07000_1M,RDM_08000_1M,RDM_09000_1M,RDM_10000_1M,RDM_11000_1M,RDM_12000_1M,RDM_13000_1M,RDM_14000_1M,RDM_15200_1M,RDM_20000_1M
			            ,PNT_00000_12M,PNT_00999_12M,PNT_01000_12M,PNT_02000_12M,PNT_03000_12M,PNT_04000_12M,PNT_05000_12M,PNT_06000_12M,PNT_07000_12M,PNT_08000_12M,PNT_09000_12M,PNT_10000_12M
			            ,PNT_11000_12M,PNT_12000_12M,PNT_13000_12M,PNT_14000_12M,PNT_15200_12M,PNT_20000_12M,RDM_00000_12M,RDM_00999_12M,RDM_01000_12M,RDM_02000_12M,RDM_03000_12M,RDM_04000_12M
			            ,RDM_05000_12M,RDM_06000_12M,RDM_07000_12M,RDM_08000_12M,RDM_09000_12M,RDM_10000_12M,RDM_11000_12M,RDM_12000_12M,RDM_13000_12M,RDM_14000_12M,RDM_15200_12M,RDM_20000_12M
			            ,CASE WHEN PNT_00000_1M  = 0 THEN 0 ELSE ROUND((PNT_00000_0M - PNT_00000_1M )/PNT_00000_1M*100,1 ) END AS PNT_00000_1M_RATE
			            ,CASE WHEN PNT_00999_1M  = 0 THEN 0 ELSE ROUND((PNT_00999_0M - PNT_00999_1M )/PNT_00999_1M*100,1 ) END AS PNT_00999_1M_RATE
			            ,CASE WHEN PNT_01000_1M  = 0 THEN 0 ELSE ROUND((PNT_01000_0M - PNT_01000_1M )/PNT_01000_1M*100,1 ) END AS PNT_01000_1M_RATE
			            ,CASE WHEN PNT_02000_1M  = 0 THEN 0 ELSE ROUND((PNT_02000_0M - PNT_02000_1M )/PNT_02000_1M*100,1 ) END AS PNT_02000_1M_RATE
			            ,CASE WHEN PNT_03000_1M  = 0 THEN 0 ELSE ROUND((PNT_03000_0M - PNT_03000_1M )/PNT_03000_1M*100,1 ) END AS PNT_03000_1M_RATE
			            ,CASE WHEN PNT_04000_1M  = 0 THEN 0 ELSE ROUND((PNT_04000_0M - PNT_04000_1M )/PNT_04000_1M*100,1 ) END AS PNT_04000_1M_RATE
			            ,CASE WHEN PNT_05000_1M  = 0 THEN 0 ELSE ROUND((PNT_05000_0M - PNT_05000_1M )/PNT_05000_1M*100,1 ) END AS PNT_05000_1M_RATE
			            ,CASE WHEN PNT_06000_1M  = 0 THEN 0 ELSE ROUND((PNT_06000_0M - PNT_06000_1M )/PNT_06000_1M*100,1 ) END AS PNT_06000_1M_RATE
			            ,CASE WHEN PNT_07000_1M  = 0 THEN 0 ELSE ROUND((PNT_07000_0M - PNT_07000_1M )/PNT_07000_1M*100,1 ) END AS PNT_07000_1M_RATE
			            ,CASE WHEN PNT_08000_1M  = 0 THEN 0 ELSE ROUND((PNT_08000_0M - PNT_08000_1M )/PNT_08000_1M*100,1 ) END AS PNT_08000_1M_RATE
			            ,CASE WHEN PNT_09000_1M  = 0 THEN 0 ELSE ROUND((PNT_09000_0M - PNT_09000_1M )/PNT_09000_1M*100,1 ) END AS PNT_09000_1M_RATE
			            ,CASE WHEN PNT_10000_1M  = 0 THEN 0 ELSE ROUND((PNT_10000_0M - PNT_10000_1M )/PNT_10000_1M*100,1 ) END AS PNT_10000_1M_RATE
			            ,CASE WHEN PNT_11000_1M  = 0 THEN 0 ELSE ROUND((PNT_11000_0M - PNT_11000_1M )/PNT_11000_1M*100,1 ) END AS PNT_11000_1M_RATE
			            ,CASE WHEN PNT_12000_1M  = 0 THEN 0 ELSE ROUND((PNT_12000_0M - PNT_12000_1M )/PNT_12000_1M*100,1 ) END AS PNT_12000_1M_RATE
			            ,CASE WHEN PNT_13000_1M  = 0 THEN 0 ELSE ROUND((PNT_13000_0M - PNT_13000_1M )/PNT_13000_1M*100,1 ) END AS PNT_13000_1M_RATE
			            ,CASE WHEN PNT_14000_1M  = 0 THEN 0 ELSE ROUND((PNT_14000_0M - PNT_14000_1M )/PNT_14000_1M*100,1 ) END AS PNT_14000_1M_RATE
			            ,CASE WHEN PNT_15200_1M  = 0 THEN 0 ELSE ROUND((PNT_15200_0M - PNT_15200_1M )/PNT_15200_1M*100,1 ) END AS PNT_15200_1M_RATE
			            ,CASE WHEN PNT_20000_1M  = 0 THEN 0 ELSE ROUND((PNT_20000_0M - PNT_20000_1M )/PNT_20000_1M*100,1 ) END AS PNT_20000_1M_RATE
			            ,CASE WHEN RDM_00000_1M  = 0 THEN 0 ELSE ROUND((RDM_00000_0M - RDM_00000_1M )/RDM_00000_1M*100,1 ) END AS RDM_00000_1M_RATE
			            ,CASE WHEN RDM_00999_1M  = 0 THEN 0 ELSE ROUND((RDM_00999_0M - RDM_00999_1M )/RDM_00999_1M*100,1 ) END AS RDM_00999_1M_RATE
			            ,CASE WHEN RDM_01000_1M  = 0 THEN 0 ELSE ROUND((RDM_01000_0M - RDM_01000_1M )/RDM_01000_1M*100,1 ) END AS RDM_01000_1M_RATE
			            ,CASE WHEN RDM_02000_1M  = 0 THEN 0 ELSE ROUND((RDM_02000_0M - RDM_02000_1M )/RDM_02000_1M*100,1 ) END AS RDM_02000_1M_RATE
			            ,CASE WHEN RDM_03000_1M  = 0 THEN 0 ELSE ROUND((RDM_03000_0M - RDM_03000_1M )/RDM_03000_1M*100,1 ) END AS RDM_03000_1M_RATE
			            ,CASE WHEN RDM_04000_1M  = 0 THEN 0 ELSE ROUND((RDM_04000_0M - RDM_04000_1M )/RDM_04000_1M*100,1 ) END AS RDM_04000_1M_RATE
			            ,CASE WHEN RDM_05000_1M  = 0 THEN 0 ELSE ROUND((RDM_05000_0M - RDM_05000_1M )/RDM_05000_1M*100,1 ) END AS RDM_05000_1M_RATE
			            ,CASE WHEN RDM_06000_1M  = 0 THEN 0 ELSE ROUND((RDM_06000_0M - RDM_06000_1M )/RDM_06000_1M*100,1 ) END AS RDM_06000_1M_RATE
			            ,CASE WHEN RDM_07000_1M  = 0 THEN 0 ELSE ROUND((RDM_07000_0M - RDM_07000_1M )/RDM_07000_1M*100,1 ) END AS RDM_07000_1M_RATE
			            ,CASE WHEN RDM_08000_1M  = 0 THEN 0 ELSE ROUND((RDM_08000_0M - RDM_08000_1M )/RDM_08000_1M*100,1 ) END AS RDM_08000_1M_RATE
			            ,CASE WHEN RDM_09000_1M  = 0 THEN 0 ELSE ROUND((RDM_09000_0M - RDM_09000_1M )/RDM_09000_1M*100,1 ) END AS RDM_09000_1M_RATE
			            ,CASE WHEN RDM_10000_1M  = 0 THEN 0 ELSE ROUND((RDM_10000_0M - RDM_10000_1M )/RDM_10000_1M*100,1 ) END AS RDM_10000_1M_RATE
			            ,CASE WHEN RDM_11000_1M  = 0 THEN 0 ELSE ROUND((RDM_11000_0M - RDM_11000_1M )/RDM_11000_1M*100,1 ) END AS RDM_11000_1M_RATE
			            ,CASE WHEN RDM_12000_1M  = 0 THEN 0 ELSE ROUND((RDM_12000_0M - RDM_12000_1M )/RDM_12000_1M*100,1 ) END AS RDM_12000_1M_RATE
			            ,CASE WHEN RDM_13000_1M  = 0 THEN 0 ELSE ROUND((RDM_13000_0M - RDM_13000_1M )/RDM_13000_1M*100,1 ) END AS RDM_13000_1M_RATE
			            ,CASE WHEN RDM_14000_1M  = 0 THEN 0 ELSE ROUND((RDM_14000_0M - RDM_14000_1M )/RDM_14000_1M*100,1 ) END AS RDM_14000_1M_RATE
			            ,CASE WHEN RDM_15200_1M  = 0 THEN 0 ELSE ROUND((RDM_15200_0M - RDM_15200_1M )/RDM_15200_1M*100,1 ) END AS RDM_15200_1M_RATE
			            ,CASE WHEN RDM_20000_1M  = 0 THEN 0 ELSE ROUND((RDM_20000_0M - RDM_20000_1M )/RDM_20000_1M*100,1 ) END AS RDM_20000_1M_RATE
			            ,CASE WHEN PNT_00000_12M = 0 THEN 0 ELSE ROUND((PNT_00000_0M - PNT_00000_12M)/PNT_00000_12M*100,1) END AS PNT_00000_12M_RATE
			            ,CASE WHEN PNT_00999_12M = 0 THEN 0 ELSE ROUND((PNT_00999_0M - PNT_00999_12M)/PNT_00999_12M*100,1) END AS PNT_00999_12M_RATE
			            ,CASE WHEN PNT_01000_12M = 0 THEN 0 ELSE ROUND((PNT_01000_0M - PNT_01000_12M)/PNT_01000_12M*100,1) END AS PNT_01000_12M_RATE
			            ,CASE WHEN PNT_02000_12M = 0 THEN 0 ELSE ROUND((PNT_02000_0M - PNT_02000_12M)/PNT_02000_12M*100,1) END AS PNT_02000_12M_RATE
			            ,CASE WHEN PNT_03000_12M = 0 THEN 0 ELSE ROUND((PNT_03000_0M - PNT_03000_12M)/PNT_03000_12M*100,1) END AS PNT_03000_12M_RATE
			            ,CASE WHEN PNT_04000_12M = 0 THEN 0 ELSE ROUND((PNT_04000_0M - PNT_04000_12M)/PNT_04000_12M*100,1) END AS PNT_04000_12M_RATE
			            ,CASE WHEN PNT_05000_12M = 0 THEN 0 ELSE ROUND((PNT_05000_0M - PNT_05000_12M)/PNT_05000_12M*100,1) END AS PNT_05000_12M_RATE
			            ,CASE WHEN PNT_06000_12M = 0 THEN 0 ELSE ROUND((PNT_06000_0M - PNT_06000_12M)/PNT_06000_12M*100,1) END AS PNT_06000_12M_RATE
			            ,CASE WHEN PNT_07000_12M = 0 THEN 0 ELSE ROUND((PNT_07000_0M - PNT_07000_12M)/PNT_07000_12M*100,1) END AS PNT_07000_12M_RATE
			            ,CASE WHEN PNT_08000_12M = 0 THEN 0 ELSE ROUND((PNT_08000_0M - PNT_08000_12M)/PNT_08000_12M*100,1) END AS PNT_08000_12M_RATE
			            ,CASE WHEN PNT_09000_12M = 0 THEN 0 ELSE ROUND((PNT_09000_0M - PNT_09000_12M)/PNT_09000_12M*100,1) END AS PNT_09000_12M_RATE
			            ,CASE WHEN PNT_10000_12M = 0 THEN 0 ELSE ROUND((PNT_10000_0M - PNT_10000_12M)/PNT_10000_12M*100,1) END AS PNT_10000_12M_RATE
			            ,CASE WHEN PNT_11000_12M = 0 THEN 0 ELSE ROUND((PNT_11000_0M - PNT_11000_12M)/PNT_11000_12M*100,1) END AS PNT_11000_12M_RATE
			            ,CASE WHEN PNT_12000_12M = 0 THEN 0 ELSE ROUND((PNT_12000_0M - PNT_12000_12M)/PNT_12000_12M*100,1) END AS PNT_12000_12M_RATE
			            ,CASE WHEN PNT_13000_12M = 0 THEN 0 ELSE ROUND((PNT_13000_0M - PNT_13000_12M)/PNT_13000_12M*100,1) END AS PNT_13000_12M_RATE
			            ,CASE WHEN PNT_14000_12M = 0 THEN 0 ELSE ROUND((PNT_14000_0M - PNT_14000_12M)/PNT_14000_12M*100,1) END AS PNT_14000_12M_RATE
			            ,CASE WHEN PNT_15200_12M = 0 THEN 0 ELSE ROUND((PNT_15200_0M - PNT_15200_12M)/PNT_15200_12M*100,1) END AS PNT_15200_12M_RATE
			            ,CASE WHEN PNT_20000_12M = 0 THEN 0 ELSE ROUND((PNT_20000_0M - PNT_20000_12M)/PNT_20000_12M*100,1) END AS PNT_20000_12M_RATE
			            ,CASE WHEN RDM_00000_12M = 0 THEN 0 ELSE ROUND((RDM_00000_0M - RDM_00000_12M)/RDM_00000_12M*100,1) END AS RDM_00000_12M_RATE
			            ,CASE WHEN RDM_00999_12M = 0 THEN 0 ELSE ROUND((RDM_00999_0M - RDM_00999_12M)/RDM_00999_12M*100,1) END AS RDM_00999_12M_RATE
			            ,CASE WHEN RDM_01000_12M = 0 THEN 0 ELSE ROUND((RDM_01000_0M - RDM_01000_12M)/RDM_01000_12M*100,1) END AS RDM_01000_12M_RATE
			            ,CASE WHEN RDM_02000_12M = 0 THEN 0 ELSE ROUND((RDM_02000_0M - RDM_02000_12M)/RDM_02000_12M*100,1) END AS RDM_02000_12M_RATE
			            ,CASE WHEN RDM_03000_12M = 0 THEN 0 ELSE ROUND((RDM_03000_0M - RDM_03000_12M)/RDM_03000_12M*100,1) END AS RDM_03000_12M_RATE
			            ,CASE WHEN RDM_04000_12M = 0 THEN 0 ELSE ROUND((RDM_04000_0M - RDM_04000_12M)/RDM_04000_12M*100,1) END AS RDM_04000_12M_RATE
			            ,CASE WHEN RDM_05000_12M = 0 THEN 0 ELSE ROUND((RDM_05000_0M - RDM_05000_12M)/RDM_05000_12M*100,1) END AS RDM_05000_12M_RATE
			            ,CASE WHEN RDM_06000_12M = 0 THEN 0 ELSE ROUND((RDM_06000_0M - RDM_06000_12M)/RDM_06000_12M*100,1) END AS RDM_06000_12M_RATE
			            ,CASE WHEN RDM_07000_12M = 0 THEN 0 ELSE ROUND((RDM_07000_0M - RDM_07000_12M)/RDM_07000_12M*100,1) END AS RDM_07000_12M_RATE
			            ,CASE WHEN RDM_08000_12M = 0 THEN 0 ELSE ROUND((RDM_08000_0M - RDM_08000_12M)/RDM_08000_12M*100,1) END AS RDM_08000_12M_RATE
			            ,CASE WHEN RDM_09000_12M = 0 THEN 0 ELSE ROUND((RDM_09000_0M - RDM_09000_12M)/RDM_09000_12M*100,1) END AS RDM_09000_12M_RATE
			            ,CASE WHEN RDM_10000_12M = 0 THEN 0 ELSE ROUND((RDM_10000_0M - RDM_10000_12M)/RDM_10000_12M*100,1) END AS RDM_10000_12M_RATE
			            ,CASE WHEN RDM_11000_12M = 0 THEN 0 ELSE ROUND((RDM_11000_0M - RDM_11000_12M)/RDM_11000_12M*100,1) END AS RDM_11000_12M_RATE
			            ,CASE WHEN RDM_12000_12M = 0 THEN 0 ELSE ROUND((RDM_12000_0M - RDM_12000_12M)/RDM_12000_12M*100,1) END AS RDM_12000_12M_RATE
			            ,CASE WHEN RDM_13000_12M = 0 THEN 0 ELSE ROUND((RDM_13000_0M - RDM_13000_12M)/RDM_13000_12M*100,1) END AS RDM_13000_12M_RATE
			            ,CASE WHEN RDM_14000_12M = 0 THEN 0 ELSE ROUND((RDM_14000_0M - RDM_14000_12M)/RDM_14000_12M*100,1) END AS RDM_14000_12M_RATE
			            ,CASE WHEN RDM_15200_12M = 0 THEN 0 ELSE ROUND((RDM_15200_0M - RDM_15200_12M)/RDM_15200_12M*100,1) END AS RDM_15200_12M_RATE
			            ,CASE WHEN RDM_20000_12M = 0 THEN 0 ELSE ROUND((RDM_20000_0M - RDM_20000_12M)/RDM_20000_12M*100,1) END AS RDM_20000_12M_RATE
			    FROM
			        (
			        SELECT
			             SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN PNT_00000_MEM_CNT ELSE 0 END) AS PNT_00000_0M
			            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN PNT_00999_MEM_CNT ELSE 0 END) AS PNT_00999_0M
			            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN PNT_01000_MEM_CNT ELSE 0 END) AS PNT_01000_0M
			            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN PNT_02000_MEM_CNT ELSE 0 END) AS PNT_02000_0M
			            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN PNT_03000_MEM_CNT ELSE 0 END) AS PNT_03000_0M
			            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN PNT_04000_MEM_CNT ELSE 0 END) AS PNT_04000_0M
			            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN PNT_05000_MEM_CNT ELSE 0 END) AS PNT_05000_0M
			            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN PNT_06000_MEM_CNT ELSE 0 END) AS PNT_06000_0M
			            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN PNT_07000_MEM_CNT ELSE 0 END) AS PNT_07000_0M
			            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN PNT_08000_MEM_CNT ELSE 0 END) AS PNT_08000_0M
			            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN PNT_09000_MEM_CNT ELSE 0 END) AS PNT_09000_0M
			            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN PNT_10000_MEM_CNT ELSE 0 END) AS PNT_10000_0M
			            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN PNT_11000_MEM_CNT ELSE 0 END) AS PNT_11000_0M
			            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN PNT_12000_MEM_CNT ELSE 0 END) AS PNT_12000_0M
			            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN PNT_13000_MEM_CNT ELSE 0 END) AS PNT_13000_0M
			            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN PNT_14000_MEM_CNT ELSE 0 END) AS PNT_14000_0M
			            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN PNT_15200_MEM_CNT ELSE 0 END) AS PNT_15200_0M
			            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN PNT_20000_MEM_CNT ELSE 0 END) AS PNT_20000_0M
			            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN RDM_00000_MEM_CNT ELSE 0 END) AS RDM_00000_0M
			            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN RDM_00999_MEM_CNT ELSE 0 END) AS RDM_00999_0M
			            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN RDM_01000_MEM_CNT ELSE 0 END) AS RDM_01000_0M
			            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN RDM_02000_MEM_CNT ELSE 0 END) AS RDM_02000_0M
			            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN RDM_03000_MEM_CNT ELSE 0 END) AS RDM_03000_0M
			            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN RDM_04000_MEM_CNT ELSE 0 END) AS RDM_04000_0M
			            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN RDM_05000_MEM_CNT ELSE 0 END) AS RDM_05000_0M
			            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN RDM_06000_MEM_CNT ELSE 0 END) AS RDM_06000_0M
			            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN RDM_07000_MEM_CNT ELSE 0 END) AS RDM_07000_0M
			            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN RDM_08000_MEM_CNT ELSE 0 END) AS RDM_08000_0M
			            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN RDM_09000_MEM_CNT ELSE 0 END) AS RDM_09000_0M
			            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN RDM_10000_MEM_CNT ELSE 0 END) AS RDM_10000_0M
			            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN RDM_11000_MEM_CNT ELSE 0 END) AS RDM_11000_0M
			            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN RDM_12000_MEM_CNT ELSE 0 END) AS RDM_12000_0M
			            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN RDM_13000_MEM_CNT ELSE 0 END) AS RDM_13000_0M
			            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN RDM_14000_MEM_CNT ELSE 0 END) AS RDM_14000_0M
			            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN RDM_15200_MEM_CNT ELSE 0 END) AS RDM_15200_0M
			            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN RDM_20000_MEM_CNT ELSE 0 END) AS RDM_20000_0M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN PNT_00000_MEM_CNT ELSE 0 END) AS PNT_00000_1M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN PNT_00999_MEM_CNT ELSE 0 END) AS PNT_00999_1M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN PNT_01000_MEM_CNT ELSE 0 END) AS PNT_01000_1M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN PNT_02000_MEM_CNT ELSE 0 END) AS PNT_02000_1M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN PNT_03000_MEM_CNT ELSE 0 END) AS PNT_03000_1M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN PNT_04000_MEM_CNT ELSE 0 END) AS PNT_04000_1M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN PNT_05000_MEM_CNT ELSE 0 END) AS PNT_05000_1M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN PNT_06000_MEM_CNT ELSE 0 END) AS PNT_06000_1M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN PNT_07000_MEM_CNT ELSE 0 END) AS PNT_07000_1M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN PNT_08000_MEM_CNT ELSE 0 END) AS PNT_08000_1M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN PNT_09000_MEM_CNT ELSE 0 END) AS PNT_09000_1M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN PNT_10000_MEM_CNT ELSE 0 END) AS PNT_10000_1M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN PNT_11000_MEM_CNT ELSE 0 END) AS PNT_11000_1M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN PNT_12000_MEM_CNT ELSE 0 END) AS PNT_12000_1M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN PNT_13000_MEM_CNT ELSE 0 END) AS PNT_13000_1M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN PNT_14000_MEM_CNT ELSE 0 END) AS PNT_14000_1M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN PNT_15200_MEM_CNT ELSE 0 END) AS PNT_15200_1M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN PNT_20000_MEM_CNT ELSE 0 END) AS PNT_20000_1M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN RDM_00000_MEM_CNT ELSE 0 END) AS RDM_00000_1M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN RDM_00999_MEM_CNT ELSE 0 END) AS RDM_00999_1M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN RDM_01000_MEM_CNT ELSE 0 END) AS RDM_01000_1M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN RDM_02000_MEM_CNT ELSE 0 END) AS RDM_02000_1M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN RDM_03000_MEM_CNT ELSE 0 END) AS RDM_03000_1M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN RDM_04000_MEM_CNT ELSE 0 END) AS RDM_04000_1M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN RDM_05000_MEM_CNT ELSE 0 END) AS RDM_05000_1M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN RDM_06000_MEM_CNT ELSE 0 END) AS RDM_06000_1M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN RDM_07000_MEM_CNT ELSE 0 END) AS RDM_07000_1M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN RDM_08000_MEM_CNT ELSE 0 END) AS RDM_08000_1M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN RDM_09000_MEM_CNT ELSE 0 END) AS RDM_09000_1M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN RDM_10000_MEM_CNT ELSE 0 END) AS RDM_10000_1M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN RDM_11000_MEM_CNT ELSE 0 END) AS RDM_11000_1M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN RDM_12000_MEM_CNT ELSE 0 END) AS RDM_12000_1M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN RDM_13000_MEM_CNT ELSE 0 END) AS RDM_13000_1M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN RDM_14000_MEM_CNT ELSE 0 END) AS RDM_14000_1M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN RDM_15200_MEM_CNT ELSE 0 END) AS RDM_15200_1M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN RDM_20000_MEM_CNT ELSE 0 END) AS RDM_20000_1M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN PNT_00000_MEM_CNT ELSE 0 END) AS PNT_00000_12M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN PNT_00999_MEM_CNT ELSE 0 END) AS PNT_00999_12M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN PNT_01000_MEM_CNT ELSE 0 END) AS PNT_01000_12M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN PNT_02000_MEM_CNT ELSE 0 END) AS PNT_02000_12M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN PNT_03000_MEM_CNT ELSE 0 END) AS PNT_03000_12M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN PNT_04000_MEM_CNT ELSE 0 END) AS PNT_04000_12M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN PNT_05000_MEM_CNT ELSE 0 END) AS PNT_05000_12M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN PNT_06000_MEM_CNT ELSE 0 END) AS PNT_06000_12M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN PNT_07000_MEM_CNT ELSE 0 END) AS PNT_07000_12M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN PNT_08000_MEM_CNT ELSE 0 END) AS PNT_08000_12M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN PNT_09000_MEM_CNT ELSE 0 END) AS PNT_09000_12M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN PNT_10000_MEM_CNT ELSE 0 END) AS PNT_10000_12M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN PNT_11000_MEM_CNT ELSE 0 END) AS PNT_11000_12M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN PNT_12000_MEM_CNT ELSE 0 END) AS PNT_12000_12M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN PNT_13000_MEM_CNT ELSE 0 END) AS PNT_13000_12M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN PNT_14000_MEM_CNT ELSE 0 END) AS PNT_14000_12M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN PNT_15200_MEM_CNT ELSE 0 END) AS PNT_15200_12M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN PNT_20000_MEM_CNT ELSE 0 END) AS PNT_20000_12M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN RDM_00000_MEM_CNT ELSE 0 END) AS RDM_00000_12M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN RDM_00999_MEM_CNT ELSE 0 END) AS RDM_00999_12M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN RDM_01000_MEM_CNT ELSE 0 END) AS RDM_01000_12M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN RDM_02000_MEM_CNT ELSE 0 END) AS RDM_02000_12M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN RDM_03000_MEM_CNT ELSE 0 END) AS RDM_03000_12M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN RDM_04000_MEM_CNT ELSE 0 END) AS RDM_04000_12M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN RDM_05000_MEM_CNT ELSE 0 END) AS RDM_05000_12M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN RDM_06000_MEM_CNT ELSE 0 END) AS RDM_06000_12M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN RDM_07000_MEM_CNT ELSE 0 END) AS RDM_07000_12M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN RDM_08000_MEM_CNT ELSE 0 END) AS RDM_08000_12M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN RDM_09000_MEM_CNT ELSE 0 END) AS RDM_09000_12M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN RDM_10000_MEM_CNT ELSE 0 END) AS RDM_10000_12M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN RDM_11000_MEM_CNT ELSE 0 END) AS RDM_11000_12M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN RDM_12000_MEM_CNT ELSE 0 END) AS RDM_12000_12M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN RDM_13000_MEM_CNT ELSE 0 END) AS RDM_13000_12M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN RDM_14000_MEM_CNT ELSE 0 END) AS RDM_14000_12M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN RDM_15200_MEM_CNT ELSE 0 END) AS RDM_15200_12M
			            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN RDM_20000_MEM_CNT ELSE 0 END) AS RDM_20000_12M
			        FROM MRT.FT_PNT_BAND_M
		        WHERE YYYYMM IN (#{yyyymm},com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM'),
		                        com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') )]]>
		        AND QRY_TYPE = #{qryType}
			<if test="@infavor.icncommon.util.ICNStringUtility@isNotEmpty(storeCd)">
			 	AND STORE_CD =#{storeCd}
			</if>
			<if test="@infavor.icncommon.util.ICNStringUtility@isNotEmpty(genCd)">
			 	AND GEND_CD =#{genCd}
			</if>
			<if test="@infavor.icncommon.util.ICNStringUtility@isNotEmpty(ageCd)">
			 	AND AGE_CD =#{ageCd}
			</if>
		        )
		    ) A
		    ,(
		        SELECT LEVEL LV
		        FROM DUAL
		    <![CDATA[    CONNECT BY LEVEL <= 36]]>
		    ) B
		UNION ALL
		<![CDATA[
		SELECT
		      LV AS seq
		      ,CASE WHEN LV BETWEEN 1 AND 18 THEN '포인트 보유 금액별' WHEN LV BETWEEN 19 AND 36 THEN '포인트 사용 금액별' WHEN LV BETWEEN 37 AND 68 THEN '구매금액 기준 회원수' END AS typea
		      ,CASE WHEN LV = 37 THEN '0'     WHEN LV = 38 THEN '~ 1000' WHEN LV = 39 THEN '~ 2000' WHEN LV = 40 THEN '~ 3000' WHEN LV = 41  THEN '~ 4000'  WHEN LV = 42 THEN '~ 5000'
		            WHEN LV = 43 THEN '~ 6000' WHEN LV = 44 THEN '~ 7000' WHEN LV = 45 THEN '~ 8000' WHEN LV = 46 THEN '~ 9000' WHEN LV = 47 THEN '~ 10000' WHEN LV = 48 THEN '~ 11000'
		            WHEN LV = 49 THEN '~ 12000' WHEN LV = 50 THEN '~ 13000' WHEN LV = 51 THEN '~ 14000' WHEN LV = 52 THEN '~ 15000' WHEN LV = 53 THEN '~ 16000'  WHEN LV = 54 THEN '~ 17000'
		            WHEN LV = 55 THEN '~ 18000' WHEN LV = 56 THEN '~ 19000' WHEN LV = 57 THEN '~ 20000' WHEN LV = 58 THEN '~ 21000' WHEN LV = 59  THEN '~ 22000'  WHEN LV = 60 THEN '~ 23000'
		            WHEN LV = 61 THEN '~ 24000' WHEN LV = 62 THEN '~ 25000' WHEN LV = 63 THEN '~ 26000' WHEN LV = 64 THEN '~ 27000' WHEN LV = 65 THEN '~ 28000' WHEN LV = 66 THEN '~ 29000'
		            WHEN LV = 67 THEN '~ 30000' WHEN LV = 68 THEN '30000 이상' END typeb
		      ,DECODE(LV,37,AMT_00000_0M,38,AMT_00999_0M,39,AMT_01000_0M,40,AMT_02000_0M,41,AMT_03000_0M,42,AMT_04000_0M,43,AMT_05000_0M,44,AMT_06000_0M,45,AMT_07000_0M,46,AMT_08000_0M,47,AMT_09000_0M,48,AMT_10000_0M,49,AMT_11000_0M,50,AMT_12000_0M,51,AMT_13000_0M,52,AMT_14000_0M
		                ,53,AMT_15000_0M,54,AMT_16000_0M,55,AMT_17000_0M,56,AMT_18000_0M,57,AMT_19000_0M,58,AMT_20000_0M,59,AMT_21000_0M,60,AMT_22000_0M,61,AMT_23000_0M,62,AMT_24000_0M,63,AMT_25000_0M,64,AMT_26000_0M,65,AMT_27000_0M,66,AMT_28000_0M,67,AMT_29000_0M,68,AMT_30000_0M) AS month0m
		      ,DECODE(LV,37,AMT_00000_1M,38,AMT_00999_1M,39,AMT_01000_1M,40,AMT_02000_1M,41,AMT_03000_1M,42,AMT_04000_1M,43,AMT_05000_1M,44,AMT_06000_1M,45,AMT_07000_1M,46,AMT_08000_1M,47,AMT_09000_1M,48,AMT_10000_1M,49,AMT_11000_1M,50,AMT_12000_1M,51,AMT_13000_1M,52,AMT_14000_1M
		                ,53,AMT_15000_1M,54,AMT_16000_1M,55,AMT_17000_1M,56,AMT_18000_1M,57,AMT_19000_1M,58,AMT_20000_1M,59,AMT_21000_1M,60,AMT_22000_1M,61,AMT_23000_1M,62,AMT_24000_1M,63,AMT_25000_1M,64,AMT_26000_1M,65,AMT_27000_1M,66,AMT_28000_1M,67,AMT_29000_1M,68,AMT_30000_1M) AS month1m
		      ,DECODE(LV,37,AMT_00000_12M,38,AMT_00999_12M,39,AMT_01000_12M,40,AMT_02000_12M,41,AMT_03000_12M,42,AMT_04000_12M,43,AMT_05000_12M,44,AMT_06000_12M,45,AMT_07000_12M,46,AMT_08000_12M,47,AMT_09000_12M,48,AMT_10000_12M,49,AMT_11000_12M,50,AMT_12000_12M,51,AMT_13000_12M,52,AMT_14000_12M
		                ,53,AMT_15000_12M,54,AMT_16000_12M,55,AMT_17000_12M,56,AMT_18000_12M,57,AMT_19000_12M,58,AMT_20000_12M,59,AMT_21000_12M,60,AMT_22000_12M,61,AMT_23000_12M,62,AMT_24000_12M,63,AMT_25000_12M,64,AMT_26000_12M,65,AMT_27000_12M,66,AMT_28000_12M,67,AMT_29000_12M,68,AMT_30000_12M) AS month12m
		      ,DECODE(LV,37,AMT_00000_1M_RATE,38 ,AMT_00999_1M_RATE,39,AMT_01000_1M_RATE,40,AMT_02000_1M_RATE,41,AMT_03000_1M_RATE,42,AMT_04000_1M_RATE,43,AMT_05000_1M_RATE,44,AMT_06000_1M_RATE,45,AMT_07000_1M_RATE,46,AMT_08000_1M_RATE,47,AMT_09000_1M_RATE,48,AMT_10000_1M_RATE,49,AMT_11000_1M_RATE,50,AMT_12000_1M_RATE,51,AMT_13000_1M_RATE,52,AMT_14000_1M_RATE
		                ,53,AMT_15000_1M_RATE,54 ,AMT_16000_1M_RATE,55,AMT_17000_1M_RATE,56,AMT_18000_1M_RATE,57,AMT_19000_1M_RATE,58,AMT_20000_1M_RATE,59,AMT_21000_1M_RATE,60,AMT_22000_1M_RATE,61,AMT_23000_1M_RATE,62,AMT_24000_1M_RATE,63,AMT_25000_1M_RATE,64,AMT_26000_1M_RATE,65,AMT_27000_1M_RATE,66,AMT_28000_1M_RATE,67,AMT_29000_1M_RATE,68,AMT_30000_1M_RATE) AS month1mRate
		      ,DECODE(LV,37,AMT_00000_12M_RATE,38,AMT_00999_12M_RATE,39,AMT_01000_12M_RATE,40,AMT_02000_12M_RATE,41,AMT_03000_12M_RATE,42,AMT_04000_12M_RATE,43,AMT_05000_12M_RATE,44,AMT_06000_12M_RATE,45,AMT_07000_12M_RATE,46,AMT_08000_12M_RATE,47,AMT_09000_12M_RATE,48,AMT_10000_12M_RATE,49,AMT_11000_12M_RATE,50,AMT_12000_12M_RATE,51,AMT_13000_12M_RATE,52,AMT_14000_12M_RATE
		                ,53,AMT_15000_12M_RATE,54,AMT_16000_12M_RATE,55,AMT_17000_12M_RATE,56,AMT_18000_12M_RATE,57,AMT_19000_12M_RATE,58,AMT_20000_12M_RATE,59,AMT_21000_12M_RATE,60,AMT_22000_12M_RATE,61,AMT_23000_12M_RATE,62,AMT_24000_12M_RATE,63,AMT_25000_12M_RATE,64,AMT_26000_12M_RATE,65,AMT_27000_12M_RATE,66,AMT_28000_12M_RATE,67,AMT_29000_12M_RATE,68,AMT_30000_12M_RATE) AS month12mRate
		FROM
		    (
		    SELECT   AMT_00000_0M,AMT_00999_0M,AMT_01000_0M,AMT_02000_0M,AMT_03000_0M,AMT_04000_0M,AMT_05000_0M,AMT_06000_0M
		            ,AMT_07000_0M,AMT_08000_0M,AMT_09000_0M,AMT_10000_0M,AMT_11000_0M,AMT_12000_0M,AMT_13000_0M,AMT_14000_0M,AMT_15000_0M,AMT_16000_0M
		            ,AMT_17000_0M,AMT_18000_0M,AMT_19000_0M,AMT_20000_0M,AMT_21000_0M,AMT_22000_0M,AMT_23000_0M,AMT_24000_0M,AMT_25000_0M,AMT_26000_0M
		            ,AMT_27000_0M,AMT_28000_0M,AMT_29000_0M,AMT_30000_0M
		            ,AMT_00000_1M,AMT_00999_1M,AMT_01000_1M,AMT_02000_1M,AMT_03000_1M,AMT_04000_1M,AMT_05000_1M,AMT_06000_1M
		            ,AMT_07000_1M,AMT_08000_1M,AMT_09000_1M,AMT_10000_1M,AMT_11000_1M,AMT_12000_1M,AMT_13000_1M,AMT_14000_1M,AMT_15000_1M,AMT_16000_1M
		            ,AMT_17000_1M,AMT_18000_1M,AMT_19000_1M,AMT_20000_1M,AMT_21000_1M,AMT_22000_1M,AMT_23000_1M,AMT_24000_1M,AMT_25000_1M,AMT_26000_1M
		            ,AMT_27000_1M,AMT_28000_1M,AMT_29000_1M,AMT_30000_1M
		            ,AMT_00000_12M,AMT_00999_12M,AMT_01000_12M,AMT_02000_12M,AMT_03000_12M,AMT_04000_12M,AMT_05000_12M,AMT_06000_12M
		            ,AMT_07000_12M,AMT_08000_12M,AMT_09000_12M,AMT_10000_12M,AMT_11000_12M,AMT_12000_12M,AMT_13000_12M,AMT_14000_12M,AMT_15000_12M,AMT_16000_12M
		            ,AMT_17000_12M,AMT_18000_12M,AMT_19000_12M,AMT_20000_12M,AMT_21000_12M,AMT_22000_12M,AMT_23000_12M,AMT_24000_12M,AMT_25000_12M,AMT_26000_12M
		            ,AMT_27000_12M,AMT_28000_12M,AMT_29000_12M,AMT_30000_12M
		            ,CASE WHEN AMT_00000_1M  = 0 THEN 0 ELSE ROUND((AMT_00000_0M - AMT_00000_1M )/AMT_00000_1M*100,1) END AS AMT_00000_1M_RATE
		            ,CASE WHEN AMT_00999_1M  = 0 THEN 0 ELSE ROUND((AMT_00999_0M - AMT_00999_1M )/AMT_00999_1M*100,1) END AS AMT_00999_1M_RATE
		            ,CASE WHEN AMT_01000_1M  = 0 THEN 0 ELSE ROUND((AMT_01000_0M - AMT_01000_1M )/AMT_01000_1M*100,1) END AS AMT_01000_1M_RATE
		            ,CASE WHEN AMT_02000_1M  = 0 THEN 0 ELSE ROUND((AMT_02000_0M - AMT_02000_1M )/AMT_02000_1M*100,1) END AS AMT_02000_1M_RATE
		            ,CASE WHEN AMT_03000_1M  = 0 THEN 0 ELSE ROUND((AMT_03000_0M - AMT_03000_1M )/AMT_03000_1M*100,1) END AS AMT_03000_1M_RATE
		            ,CASE WHEN AMT_04000_1M  = 0 THEN 0 ELSE ROUND((AMT_04000_0M - AMT_04000_1M )/AMT_04000_1M*100,1) END AS AMT_04000_1M_RATE
		            ,CASE WHEN AMT_05000_1M  = 0 THEN 0 ELSE ROUND((AMT_05000_0M - AMT_05000_1M )/AMT_05000_1M*100,1) END AS AMT_05000_1M_RATE
		            ,CASE WHEN AMT_06000_1M  = 0 THEN 0 ELSE ROUND((AMT_06000_0M - AMT_06000_1M )/AMT_06000_1M*100,1) END AS AMT_06000_1M_RATE
		            ,CASE WHEN AMT_07000_1M  = 0 THEN 0 ELSE ROUND((AMT_07000_0M - AMT_07000_1M )/AMT_07000_1M*100,1) END AS AMT_07000_1M_RATE
		            ,CASE WHEN AMT_08000_1M  = 0 THEN 0 ELSE ROUND((AMT_08000_0M - AMT_08000_1M )/AMT_08000_1M*100,1) END AS AMT_08000_1M_RATE
		            ,CASE WHEN AMT_09000_1M  = 0 THEN 0 ELSE ROUND((AMT_09000_0M - AMT_09000_1M )/AMT_09000_1M*100,1) END AS AMT_09000_1M_RATE
		            ,CASE WHEN AMT_10000_1M  = 0 THEN 0 ELSE ROUND((AMT_10000_0M - AMT_10000_1M )/AMT_10000_1M*100,1) END AS AMT_10000_1M_RATE
		            ,CASE WHEN AMT_11000_1M  = 0 THEN 0 ELSE ROUND((AMT_11000_0M - AMT_11000_1M )/AMT_11000_1M*100,1) END AS AMT_11000_1M_RATE
		            ,CASE WHEN AMT_12000_1M  = 0 THEN 0 ELSE ROUND((AMT_12000_0M - AMT_12000_1M )/AMT_12000_1M*100,1) END AS AMT_12000_1M_RATE
		            ,CASE WHEN AMT_13000_1M  = 0 THEN 0 ELSE ROUND((AMT_13000_0M - AMT_13000_1M )/AMT_13000_1M*100,1) END AS AMT_13000_1M_RATE
		            ,CASE WHEN AMT_14000_1M  = 0 THEN 0 ELSE ROUND((AMT_14000_0M - AMT_14000_1M )/AMT_14000_1M*100,1) END AS AMT_14000_1M_RATE
		            ,CASE WHEN AMT_15000_1M  = 0 THEN 0 ELSE ROUND((AMT_15000_0M - AMT_15000_1M )/AMT_15000_1M*100,1) END AS AMT_15000_1M_RATE
		            ,CASE WHEN AMT_16000_1M  = 0 THEN 0 ELSE ROUND((AMT_16000_0M - AMT_16000_1M )/AMT_16000_1M*100,1) END AS AMT_16000_1M_RATE
		            ,CASE WHEN AMT_17000_1M  = 0 THEN 0 ELSE ROUND((AMT_17000_0M - AMT_17000_1M )/AMT_17000_1M*100,1) END AS AMT_17000_1M_RATE
		            ,CASE WHEN AMT_18000_1M  = 0 THEN 0 ELSE ROUND((AMT_18000_0M - AMT_18000_1M )/AMT_18000_1M*100,1) END AS AMT_18000_1M_RATE
		            ,CASE WHEN AMT_19000_1M  = 0 THEN 0 ELSE ROUND((AMT_19000_0M - AMT_19000_1M )/AMT_19000_1M*100,1) END AS AMT_19000_1M_RATE
		            ,CASE WHEN AMT_20000_1M  = 0 THEN 0 ELSE ROUND((AMT_20000_0M - AMT_20000_1M )/AMT_20000_1M*100,1) END AS AMT_20000_1M_RATE
		            ,CASE WHEN AMT_21000_1M  = 0 THEN 0 ELSE ROUND((AMT_21000_0M - AMT_21000_1M )/AMT_21000_1M*100,1) END AS AMT_21000_1M_RATE
		            ,CASE WHEN AMT_22000_1M  = 0 THEN 0 ELSE ROUND((AMT_22000_0M - AMT_22000_1M )/AMT_22000_1M*100,1) END AS AMT_22000_1M_RATE
		            ,CASE WHEN AMT_23000_1M  = 0 THEN 0 ELSE ROUND((AMT_23000_0M - AMT_23000_1M )/AMT_23000_1M*100,1) END AS AMT_23000_1M_RATE
		            ,CASE WHEN AMT_24000_1M  = 0 THEN 0 ELSE ROUND((AMT_24000_0M - AMT_24000_1M )/AMT_24000_1M*100,1) END AS AMT_24000_1M_RATE
		            ,CASE WHEN AMT_25000_1M  = 0 THEN 0 ELSE ROUND((AMT_25000_0M - AMT_25000_1M )/AMT_25000_1M*100,1) END AS AMT_25000_1M_RATE
		            ,CASE WHEN AMT_26000_1M  = 0 THEN 0 ELSE ROUND((AMT_26000_0M - AMT_26000_1M )/AMT_26000_1M*100,1) END AS AMT_26000_1M_RATE
		            ,CASE WHEN AMT_27000_1M  = 0 THEN 0 ELSE ROUND((AMT_27000_0M - AMT_27000_1M )/AMT_27000_1M*100,1) END AS AMT_27000_1M_RATE
		            ,CASE WHEN AMT_28000_1M  = 0 THEN 0 ELSE ROUND((AMT_28000_0M - AMT_28000_1M )/AMT_28000_1M*100,1) END AS AMT_28000_1M_RATE
		            ,CASE WHEN AMT_29000_1M  = 0 THEN 0 ELSE ROUND((AMT_29000_0M - AMT_29000_1M )/AMT_29000_1M*100,1) END AS AMT_29000_1M_RATE
		            ,CASE WHEN AMT_30000_1M  = 0 THEN 0 ELSE ROUND((AMT_30000_0M - AMT_30000_1M )/AMT_30000_1M*100,1) END AS AMT_30000_1M_RATE
		            ,CASE WHEN AMT_00000_12M = 0 THEN 0 ELSE ROUND((AMT_00000_0M - AMT_00000_12M)/AMT_00000_12M*100,1) END AS AMT_00000_12M_RATE
		            ,CASE WHEN AMT_00999_12M = 0 THEN 0 ELSE ROUND((AMT_00999_0M - AMT_00999_12M)/AMT_00999_12M*100,1) END AS AMT_00999_12M_RATE
		            ,CASE WHEN AMT_01000_12M = 0 THEN 0 ELSE ROUND((AMT_01000_0M - AMT_01000_12M)/AMT_01000_12M*100,1) END AS AMT_01000_12M_RATE
		            ,CASE WHEN AMT_02000_12M = 0 THEN 0 ELSE ROUND((AMT_02000_0M - AMT_02000_12M)/AMT_02000_12M*100,1) END AS AMT_02000_12M_RATE
		            ,CASE WHEN AMT_03000_12M = 0 THEN 0 ELSE ROUND((AMT_03000_0M - AMT_03000_12M)/AMT_03000_12M*100,1) END AS AMT_03000_12M_RATE
		            ,CASE WHEN AMT_04000_12M = 0 THEN 0 ELSE ROUND((AMT_04000_0M - AMT_04000_12M)/AMT_04000_12M*100,1) END AS AMT_04000_12M_RATE
		            ,CASE WHEN AMT_05000_12M = 0 THEN 0 ELSE ROUND((AMT_05000_0M - AMT_05000_12M)/AMT_05000_12M*100,1) END AS AMT_05000_12M_RATE
		            ,CASE WHEN AMT_06000_12M = 0 THEN 0 ELSE ROUND((AMT_06000_0M - AMT_06000_12M)/AMT_06000_12M*100,1) END AS AMT_06000_12M_RATE
		            ,CASE WHEN AMT_07000_12M = 0 THEN 0 ELSE ROUND((AMT_07000_0M - AMT_07000_12M)/AMT_07000_12M*100,1) END AS AMT_07000_12M_RATE
		            ,CASE WHEN AMT_08000_12M = 0 THEN 0 ELSE ROUND((AMT_08000_0M - AMT_08000_12M)/AMT_08000_12M*100,1) END AS AMT_08000_12M_RATE
		            ,CASE WHEN AMT_09000_12M = 0 THEN 0 ELSE ROUND((AMT_09000_0M - AMT_09000_12M)/AMT_09000_12M*100,1) END AS AMT_09000_12M_RATE
		            ,CASE WHEN AMT_10000_12M = 0 THEN 0 ELSE ROUND((AMT_10000_0M - AMT_10000_12M)/AMT_10000_12M*100,1) END AS AMT_10000_12M_RATE
		            ,CASE WHEN AMT_11000_12M = 0 THEN 0 ELSE ROUND((AMT_11000_0M - AMT_11000_12M)/AMT_11000_12M*100,1) END AS AMT_11000_12M_RATE
		            ,CASE WHEN AMT_12000_12M = 0 THEN 0 ELSE ROUND((AMT_12000_0M - AMT_12000_12M)/AMT_12000_12M*100,1) END AS AMT_12000_12M_RATE
		            ,CASE WHEN AMT_13000_12M = 0 THEN 0 ELSE ROUND((AMT_13000_0M - AMT_13000_12M)/AMT_13000_12M*100,1) END AS AMT_13000_12M_RATE
		            ,CASE WHEN AMT_14000_12M = 0 THEN 0 ELSE ROUND((AMT_14000_0M - AMT_14000_12M)/AMT_14000_12M*100,1) END AS AMT_14000_12M_RATE
		            ,CASE WHEN AMT_15000_12M = 0 THEN 0 ELSE ROUND((AMT_15000_0M - AMT_15000_12M)/AMT_15000_12M*100,1) END AS AMT_15000_12M_RATE
		            ,CASE WHEN AMT_16000_12M = 0 THEN 0 ELSE ROUND((AMT_16000_0M - AMT_16000_12M)/AMT_16000_12M*100,1) END AS AMT_16000_12M_RATE
		            ,CASE WHEN AMT_17000_12M = 0 THEN 0 ELSE ROUND((AMT_17000_0M - AMT_17000_12M)/AMT_17000_12M*100,1) END AS AMT_17000_12M_RATE
		            ,CASE WHEN AMT_18000_12M = 0 THEN 0 ELSE ROUND((AMT_18000_0M - AMT_18000_12M)/AMT_18000_12M*100,1) END AS AMT_18000_12M_RATE
		            ,CASE WHEN AMT_19000_12M = 0 THEN 0 ELSE ROUND((AMT_19000_0M - AMT_19000_12M)/AMT_19000_12M*100,1) END AS AMT_19000_12M_RATE
		            ,CASE WHEN AMT_20000_12M = 0 THEN 0 ELSE ROUND((AMT_20000_0M - AMT_20000_12M)/AMT_20000_12M*100,1) END AS AMT_20000_12M_RATE
		            ,CASE WHEN AMT_21000_12M = 0 THEN 0 ELSE ROUND((AMT_21000_0M - AMT_21000_12M)/AMT_21000_12M*100,1) END AS AMT_21000_12M_RATE
		            ,CASE WHEN AMT_22000_12M = 0 THEN 0 ELSE ROUND((AMT_22000_0M - AMT_22000_12M)/AMT_22000_12M*100,1) END AS AMT_22000_12M_RATE
		            ,CASE WHEN AMT_23000_12M = 0 THEN 0 ELSE ROUND((AMT_23000_0M - AMT_23000_12M)/AMT_23000_12M*100,1) END AS AMT_23000_12M_RATE
		            ,CASE WHEN AMT_24000_12M = 0 THEN 0 ELSE ROUND((AMT_24000_0M - AMT_24000_12M)/AMT_24000_12M*100,1) END AS AMT_24000_12M_RATE
		            ,CASE WHEN AMT_25000_12M = 0 THEN 0 ELSE ROUND((AMT_25000_0M - AMT_25000_12M)/AMT_25000_12M*100,1) END AS AMT_25000_12M_RATE
		            ,CASE WHEN AMT_26000_12M = 0 THEN 0 ELSE ROUND((AMT_26000_0M - AMT_26000_12M)/AMT_26000_12M*100,1) END AS AMT_26000_12M_RATE
		            ,CASE WHEN AMT_27000_12M = 0 THEN 0 ELSE ROUND((AMT_27000_0M - AMT_27000_12M)/AMT_27000_12M*100,1) END AS AMT_27000_12M_RATE
		            ,CASE WHEN AMT_28000_12M = 0 THEN 0 ELSE ROUND((AMT_28000_0M - AMT_28000_12M)/AMT_28000_12M*100,1) END AS AMT_28000_12M_RATE
		            ,CASE WHEN AMT_29000_12M = 0 THEN 0 ELSE ROUND((AMT_29000_0M - AMT_29000_12M)/AMT_29000_12M*100,1) END AS AMT_29000_12M_RATE
		            ,CASE WHEN AMT_30000_12M = 0 THEN 0 ELSE ROUND((AMT_30000_0M - AMT_30000_12M)/AMT_30000_12M*100,1) END AS AMT_30000_12M_RATE
		    FROM
		        (
		        SELECT
		             SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN AMT_00000_MEM_CNT ELSE 0 END) AS AMT_00000_0M
		            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN AMT_00999_MEM_CNT ELSE 0 END) AS AMT_00999_0M
		            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN AMT_01000_MEM_CNT ELSE 0 END) AS AMT_01000_0M
		            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN AMT_02000_MEM_CNT ELSE 0 END) AS AMT_02000_0M
		            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN AMT_03000_MEM_CNT ELSE 0 END) AS AMT_03000_0M
		            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN AMT_04000_MEM_CNT ELSE 0 END) AS AMT_04000_0M
		            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN AMT_05000_MEM_CNT ELSE 0 END) AS AMT_05000_0M
		            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN AMT_06000_MEM_CNT ELSE 0 END) AS AMT_06000_0M
		            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN AMT_07000_MEM_CNT ELSE 0 END) AS AMT_07000_0M
		            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN AMT_08000_MEM_CNT ELSE 0 END) AS AMT_08000_0M
		            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN AMT_09000_MEM_CNT ELSE 0 END) AS AMT_09000_0M
		            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN AMT_10000_MEM_CNT ELSE 0 END) AS AMT_10000_0M
		            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN AMT_11000_MEM_CNT ELSE 0 END) AS AMT_11000_0M
		            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN AMT_12000_MEM_CNT ELSE 0 END) AS AMT_12000_0M
		            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN AMT_13000_MEM_CNT ELSE 0 END) AS AMT_13000_0M
		            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN AMT_14000_MEM_CNT ELSE 0 END) AS AMT_14000_0M
		            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN AMT_15000_MEM_CNT ELSE 0 END) AS AMT_15000_0M
		            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN AMT_16000_MEM_CNT ELSE 0 END) AS AMT_16000_0M
		            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN AMT_17000_MEM_CNT ELSE 0 END) AS AMT_17000_0M
		            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN AMT_18000_MEM_CNT ELSE 0 END) AS AMT_18000_0M
		            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN AMT_19000_MEM_CNT ELSE 0 END) AS AMT_19000_0M
		            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN AMT_20000_MEM_CNT ELSE 0 END) AS AMT_20000_0M
		            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN AMT_21000_MEM_CNT ELSE 0 END) AS AMT_21000_0M
		            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN AMT_22000_MEM_CNT ELSE 0 END) AS AMT_22000_0M
		            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN AMT_23000_MEM_CNT ELSE 0 END) AS AMT_23000_0M
		            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN AMT_24000_MEM_CNT ELSE 0 END) AS AMT_24000_0M
		            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN AMT_25000_MEM_CNT ELSE 0 END) AS AMT_25000_0M
		            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN AMT_26000_MEM_CNT ELSE 0 END) AS AMT_26000_0M
		            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN AMT_27000_MEM_CNT ELSE 0 END) AS AMT_27000_0M
		            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN AMT_28000_MEM_CNT ELSE 0 END) AS AMT_28000_0M
		            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN AMT_29000_MEM_CNT ELSE 0 END) AS AMT_29000_0M
		            ,SUM(CASE WHEN YYYYMM = #{yyyymm}                                                     THEN AMT_30000_MEM_CNT ELSE 0 END) AS AMT_30000_0M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN AMT_00000_MEM_CNT ELSE 0 END) AS AMT_00000_1M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN AMT_00999_MEM_CNT ELSE 0 END) AS AMT_00999_1M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN AMT_01000_MEM_CNT ELSE 0 END) AS AMT_01000_1M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN AMT_02000_MEM_CNT ELSE 0 END) AS AMT_02000_1M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN AMT_03000_MEM_CNT ELSE 0 END) AS AMT_03000_1M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN AMT_04000_MEM_CNT ELSE 0 END) AS AMT_04000_1M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN AMT_05000_MEM_CNT ELSE 0 END) AS AMT_05000_1M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN AMT_06000_MEM_CNT ELSE 0 END) AS AMT_06000_1M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN AMT_07000_MEM_CNT ELSE 0 END) AS AMT_07000_1M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN AMT_08000_MEM_CNT ELSE 0 END) AS AMT_08000_1M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN AMT_09000_MEM_CNT ELSE 0 END) AS AMT_09000_1M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN AMT_10000_MEM_CNT ELSE 0 END) AS AMT_10000_1M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN AMT_11000_MEM_CNT ELSE 0 END) AS AMT_11000_1M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN AMT_12000_MEM_CNT ELSE 0 END) AS AMT_12000_1M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN AMT_13000_MEM_CNT ELSE 0 END) AS AMT_13000_1M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN AMT_14000_MEM_CNT ELSE 0 END) AS AMT_14000_1M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN AMT_15000_MEM_CNT ELSE 0 END) AS AMT_15000_1M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN AMT_16000_MEM_CNT ELSE 0 END) AS AMT_16000_1M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN AMT_17000_MEM_CNT ELSE 0 END) AS AMT_17000_1M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN AMT_18000_MEM_CNT ELSE 0 END) AS AMT_18000_1M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN AMT_19000_MEM_CNT ELSE 0 END) AS AMT_19000_1M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN AMT_20000_MEM_CNT ELSE 0 END) AS AMT_20000_1M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN AMT_21000_MEM_CNT ELSE 0 END) AS AMT_21000_1M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN AMT_22000_MEM_CNT ELSE 0 END) AS AMT_22000_1M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN AMT_23000_MEM_CNT ELSE 0 END) AS AMT_23000_1M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN AMT_24000_MEM_CNT ELSE 0 END) AS AMT_24000_1M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN AMT_25000_MEM_CNT ELSE 0 END) AS AMT_25000_1M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN AMT_26000_MEM_CNT ELSE 0 END) AS AMT_26000_1M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN AMT_27000_MEM_CNT ELSE 0 END) AS AMT_27000_1M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN AMT_28000_MEM_CNT ELSE 0 END) AS AMT_28000_1M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN AMT_29000_MEM_CNT ELSE 0 END) AS AMT_29000_1M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM') THEN AMT_30000_MEM_CNT ELSE 0 END) AS AMT_30000_1M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN AMT_00000_MEM_CNT ELSE 0 END) AS AMT_00000_12M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN AMT_00999_MEM_CNT ELSE 0 END) AS AMT_00999_12M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN AMT_01000_MEM_CNT ELSE 0 END) AS AMT_01000_12M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN AMT_02000_MEM_CNT ELSE 0 END) AS AMT_02000_12M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN AMT_03000_MEM_CNT ELSE 0 END) AS AMT_03000_12M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN AMT_04000_MEM_CNT ELSE 0 END) AS AMT_04000_12M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN AMT_05000_MEM_CNT ELSE 0 END) AS AMT_05000_12M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN AMT_06000_MEM_CNT ELSE 0 END) AS AMT_06000_12M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN AMT_07000_MEM_CNT ELSE 0 END) AS AMT_07000_12M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN AMT_08000_MEM_CNT ELSE 0 END) AS AMT_08000_12M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN AMT_09000_MEM_CNT ELSE 0 END) AS AMT_09000_12M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN AMT_10000_MEM_CNT ELSE 0 END) AS AMT_10000_12M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN AMT_11000_MEM_CNT ELSE 0 END) AS AMT_11000_12M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN AMT_12000_MEM_CNT ELSE 0 END) AS AMT_12000_12M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN AMT_13000_MEM_CNT ELSE 0 END) AS AMT_13000_12M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN AMT_14000_MEM_CNT ELSE 0 END) AS AMT_14000_12M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN AMT_15000_MEM_CNT ELSE 0 END) AS AMT_15000_12M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN AMT_16000_MEM_CNT ELSE 0 END) AS AMT_16000_12M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN AMT_17000_MEM_CNT ELSE 0 END) AS AMT_17000_12M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN AMT_18000_MEM_CNT ELSE 0 END) AS AMT_18000_12M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN AMT_19000_MEM_CNT ELSE 0 END) AS AMT_19000_12M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN AMT_20000_MEM_CNT ELSE 0 END) AS AMT_20000_12M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN AMT_21000_MEM_CNT ELSE 0 END) AS AMT_21000_12M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN AMT_22000_MEM_CNT ELSE 0 END) AS AMT_22000_12M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN AMT_23000_MEM_CNT ELSE 0 END) AS AMT_23000_12M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN AMT_24000_MEM_CNT ELSE 0 END) AS AMT_24000_12M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN AMT_25000_MEM_CNT ELSE 0 END) AS AMT_25000_12M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN AMT_26000_MEM_CNT ELSE 0 END) AS AMT_26000_12M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN AMT_27000_MEM_CNT ELSE 0 END) AS AMT_27000_12M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN AMT_28000_MEM_CNT ELSE 0 END) AS AMT_28000_12M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN AMT_29000_MEM_CNT ELSE 0 END) AS AMT_29000_12M
		            ,SUM(CASE WHEN YYYYMM = com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') THEN AMT_30000_MEM_CNT ELSE 0 END) AS AMT_30000_12M
		        FROM MRT.FT_PNT_BAND_M
		        WHERE YYYYMM IN (#{yyyymm},com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-1 ),'YYYYMM'),
		                        com.TO_CHAR(ADD_MONTHS(com.TO_DATE(#{yyyymm},'YYYYMM'),-12),'YYYYMM') )]]>
		        AND QRY_TYPE = #{qryType}
		        <if test="@infavor.icncommon.util.ICNStringUtility@isNotEmpty(storeCd)">
			 	AND STORE_CD =#{storeCd}
			</if>
			<if test="@infavor.icncommon.util.ICNStringUtility@isNotEmpty(genCd)">
			 	AND GEND_CD =#{genCd}
			</if>
			<if test="@infavor.icncommon.util.ICNStringUtility@isNotEmpty(ageCd)">
			 	AND AGE_CD =#{ageCd}
			</if>
		        )
		    ) A
		    ,(
		      <![CDATA[
		      SELECT LV
		        FROM (
		        SELECT LEVEL LV
		        FROM DUAL
		        CONNECT BY LEVEL <= 68
		        )
		        WHERE LV >= 37 AND LV <= 68]]>
		    ) B
 		</if>
	</select>
	<select id="selectSalCntAmtList" parameterType="com.icignal.kepler.report.dto.request.KprReportReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportSalCntAmtResDto">
		<if test="typeCd.equals('SUM')">
		SELECT   SALE_SEC		AS price
				,MEM_CNT_0      as cnt0m     --0회 구매회원수
		        ,MEM_CNT_1      as cnt1m     --1회 구매회원수
		        ,MEM_CNT_2      as cnt2m     --2회 구매회원수
		        ,MEM_CNT_3      as cnt3m     --3회 구매회원수
		        ,MEM_CNT_4      as cnt4m     --4회 구매회원수
		        ,MEM_CNT_5      as cnt5m     --5회 구매회원수
		        ,MEM_CNT_6      as cnt6m     --6회 구매회원수
		        ,MEM_CNT_7      as cnt7m     --7회 구매회원수
		        ,MEM_CNT_8      as cnt8m     --8회 구매회원수
		        ,MEM_CNT_9      as cnt9m     --9회 구매회원수
		        ,MEM_CNT_10     as cnt10m    --10회 구매회원수
		        ,RCPT_CNT_0     as rcit0m    --0회 영수증건수
		        ,RCPT_CNT_1     as rcit1m    --1회 영수증건수
		        ,RCPT_CNT_2     as rcit2m    --2회 영수증건수
		        ,RCPT_CNT_3     as rcit3m    --3회 영수증건수
		        ,RCPT_CNT_4     as rcit4m    --4회 영수증건수
		        ,RCPT_CNT_5     as rcit5m    --5회 영수증건수
		        ,RCPT_CNT_6     as rcit6m    --6회 영수증건수
		        ,RCPT_CNT_7     as rcit7m    --7회 영수증건수
		        ,RCPT_CNT_8     as rcit8m    --8회 영수증건수
		        ,RCPT_CNT_9     as rcit9m    --9회 영수증건수
		        ,RCPT_CNT_10    as rcit10m   --10회 영수증건수
		        ,SALE_AMT_0     as buy0m     --0회 구매금액
		        ,SALE_AMT_1     as buy1m     --1회 구매금액
		        ,SALE_AMT_2     as buy2m     --2회 구매금액
		        ,SALE_AMT_3     as buy3m     --3회 구매금액
		        ,SALE_AMT_4     as buy4m     --4회 구매금액
		        ,SALE_AMT_5     as buy5m     --5회 구매금액
		        ,SALE_AMT_6     as buy6m     --6회 구매금액
		        ,SALE_AMT_7     as buy7m     --7회 구매금액
		        ,SALE_AMT_8     as buy8m     --8회 구매금액
		        ,SALE_AMT_9     as buy9m     --9회 구매금액
		        ,SALE_AMT_10    as buy10m    --10회 구매금액
		from MRT.FT_MATR_SALE_M
		WHERE YYYYMM = #{yyyymm}
		AND QRY_TYPE = #{qryType}
			<if test="@infavor.icncommon.util.ICNStringUtility@isNotEmpty(storeCd)">
			 	AND STORE_CD =#{storeCd}
			</if>
			<if test="@infavor.icncommon.util.ICNStringUtility@isNotEmpty(ageCd)">
			 	AND AGE_CD =#{ageCd}
			</if>
			<if test="@infavor.icncommon.util.ICNStringUtility@isNotEmpty(genCd)">
			 	AND GEND_CD =#{genCd}
			</if>
		ORDER BY TO_NUMBER(SALE_SEC)
		</if>
		<if test="typeCd.equals('AVG')">
		select   AVG_SEC	    AS price
				,MEM_CNT_0      as cnt0m     --0회 구매회원수
		        ,MEM_CNT_1      as cnt1m     --1회 구매회원수
		        ,MEM_CNT_2      as cnt2m     --2회 구매회원수
		        ,MEM_CNT_3      as cnt3m     --3회 구매회원수
		        ,MEM_CNT_4      as cnt4m     --4회 구매회원수
		        ,MEM_CNT_5      as cnt5m     --5회 구매회원수
		        ,MEM_CNT_6      as cnt6m     --6회 구매회원수
		        ,MEM_CNT_7      as cnt7m     --7회 구매회원수
		        ,MEM_CNT_8      as cnt8m     --8회 구매회원수
		        ,MEM_CNT_9      as cnt9m     --9회 구매회원수
		        ,MEM_CNT_10     as cnt10m    --10회 구매회원수
		        ,RCPT_CNT_0     as rcit0m    --0회 영수증건수
		        ,RCPT_CNT_1     as rcit1m    --1회 영수증건수
		        ,RCPT_CNT_2     as rcit2m    --2회 영수증건수
		        ,RCPT_CNT_3     as rcit3m    --3회 영수증건수
		        ,RCPT_CNT_4     as rcit4m    --4회 영수증건수
		        ,RCPT_CNT_5     as rcit5m    --5회 영수증건수
		        ,RCPT_CNT_6     as rcit6m    --6회 영수증건수
		        ,RCPT_CNT_7     as rcit7m    --7회 영수증건수
		        ,RCPT_CNT_8     as rcit8m    --8회 영수증건수
		        ,RCPT_CNT_9     as rcit9m    --9회 영수증건수
		        ,RCPT_CNT_10    as rcit10m   --10회 영수증건수
		        ,SALE_AMT_0     as buy0m     --0회 구매금액
		        ,SALE_AMT_1     as buy1m     --1회 구매금액
		        ,SALE_AMT_2     as buy2m     --2회 구매금액
		        ,SALE_AMT_3     as buy3m     --3회 구매금액
		        ,SALE_AMT_4     as buy4m     --4회 구매금액
		        ,SALE_AMT_5     as buy5m     --5회 구매금액
		        ,SALE_AMT_6     as buy6m     --6회 구매금액
		        ,SALE_AMT_7     as buy7m     --7회 구매금액
		        ,SALE_AMT_8     as buy8m     --8회 구매금액
		        ,SALE_AMT_9     as buy9m     --9회 구매금액
		        ,SALE_AMT_10    as buy10m    --10회 구매금액
		from MRT.FT_MATR_AVG_M
		where yyyymm = #{yyyymm}
		and qry_type = #{qryType}
			<if test="@infavor.icncommon.util.ICNStringUtility@isNotEmpty(storeCd)">
			 	AND STORE_CD =#{storeCd}
			</if>
			<if test="@infavor.icncommon.util.ICNStringUtility@isNotEmpty(ageCd)">
			 	AND AGE_CD =#{ageCd}
			</if>
			<if test="@infavor.icncommon.util.ICNStringUtility@isNotEmpty(genCd)">
			 	AND GEND_CD =#{genCd}
			</if>
		ORDER BY TO_NUMBER(AVG_SEC)
		</if>
	</select>
	<select id="selectCampaignChnReactionList" parameterType="com.icignal.kepler.report.dto.request.KprReportCampaignReactionReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportCampaignReactionResDto">
	SELECT
		 T1.CAM_NM					AS camNm
	    ,CONCAT(T1.CAM_START_DT, ' ~ ', T1.CAM_END_DT) AS camTerm
	    ,T1.CHNL_TYPE_CD			AS chnlTypeCd
	    ,com.nvl(T1.EXE_TGT_AMT,0)      AS extraCnt
	    ,com.nvl(T2.CHNL_CNT,0)         AS chnlCnt
	    ,com.nvl(T2.RESP_CNT,0)         AS respCnt
	    ,CASE WHEN com.nvl(T2.CHNL_CNT,0) = 0 THEN '0%'
        	ELSE CONCAT(RTRIM(com.TO_CHAR(ROUND(com.nvl(T2.RESP_CNT,0) / com.nvl(T2.CHNL_CNT,0) * 100,1),'FM9990D99'), '.'), '%') END AS responRate
    	,com.nvl(T2.OPEN_CNT,0) AS openCnt
    	, ${strColumn}
	FROM
	(
	SELECT A.ID AS CAM_RID ,A.DISP_NO AS CAM_NO ,CAM_NM ,CAM_STATUS_CD
	        ,com.TO_CHAR(CAM_START_DD,'YYYYMMDD') AS CAM_START_DT
	        ,com.TO_CHAR(CAM_END_DD,'YYYYMMDD') AS CAM_END_DT
	        ,C.CHNL_NM,C.CHNL_TYPE_CD ,B.MKT_CHNL_ID,D.EXE_TGT_AMT
	FROM MRTSTG.MKT_CAM_MST A
	INNER JOIN MRTSTG.MKT_CONTS_CHNL_REL B ON A.ID = B.CAM_ID
	INNER JOIN MRTSTG.MKT_CHNL C ON B.MKT_CHNL_ID = C.ID
	INNER JOIN MRTSTG.MKT_EXE_INFO_ITEM D ON A.ID = D.CAM_ID
	WHERE 1 = 1
	AND A.CAM_STATUS_CD = 'E'
	AND A.FLAG = 1
	AND com.TO_CHAR(A.CAM_START_DD,'YYYYMM') <![CDATA[ >= ]]> #{yyyymm}
	AND com.TO_CHAR(A.CAM_END_DD , 'YYYYMM') <![CDATA[ < ]]> #{endyyyymm}
	) T1
	LEFT OUTER JOIN
	(
	SELECT CAM_ID
	    ,'PUSH' AS CHNL_TYPE
	    , COUNT(RECV_MEM_ID) AS CHNL_CNT
	    , SUM(CASE WHEN SEND_SUCES_YN = 'Y' THEN 1 ELSE 0 END) AS RESP_CNT
	    , SUM(CASE WHEN READ_SUCES_YN = 'Y' THEN 1 ELSE 0 END) AS OPEN_CNT
	FROM MRTSTG.MKT_PUSH_SEND_LOG
	WHERE 1 = 1
	AND FLAG = 1
	AND BAT_SEND_STATUS = 'S'
	GROUP BY CAM_ID
	UNION ALL
	SELECT CAM_ID
    	,MSG_SEND_TYPE AS CHNL_TYPE
   		,COUNT(RECV_MEM_ID) AS CHNL_CNT
     	,SUM(CASE WHEN SEND_SUCES_YN = 'Y' THEN 1 ELSE 0 END) AS RESP_CNT
     	,SUM(CASE WHEN SEND_SUCES_YN = 'Y' THEN 1 ELSE 0 END) AS OPEN_CNT
	FROM MRTSTG.MKT_MSG_SEND_LOG
	GROUP BY CAM_ID,MSG_SEND_TYPE
	UNION ALL
	SELECT CAM_ID
   		,'EMAIL' AS CHNL_TYPE
     	,COUNT(RECV_MEM_ID) AS CHNL_CNT
     	,SUM(CASE WHEN SEND_SUCES_YN = 'Y' THEN 1 ELSE 0 END) AS RESP_CNT
     	,SUM(CASE WHEN OPEN_SUCES_YN = 'Y' THEN 1 ELSE 0 END) AS OPEN_CNT
	FROM MRTSTG.MKT_EMAIL_SEND_LOG
	WHERE BAT_SEND_STATUS = 'S'
	GROUP BY CAM_ID
	) T2 ON T1.CAM_RID = T2.CAM_ID AND T1.CHNL_TYPE_CD = T2.CHNL_TYPE
	ORDER BY T1.CAM_START_DT
	</select>

	<select id="selectCampaignExeInfoList" parameterType="com.icignal.kepler.report.dto.request.KprReportCampaignReactionReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportCampaignReactionResDto">
	SELECT t5.camId as camId
	     , t5.camNm as camNm
		 , t5.camTerm  as camTerm
		 , t5.startDd AS startDd
		 , t5.endDd	AS endDd
		 , MAX(t5.pushYn) AS pushYn
		 , MAX(t5.emailYn) AS emailYn
		 , MAX(t5.lmsYn) AS lmsYn
		 , MAX(t5.smsYn) AS smsYn
		 , MAX(t5.tgtAmt) AS tgtAmt
		 , ${strColumn}
	FROM (
		SELECT t1.CAM_NM AS camNm
	  		, CONCAT(com.TO_CHAR(t1.CAM_START_DD,'YYYY-MM-DD'), ' ~ ', com.TO_CHAR(t1.CAM_END_DD,'YYYY-MM-DD')) AS camTerm
	  		, com.TO_CHAR(t1.CAM_START_DD,'YYYYMMDD') AS startDd
	  		, com.TO_CHAR(t1.CAM_END_DD,'YYYYMMDD') AS endDd
	  		, CASE
	  			WHEN t3.CHNL_TYPE_CD = 'PUSH' THEN 'Y'
	  		  ELSE 'N' END  AS pushYn
	  		, CASE
	  			WHEN t3.CHNL_TYPE_CD = 'EMAIL' THEN 'Y'
	  		  ELSE 'N' END  AS emailYn
	  		, CASE
	  			WHEN t3.CHNL_TYPE_CD = 'LMS' THEN 'Y'
	  		  ELSE 'N' END  AS lmsYn
	  		, CASE
	  			WHEN t3.CHNL_TYPE_CD = 'SMS' THEN 'Y'
	  		  ELSE 'N' END  AS smsYn
	  		, t4.EXE_TGT_AMT AS tgtAmt
	  		, t1.ID AS camId
		 FROM mkt.MKT_CAM_MST t1
		 JOIN com.MKT_CONTS_CHNL_REL t2 ON t1.ID = t2.CAM_ID
	     JOIN mkt.MKT_CHNL t3 ON t2.MKT_CHNL_ID = t3.ID
		 JOIN mkt.MKT_EXE_INFO_ITEM t4 ON t1.id = t4.CAM_ID
		WHERE t1.flag = 1
		  AND t1.CAM_STATUS_CD = 'E'
	) t5
	WHERE ${strCondWhere}
      and ${strWhere}
 	GROUP BY t5.camNm , t5.camTerm , t5.camId,t5.startDd,t5.endDd
          ${strEndPaging}
	</select>

	<select id="selectCampaignExeInfo" parameterType="com.icignal.kepler.report.dto.request.KprReportCampaignReactionReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportCampaignReactionResDto">
	SELECT t5.camId as camId
	     , t5.camNm as camNm
		 , t5.camTerm  as camTerm
		 , MAX(t5.pushYn) AS pushYn
		 , MAX(t5.emailYn) AS emailYn
		 , MAX(t5.lmsYn) AS lmsYn
		 , MAX(t5.smsYn) AS smsYn
		 , MAX(t5.tgtAmt) AS tgtAmt
	FROM (
		SELECT t1.CAM_NM AS camNm
	  		, CONCAT(com.TO_CHAR(t1.CAM_START_DD,'YYYY-MM-DD'), ' ~ ', com.TO_CHAR(t1.CAM_END_DD,'YYYY-MM-DD')) AS camTerm
	  		, CASE
	  			WHEN t3.CHNL_TYPE_CD = 'PUSH' THEN 'Y'
	  		  ELSE 'N' END  AS pushYn
	  		, CASE
	  			WHEN t3.CHNL_TYPE_CD = 'EMAIL' THEN 'Y'
	  		  ELSE 'N' END  AS emailYn
	  		, CASE
	  			WHEN t3.CHNL_TYPE_CD = 'LMS' THEN 'Y'
	  		  ELSE 'N' END  AS lmsYn
	  		, CASE
	  			WHEN t3.CHNL_TYPE_CD = 'SMS' THEN 'Y'
	  		  ELSE 'N' END  AS smsYn
	  		, t4.EXE_TGT_AMT AS tgtAmt
	  		, t1.ID AS camId
		 FROM mkt.MKT_CAM_MST t1
		 JOIN com.MKT_CONTS_CHNL_REL t2 ON t1.ID = t2.CAM_ID
	     JOIN mkt.MKT_CHNL t3 ON t2.MKT_CHNL_ID = t3.ID
		 JOIN mkt.MKT_EXE_INFO_ITEM t4 ON t1.id = t4.CAM_ID
		WHERE t1.flag = 1
		  AND t1.CAM_STATUS_CD = 'E'
		  AND t1.id = #{camId}
	) t5
 GROUP BY t5.camNm , t5.camTerm , t5.camId
	</select>

	<select id="selectSendCampaignInfo" parameterType="com.icignal.kepler.report.dto.request.KprReportCampaignReactionReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportCampaignReactionResDto">
	  SELECT   RECV_DT as recvDt
		      ,RECV_HH as recvHh
		      ,AGE_CD  as ageCd
		      ,GEND_CD as gendCd
		      ,COUNT(DISTINCT MEM_ID) AS recvCnt
		      ,COUNT(DISTINCT CASE WHEN CHNL_TYPE= 'PUSH'  AND R_SUC_YN = 'Y' THEN MEM_ID ELSE NULL END) AS pushCnt
		      ,COUNT(DISTINCT CASE WHEN CHNL_TYPE= 'EMAIL' AND R_SUC_YN = 'Y' THEN MEM_ID ELSE NULL END) AS emailCnt
		FROM
		    (
		    SELECT  T1.RECV_DT
		           ,T1.RECV_HH
		           ,T2.AGE_CD
		           ,T2.GEND_CD
		           ,T1.CHNL_TYPE
                   ,T1.R_SUC_YN
		           ,T1.MEM_ID
		    FROM
		        (
		        SELECT CAM_ID
		            ,'PUSH' AS CHNL_TYPE
		            , com.TO_CHAR(SEND_SUCES_DT,'YYYYMMDD') AS RECV_DT
		            , com.TO_CHAR(SEND_SUCES_DT,'HH24')     AS RECV_HH
                    , READ_SUCES_YN                     AS R_SUC_YN
		            , RECV_MEM_ID                       AS MEM_ID
		        FROM MRTSTG.MKT_PUSH_SEND_LOG
		        WHERE 1 = 1
		        AND FLAG = 1
		        AND CAM_ID = #{camId}
		          AND SEND_SUCES_YN = 'Y'
		          AND BAT_SEND_STATUS = 'S'
		        UNION ALL
		        SELECT CAM_ID
		             ,'EMAIL' AS CHNL_TYPE
		             , com.TO_CHAR(SEND_SUCES_DT,'YYYYMMDD') AS RECV_DT
		             , com.TO_CHAR(SEND_SUCES_DT,'HH24')     AS RECV_HH
                     , OPEN_SUCES_YN                     AS R_SUC_YN
		             ,RECV_MEM_ID                        AS MEM_ID
		        FROM MRTSTG.MKT_EMAIL_SEND_LOG
		        WHERE 1 = 1
		       AND CAM_ID = #{camId}
		          AND BAT_SEND_STATUS = 'S'
		          AND SEND_SUCES_YN = 'Y'
		        ) T1
		    LEFT OUTER JOIN MRT.D_MBR T2 ON T1.MEM_ID = T2.MBR_NO
		    WHERE 1 = 1
		    <if test='@infavor.icncommon.util.ICNStringUtility@isNotEmpty(ageCd) and ageCd != "ALL"'>
		      AND AGE_CD = #{ageCd}
		    </if>
		    <if test='@infavor.icncommon.util.ICNStringUtility@isNotEmpty(timeCd) and timeCd != "ALL"'>
		      AND RECV_HH= #{timeCd}
		    </if>
		    <if test='@infavor.icncommon.util.ICNStringUtility@isNotEmpty(genCd) and genCd != "ALL"'>
		      AND GEND_CD = #{genCd}
		    </if>
		    )
		GROUP BY RECV_DT
		      ,RECV_HH
		      ,AGE_CD
		      ,GEND_CD
		ORDER BY 1
	</select>
	<select id="selectPurReactionRate" parameterType="com.icignal.kepler.report.dto.request.KprReportCampaignReactionReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportCampaignReactionResDto">
	SELECT YYYYMMDD  AS  yyyyMmDd
		  ,PUR_CNT   AS  purCnt
		  ,RCPT_CNT  AS  rcptCnt
		  ,TXN_AMT   AS  txnAmt
		  ,CASE WHEN RCPT_CNT = 0 THEN 0 ELSE ROUND(TXN_AMT/RCPT_CNT,2) END AS amtRcptCnt
		  ,CASE WHEN PUR_CNT = 0 THEN 0 ELSE ROUND(TXN_AMT/PUR_CNT,2) END AS amtPurCnt
	  FROM
	(
	SELECT CONCAT(SUBSTRING(APPR_DT,1,4), '-', SUBSTRING(APPR_DT,5,2), '-', SUBSTRING(APPR_DT,7,2)) AS  YYYYMMDD
     ,SUM(CASE WHEN TXN_STAT_CD = 'A' THEN PUR_CNT  * 1 ELSE PUR_CNT  * -1 END) AS  PUR_CNT
     ,SUM(CASE WHEN TXN_STAT_CD = 'A' THEN RCPT_CNT * 1 ELSE RCPT_CNT * -1 END) AS  RCPT_CNT
     ,SUM(CASE WHEN TXN_STAT_CD = 'A' THEN TXN_AMT  * 1 ELSE TXN_AMT  * -1 END) AS  TXN_AMT
     ,SUM(CASE WHEN TXN_STAT_CD = 'A' THEN PNT_AMT  * 1 ELSE PNT_AMT  * -1 END) AS  PNT_AMT
	FROM
    (
   		SELECT com.TO_CHAR(T1.APPR_DT,'YYYYMMDD') AS APPR_DT, T2.GEND_CD,T2.AGE_CD,T1.TXN_STAT_CD,COUNT(DISTINCT T2.RID_MBR) AS PUR_CNT, COUNT(T1.RID) AS RCPT_CNT,SUM(T1.TXN_AMT) AS TXN_AMT,SUM(T1.PNT_AMT) AS PNT_AMT
    	FROM MRTSTG.LOY_PNT_TXN T1
    	INNER JOIN
            (
            SELECT B.RID_MBR,B.GEND_CD,B.AGE_CD
            FROM
                (
                SELECT DISTINCT RECV_MEM_ID
                FROM
                    (
                    SELECT RECV_MEM_ID
                    FROM MRTSTG.MKT_PUSH_SEND_LOG
                    WHERE FLAG = 1
                    AND BAT_SEND_STATUS = 'S'
                    AND SEND_SUCES_YN = 'Y'
                    AND CAM_ID = #{camId}
                    UNION ALL
                    SELECT RECV_MEM_ID
                    FROM MRTSTG.MKT_MSG_SEND_LOG
                    WHERE FLAG = 1
                    AND BAT_SEND_STATUS = 'S'
                    AND SEND_SUCES_YN = 'Y'
                    AND CAM_ID = #{camId}
                    UNION ALL
                    SELECT RECV_MEM_ID
                    FROM MRTSTG.MKT_EMAIL_SEND_LOG
                    WHERE FLAG = 1
                    AND BAT_SEND_STATUS = 'S'
                    AND SEND_SUCES_YN = 'Y'
                    AND CAM_ID = #{camId}
                    )
                ) A
                INNER JOIN MRT.D_MBR B ON A.RECV_MEM_ID = B.MBR_NO
            ) T2 ON T1.RID_MBR = T2.RID_MBR
   		WHERE
    	 ( (T1.PNT_TXN_TYPE_1_CD = '100' AND T1.PNT_TXN_TYPE_2_CD = '100')
    	OR (T1.PNT_TXN_TYPE_1_CD = '200' AND T1.PNT_TXN_TYPE_2_CD IN ('210','211')))
    	GROUP BY com.TO_CHAR(T1.APPR_DT,'YYYYMMDD'),T2.GEND_CD,T2.AGE_CD,T1.TXN_STAT_CD
    )
	WHERE 1 = 1
	 <if test='@infavor.icncommon.util.ICNStringUtility@isNotEmpty(genCd) and genCd != "ALL"'>
	AND GEND_CD = #{genCd}
	</if>
	<if test='@infavor.icncommon.util.ICNStringUtility@isNotEmpty(ageCd) and ageCd != "ALL"'>
	AND AGE_CD = #{ageCd}
	</if>
	GROUP BY CONCAT(SUBSTRING(APPR_DT,1,4), '-', SUBSTRING(APPR_DT,5,2), '-', SUBSTRING(APPR_DT,7,2)),GEND_CD,AGE_CD
	)
	ORDER BY 1
	</select>
	
	<select id = "selectColList" parameterType="com.icignal.kepler.report.dto.request.KprReportReqDto" 
	resultType="java.lang.String">
	/*KprReportMapper.selectColList*/
	SELECT  T2.CSEG_STAGE_NM
	FROM MRT.F_CSEG_TRANS T2
	JOIN ANL.ANL_CSEG_STAGE T1 ON T2.CSEG_STAGE_ID = T1.ID AND T2.CSEG_MST_ID = T1.CSEG_MST_ID  AND T1.FLAG = 1
	WHERE T2.CSEG_MST_ID = #{segMstId} 
	AND T2.YYYYMM = #{yyyymm}
	GROUP BY T2.CSEG_STAGE_NM,T1.CSEG_STAGE_INDEX 
	ORDER BY T1.CSEG_STAGE_INDEX DESC
	</select>
	
   <select id = "selectTransReport2" parameterType="com.icignal.kepler.report.dto.request.KprReportReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportTransResDto">
	/*KprReportMapper.selectTransReport2*/
	   SELECT T2.YYYYMM AS yyyymm
			 , T2.CSEG_STAGE_NM AS stageNm
			 , T2.PRE_CSEG_STAGE_NM AS preStageNm
			 , T2.CSEG_TRANS_CNT AS transCnt
			 , T2.CSEG_TRANS_RATE AS transRate
		FROM MRT.F_CSEG_TRANS T2
		JOIN ANL.ANL_CSEG_STAGE T1 ON T2.CSEG_STAGE_ID = T1.ID AND T2.CSEG_MST_ID = T1.CSEG_MST_ID  AND T1.FLAG = 1
		JOIN  ANL.ANL_CSEG_STAGE T3 ON T2.PRE_CSEG_STAGE_ID = T3.ID AND T2.CSEG_MST_ID = T3.CSEG_MST_ID  AND T3.FLAG = 1
		WHERE yyyymm = #{yyyymm} 
	          AND T2.CSEG_MST_ID = #{segMstId} 
		ORDER BY T1.CSEG_STAGE_INDEX DESC, T3.CSEG_STAGE_INDEX DESC
		
	</select>
	
	<select id = "selectColList2" parameterType="com.icignal.kepler.report.dto.request.KprReportReqDto" 
	resultType="java.lang.String">
	/*KprReportMapper.selectColList2*/
		SELECT SUBSTRING(T1.col_cseg_stage_nm,17)
		FROM mrt.f_cseg_cross T1
		JOIN ANL.ANL_CSEG_STAGE T2 ON T1.COL_CSEG_STAGE_ID = T2.ID AND T2.FLAG =1 AND T1.COL_CSEG_MST_ID =T2.CSEG_MST_ID 
		GROUP BY SUBSTRING(T1.col_cseg_stage_nm,17) ,T2.CSEG_STAGE_INDEX 
		ORDER BY T2.CSEG_STAGE_INDEX 
	</select>
	
	
	<select id = "selectCrossReport" parameterType = "com.icignal.kepler.report.dto.request.KprReportReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportCrossResDto">
		/*KprReportMapper.selectCrossReport*/
		
	SELECT yyyymm AS yyyymm
		, row_cseg_stage_nm AS stageNm
		, SUBSTRING(col_cseg_stage_nm,17)  AS rowNm
		, cseg_cross_rate AS crossRate
		, cseg_cross_cnt AS crossCnt
	FROM mrt.f_cseg_cross T1
	JOIN ANL.ANL_CSEG_STAGE T2 ON T1.ROW_CSEG_STAGE_ID = T2.ID AND T2.FLAG =1 AND T1.ROW_CSEG_MST_ID =T2.CSEG_MST_ID 
	JOIN ANL.ANL_CSEG_STAGE T3 ON T1.COL_CSEG_STAGE_ID = T3.ID AND T3.FLAG =1 AND T1.COL_CSEG_MST_ID =T3.CSEG_MST_ID 
	WHERE YYYYMM  = #{yyyymm}
	ORDER BY T2.CSEG_STAGE_INDEX DESC, T3.CSEG_STAGE_INDEX 
	
	</select>
	
	<select id = "selectIncReport" parameterType = "com.icignal.kepler.report.dto.request.KprReportReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportCrossResDto">
	/*KprReportMapper.selectIncReport*/
	
	SELECT t1.yyyymm AS yyyymm
		,  t2.yyyymm AS preYyyymm
		,  SUBSTRING(t1.COL_CSEG_STAGE_NM,17) AS colStageNm 
		,  t1.ROW_CSEG_STAGE_NM AS rowStageNm
		,  t1.CSEG_CROSS_RATE AS crossRate
		,  t1.CSEG_CROSS_CNT AS crossCnt
		,  t2.CSEG_CROSS_CNT 
		,  CASE WHEN t2.CSEG_CROSS_RATE <![CDATA[<]]> t1.CSEG_CROSS_RATE THEN 'U' ELSE 'D' END AS incRate
		,  CASE WHEN t2.CSEG_CROSS_CNT<![CDATA[<]]>  t1.CSEG_CROSS_CNT THEN 'U' ELSE 'D' END AS incCnt
	FROM mrt.F_CSEG_CROSS_INCR t1
	LEFT OUTER JOIN mrt.F_CSEG_CROSS_INCR t2 ON t1.COL_CSEG_STAGE_ID = t2.COL_CSEG_STAGE_ID AND t1.ROW_CSEG_STAGE_ID =t2.ROW_CSEG_STAGE_ID
	JOIN ANL.ANL_CSEG_STAGE T3 ON T1.ROW_CSEG_STAGE_ID = T3.ID AND T3.FLAG =1 AND T1.ROW_CSEG_MST_ID =T3.CSEG_MST_ID 
	JOIN ANL.ANL_CSEG_STAGE T4 ON T1.COL_CSEG_STAGE_ID = T4.ID AND T4.FLAG =1 AND T1.COL_CSEG_MST_ID =T4.CSEG_MST_ID 
	AND t2.YYYYMM = com.TO_CHAR(add_months(com.TO_DATE(t1.yyyymm,'yyyymm'),-1), 'yyyymm')
	WHERE t1.yyyymm = #{yyyymm}
	ORDER BY  t3.CSEG_STAGE_INDEX desc, t4.CSEG_STAGE_INDEX
	
	</select>
	
	
	<select id = "selectPreMonVal" parameterType = "com.icignal.kepler.report.dto.request.KprReportReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportCrossDtlResDto$preMonVal">
	/*KprReportMapper.selectPreMonVal*/
	SELECT t.m1StageNm AS m1StageNm
		 , round(RATIO_TO_REPORT(t.total) over()*100,2) AS lcRate
		 , t.total  AS lcCnt
	FROM (
			SELECT LC_CSEG_STAGE_M1_NM AS m1StageNm
				 , sum(CSEG_LC_CNT) AS total
				 , t2.CSEG_STAGE_INDEX AS stageIndex
			FROM mrt.F_CSEG_CROSS_DTL T1
			JOIN ANL.ANL_CSEG_STAGE T2 ON T1.LC_CSEG_STAGE_M1_ID = T2.ID AND T2.FLAG =1 AND T1.LC_CSEG_MST_ID =T2.CSEG_MST_ID 
			WHERE YYYYMM =#{yyyymm}
			GROUP BY LC_CSEG_STAGE_M1_NM,t2.CSEG_STAGE_INDEX
			) t
	ORDER BY t.stageIndex desc
	
	</select>

	
		<select id = "selectCrossDtlReport" parameterType = "com.icignal.kepler.report.dto.request.KprReportReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportCrossDtlResDto">
	/*KprReportMapper.selectCrossDtlReport*/
	
	SELECT yyyymm AS yyyymm
		 , com.TO_CHAR(add_months(com.TO_DATE(t1.yyyymm,'yyyymm'),-6), 'yyyymm') AS preMonth
		 , LC_CSEG_STAGE_M1_NM AS m1StageNm
		 , LC_CSEG_STAGE_M6_NM AS m6StageNm
		 , SUBSTRING(VS_CSEG_STAGE_M6_NM,17) AS rowNm
		 , CSEG_CROSS_CNT AS crossCnt
		 , CSEG_CROSS_RATE AS crossRate
	FROM mrt.F_CSEG_CROSS_DTL T1
	JOIN ANL.ANL_CSEG_STAGE T2 ON T1.LC_CSEG_STAGE_M1_ID = T2.ID AND T2.FLAG =1 AND T1.LC_CSEG_MST_ID =T2.CSEG_MST_ID 
	JOIN ANL.ANL_CSEG_STAGE T3 ON T1.LC_CSEG_STAGE_M6_ID = T3.ID AND T3.FLAG =1 AND t1.LC_CSEG_MST_ID = t3.CSEG_MST_ID 
	JOIN ANL.ANL_CSEG_STAGE T4 ON T1.VS_CSEG_STAGE_M6_ID = T4.ID AND T4.FLAG =1 
	WHERE YYYYMM = #{yyyymm}
	ORDER BY t2.CSEG_STAGE_INDEX desc, t3.CSEG_STAGE_INDEX DESC, t4.CSEG_STAGE_INDEX 
	
	</select>
	
	
	<select id = "selectSegMstList" parameterType = "com.icignal.kepler.report.dto.request.KprReportReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportSegMstListResDto">
		/*KprReportMapper.selectSegMstList*/
       SELECT id AS segMstId
       , CSEG_NM AS segMstNm
       FROM anl.ANL_CSEG_MST acm WHERE flag =1
	
	</select>
	
	

	
		<select id = "selectTotMbrExcelList" parameterType = "com.icignal.kepler.report.dto.request.KprReportLnlReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportLnlTotMbrResDto">
	/*KprReportMapper.selectTotMbrExcelList*/
	   SELECT CASE WHEN T1.YYYYMMDD IS NULL THEN '월 합계' ELSE com.TO_CHAR(com.TO_DATE(T1.YYYYMMDD,'YYYYMMDD'),'YYYY-MM-DD') END    AS yyyymmdd  
			, T2.CHNL_NM                    AS chnlNm        -- 구분
	        , SUM(SUM(T1.NEW_CNT + T1.TRANS_CNT)) OVER(PARTITION BY CHNL_NM ORDER BY T1.YYYYMMDD ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) + SUM(T1.ONLINE_CNT) + SUM(T1.OFFLINE_CNT) + SUM(T1.DRMNCY_CNT)  AS  totCnt -- 총회원수
 			, SUM(SUM(T1.NEW_CNT + T1.TRANS_CNT)) OVER(PARTITION BY CHNL_NM ORDER BY T1.YYYYMMDD ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) + SUM(T1.ONLINE_CNT) + SUM(T1.OFFLINE_CNT)  AS activeCnt --active         	        
 			, SUM(T1.NEW_CNT)        AS newCnt        -- 신규 회원수
	        , SUM(T1.TRANS_CNT)      AS transCnt      -- 전환 회원수
	        , SUM(T1.ONLINE_CNT)     AS onlineCNt    -- 전환전 자사몰 수 
	        , SUM(T1.OFFLINE_CNT)    AS offlineCnt     -- 전환전 오프라인 수 
	        , SUM(T1.DRMNCY_CNT)     AS drmncyCnt     -- 휴면회원수       
	        , SUM(T1.SESCN_CNT)      AS sescnCnt      -- 탈회회원수
	        , ${strColumn}
	   FROM MRT.F_MBR T1
	   LEFT OUTER JOIN LOY.LOY_CHNL T2 ON T1.RID_MAIN_CHNL = T2.RID
	   WHERE SUBSTRING(T1.YYYYMMDD,1,6) = #{yyyymm} --일자
	   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(chnlType) and chnlType != "ALL"'>
		AND CHNL_TYPE = #{chnlType}
	   </if>
	   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(rid)'>
		AND T1.RID_MAIN_CHNL = #{rid}
	   </if>
	    AND T1.CUST_TYPE_CD IN(#{custTypeI},#{custTypeC},#{custTypeE})
	   		 AND ${strCondWhere}
      		 AND ${strWhere}
	    GROUP BY ROLLUP((T1.YYYYMMDD, T2.CHNL_NM))
        ORDER BY ${strOrderby}
		${strEndPaging}
	
	</select>
	
	
	
	<select id = "selectKprChnlList" parameterType = "com.icignal.kepler.report.dto.request.KprReportLnlReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportLnlTotMbrResDto">
	/*KprReportMapper.selectKprChnlList*/
	SELECT a.CHNL_NO AS chnlNo
		 , a.CHNL_NM AS chnlNm
		 , a.RID AS rid
		 , ${strColumn}
	FROM LOY.LOY_CHNL a
	WHERE 1=1
		AND a.flag = 1
   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(chnlType) and chnlType != "ALL"'>
		AND a.CHNL_TYPE_CD = #{chnlType}
	</if>
	<if test="chnlSubTypeCd != null and chnlSubTypeCd != '' and chnlSubTypeCd=='LNLMALL'"> 
	 	AND a.CHNL_SUB_TYPE_CD IN 'S4'
    </if>
   	<if test="chnlSubTypeCd != null and chnlSubTypeCd != '' and chnlSubTypeCd=='POS'"> 
	 	AND a.CHNL_SUB_TYPE_CD NOT IN ('S4')	
    </if>
   <if test="chnlTypeRid != null and chnlTypeRid != ''"> 
      	AND NOT EXISTS (SELECT 1 FROM LOY.LOY_CHNL c WHERE a.rid = c.rid AND c.rid=#{chnlTypeRid})
	</if>
    	 AND ${strCondWhere}
      	 AND ${strWhere}
	ORDER BY ${strOrderby}
		${strEndPaging}
	
	</select>
	
	<select id ="selectMbrFlagList" parameterType = "com.icignal.kepler.report.dto.request.KprReportLnlReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportLnlMbrFlagResDto">
	        /*KprReportMapper.selectMbrFlagList*/
       SELECT com.TO_CHAR(com.TO_DATE(YYYYMMDD, 'YYYYMMDD'),'YYYY-MM-DD')          AS  yyyymmdd
        	 , T2.CHNL_NM            AS  chnlNm
             , SUM(T1.INTG_MBR_CNT)  AS  intgMbrCnt    --통합회원수(신규+전환)
             , SUM(T1.INTG_MBR2_CNT) AS  intgMbr2Cnt    --통합회원수- 휴면
             , SUM(T1.DRMNCY_CNT)	 AS  drmncyCnt		--(1) 휴면
             , SUM(T1.NEW_CNT)       AS  newCnt        --신규가입회원수
             , SUM(T1.TRANS_CNT) 	 AS  transCnt	   --전환회원수
             , SUM(T1.FIRST_CNT) 	 AS  firstCnt	   --첫구매고객수 당일가입
             , SUM(T1.FIRST2_CNT) 	 AS  first2Cnt	   --첫구매고객수 기존가입
             , SUM(T1.FIRST_CNT) +SUM(T1.FIRST2_CNT) AS firstTotCnt --첫구매고객수 합계
             , SUM(T1.LST_1Y_CNT) 	 AS  lst1YCnt	   --최근1년 구매회원수
             , SUM(T1.LST_6M_CNT) 	 AS  lst6MCnt	   --최근6개월 구매회원수
             , SUM(T1.LST_1M_CNT) 	 AS  lst1Mcnt	   --최근1개월 구매회원수
             , SUM(T1.NEW_CUST_CNT)  AS  newCustCnt		--신규고객수
             , SUM(T1.EXISTING_CNT)  AS  existingCnt	--유효고객수
             , SUM(T1.LAPED_CNT) 	 AS  lapedCnt	   --휴면회원수(3)
             , SUM(T1.GONE_CNT) 	 AS  goneCnt		--이탈고객수
             , SUM(T1.INACTIVE_CNT)  AS  inactiveCnt    --inactive
             , ${strColumn}
        FROM MRT.F_JOINPATH T1
        LEFT OUTER JOIN LOY.LOY_CHNL T2 ON T1.RID_MAIN_CHNL = T2.RID
	    WHERE SUBSTRING(T1.YYYYMMDD,1,6) = #{yyyymm} --일자
	    <if test='@com.icignal.common.util.StringUtil@isNotEmpty(chnlType) and chnlType != "ALL"'>
		AND CHNL_TYPE = #{chnlType}
	    </if>
	    <if test='@com.icignal.common.util.StringUtil@isNotEmpty(rid)'>
	  	AND T1.RID_MAIN_CHNL = #{rid}
	    </if>
	    AND T1.CUST_TYPE_CD IN(#{custTypeI},#{custTypeC},#{custTypeE})
	   		 AND ${strCondWhere}
      		 AND ${strWhere}
        GROUP BY T1.YYYYMMDD, T2.CHNL_NM 
        ORDER BY ${strOrderby}
		${strEndPaging}
	        
	
	</select>
	
	
	<select id ="selectMbrFlagExcelList" parameterType = "com.icignal.kepler.report.dto.request.KprReportLnlReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportLnlMbrFlagResDto">
	           /*KprReportMapper.selectMbrFlagExcelList*/
       SELECT  CASE WHEN T1.YYYYMMDD IS NULL THEN '월 합계' ELSE com.TO_CHAR(com.TO_DATE(T1.YYYYMMDD,'YYYYMMDD'),'YYYY-MM-DD') END    AS yyyymmdd  
        	 , T2.CHNL_NM  AS  chnlNm
             , SUM(T1.INTG_MBR_CNT)  AS  intgMbrCnt    --통합회원수(신규+전환)
             , SUM(T1.INTG_MBR2_CNT) AS  intgMbr2Cnt    --통합회원수- 휴면
             , SUM(T1.DRMNCY_CNT)	 AS  drmncyCnt		--(1) 휴면
             , SUM(T1.NEW_CNT)       AS  newCnt        --신규가입회원수
             , SUM(T1.TRANS_CNT) 	 AS  transCnt	   --전환회원수
             , SUM(T1.FIRST_CNT) 	 AS  firstCnt	   --첫구매고객수 당일가입
             , SUM(T1.FIRST2_CNT) 	 AS  first2Cnt	   --첫구매고객수 기존가입
             , SUM(T1.FIRST_CNT) +SUM(T1.FIRST2_CNT) AS firstTotCnt --첫구매고객수 합계
             , SUM(T1.LST_1Y_CNT) 	 AS  lst1YCnt	   --최근1년 구매회원수
             , SUM(T1.LST_6M_CNT) 	 AS  lst6MCnt	   --최근6개월 구매회원수
             , SUM(T1.LST_1M_CNT) 	 AS  lst1Mcnt	   --최근1개월 구매회원수
             , SUM(T1.NEW_CUST_CNT)  AS  newCustCnt		--신규고객수
             , SUM(T1.EXISTING_CNT)  AS  existingCnt	--유효고객수
             , SUM(T1.LAPED_CNT) 	 AS  lapedCnt	   --휴면회원수(3)
             , SUM(T1.GONE_CNT) 	 AS  goneCnt		--이탈고객수
             , SUM(T1.INACTIVE_CNT)  AS  inactiveCnt    --inactive
             , ${strColumn}
        FROM MRT.F_JOINPATH T1
        LEFT OUTER JOIN LOY.LOY_CHNL T2 ON T1.RID_MAIN_CHNL = T2.RID
	    WHERE SUBSTRING(T1.YYYYMMDD,1,6) = #{yyyymm} --일자
	    <if test='@com.icignal.common.util.StringUtil@isNotEmpty(chnlType) and chnlType != "ALL"'>
		AND CHNL_TYPE = #{chnlType}
	    </if>
	    <if test='@com.icignal.common.util.StringUtil@isNotEmpty(rid)'>
	  	AND T1.RID_MAIN_CHNL = #{rid}
	    </if>
	    AND T1.CUST_TYPE_CD IN(#{custTypeI},#{custTypeC},#{custTypeE})
	   		 AND ${strCondWhere}
      		 AND ${strWhere}
        GROUP BY ROLLUP ((T1.YYYYMMDD, T2.CHNL_NM))
        ORDER BY ${strOrderby}
		${strEndPaging}
	        
	
	</select>
	
		
	
	<select id = "selectMbrPerformExcelList"  parameterType = "com.icignal.kepler.report.dto.request.KprReportLnlReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportLnlMbrPerformResDto">
	 /*KprReportMapper.selectMbrPerformExcelList*/
	SELECT CASE WHEN T1.YYYYMMDD IS NULL THEN '월 합계' ELSE com.TO_CHAR(com.TO_DATE(T1.YYYYMMDD,'YYYYMMDD'),'YYYY-MM-DD') END    AS yyyymmdd  
	     , CHNL_NM								AS chnlNm
	     --new
		 , SUM(NEW_MBR_CNT) 					AS newMbrCnt		--이용회원수
	     , SUM(NEW_SELL_AMT) 					AS newSellAmt		--실적
	     , SUM(NEW_DISCNT_AMT) 					AS newDiscntAmt		--비용
	     , SUM(NEW_SETTLE_AMT) 					AS newSettleAmt		--합계
		 , SUM(NEW_ORD_CNT) 					AS newOrdCnt		--주문건수
		 , DECODE(SUM(NEW_ORD_CNT),0,0,SUM(NEW_SETTLE_AMT) / SUM(NEW_ORD_CNT))  AS newAvgOrdVal --객단가
		 --existing
		 , SUM(EXIST_MBR_CNT) 					AS existMbrCnt		--이용회원수
	     , SUM(EXIST_SELL_AMT) 					AS existSellAmt		--실적
	     , SUM(EXIST_DISCNT_AMT) 				AS existDiscntAmt	--비용
	     , SUM(EXIST_SETTLE_AMT) 				AS existSettleAmt	--합계
		 , SUM(EXIST_ORD_CNT) 					AS existOrdCnt		--주문건수
		 , ROUND(SUM(com.nvl(EXIST_SETTLE_AMT / decode(EXIST_ORD_CNT,0,NULL,EXIST_ORD_CNT),0))) AS existAvgOrdVal --객단가
		 , ${strColumn}
	FROM MRT.F_MBRTYPE T1 
	LEFT OUTER JOIN LOY.LOY_CHNL T2 ON T1.RID_MAIN_CHNL = T2.RID 
	WHERE SUBSTRING(T1.YYYYMMDD,1,6) = #{yyyymm} --일자
	    <if test='@com.icignal.common.util.StringUtil@isNotEmpty(chnlType) and chnlType != "ALL"'>
		AND CHNL_TYPE = #{chnlType}
	    </if>
	    <if test='@com.icignal.common.util.StringUtil@isNotEmpty(rid)'>
	  	AND T1.RID_MAIN_CHNL = #{rid}
	    </if>
	    AND T1.CUST_TYPE_CD IN(#{custTypeI},#{custTypeC},#{custTypeE})
	   	AND ${strCondWhere}
	    AND ${strWhere}
	GROUP BY ROLLUP ((T1.YYYYMMDD, T2.CHNL_NM))
	ORDER BY ${strOrderby}
		${strEndPaging}
	        
	
	</select>
	
	
	<select id = "selectTierMbrList" parameterType = "com.icignal.kepler.report.dto.request.KprReportLnlReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportLnlTierMbrResDto">
	/*KprReportMapper.selectTierMbrList*/
	   SELECT com.TO_CHAR(com.TO_DATE(YYYYMMDD, 'YYYYMMDD'),'YYYY-MM-DD')        AS yyyymmdd      -- 일자   
		    , T2.CHNL_NM  AS chnlNm
		    , SUM(T1.TOT_MBR_CNT) AS totMbrCnt	--통합회원수
		    , SUM(T1.LLM_CNT)     AS llmCnt		-- ll member
		    , SUM(T1.VIP_CNT)     AS vipCnt		--vip
		    , SUM(T1.VVIP_CNT)    AS vvipCnt 	--vvip
	        , ${strColumn}
	   FROM MRT.F_MBR_GRD T1
	   LEFT OUTER JOIN LOY.LOY_CHNL T2 ON T1.RID_MAIN_CHNL = T2.RID
	   WHERE SUBSTRING(T1.YYYYMMDD,1,6) = #{yyyymm} --일자
	   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(chnlType) and chnlType != "ALL"'>
		AND CHNL_TYPE = #{chnlType}
	   </if>
	   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(rid)'>
		AND T1.RID_MAIN_CHNL = #{rid}
	   </if>
	    AND T1.CUST_TYPE_CD IN(#{custTypeI},#{custTypeC},#{custTypeE})
	   		 AND ${strCondWhere}
      		 AND ${strWhere}
       GROUP BY T1.YYYYMMDD, T2.CHNL_NM 
       ORDER BY ${strOrderby}
		${strEndPaging}
	
	</select>
	
	
	<select id = "selectTierMbrExcelList" parameterType = "com.icignal.kepler.report.dto.request.KprReportLnlReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportLnlTierMbrResDto">
	/*KprReportMapper.selectTierMbrExcelList*/
	   SELECT CASE WHEN T1.YYYYMMDD IS NULL THEN '월 합계' ELSE com.TO_CHAR(com.TO_DATE(T1.YYYYMMDD,'YYYYMMDD'),'YYYY-MM-DD') END    AS yyyymmdd  
		    , T2.CHNL_NM  AS chnlNm
		    , SUM(T1.TOT_MBR_CNT) AS totMbrCnt	--통합회원수
		    , SUM(T1.LLM_CNT)     AS llmCnt		-- ll member
		    , SUM(T1.VIP_CNT)     AS vipCnt		--vip
		    , SUM(T1.VVIP_CNT)    AS vvipCnt 	--vvip
	        , ${strColumn}
	   FROM MRT.F_MBR_GRD T1
	   LEFT OUTER JOIN LOY.LOY_CHNL T2 ON T1.RID_MAIN_CHNL = T2.RID
	   WHERE SUBSTRING(T1.YYYYMMDD,1,6) = #{yyyymm} --일자
	   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(chnlType) and chnlType != "ALL"'>
		AND CHNL_TYPE = #{chnlType}
	   </if>
	   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(rid)'>
		AND T1.RID_MAIN_CHNL = #{rid}
	   </if>
	    AND T1.CUST_TYPE_CD IN(#{custTypeI},#{custTypeC},#{custTypeE})
	   		 AND ${strCondWhere}
      		 AND ${strWhere}
       GROUP BY ROLLUP ((T1.YYYYMMDD, T2.CHNL_NM)) 
       ORDER BY ${strOrderby}
		${strEndPaging}
	
	</select>
	
	
		
	<select id = "selectOrdPntList" parameterType = "com.icignal.kepler.report.dto.request.KprReportLnlReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportLnlOrdPntResDto">
	/*KprReportMapper.selectOrdPntList*/
		SELECT com.TO_CHAR(com.TO_DATE(YYYYMMDD, 'YYYYMMDD'),'YYYY-MM-DD') 				AS yyyymmdd
		     , T2.CHNL_NM 					AS chnlNm
		     , SUM(T1.TOT_MBR_CNT) 			AS totMbrCnt			--통합회원수
		     , SUM(T1.PUR_MBR_CNT) 			AS purMbrCnt			--이용회원수
		     --회원
		     , SUM(T1.MBR_ORD_CNT) 			AS mbrOrdCnt			--주문건수
		     , SUM(T1.MBR_SELL_AMT) 		AS mbrSellAmt			--실적
		     , SUM(T1.MBR_DISCNT_AMT) 		AS mbrDiscntAmt			--비용
		     , SUM(T1.MBR_SELTTLE_AMT) 		AS mbrSettleAmt			--합계
		     , SUM(T1.MBR_AVG_SETTLE_AMT) 	AS mbrAvgSettleAmt		--1회주문 Or 영수증당 구매금액
		     --적립포인트
		     , SUM(T1.ACRL_MBR_CNT) 	  	AS acrlMbrCnt			--이용회원수
		     , SUM(T1.ACRL_ORD_CNT) 	  	AS acrlOrdCnt			--주문건수
		     , SUM(T1.ACRL_SELL_AMT) 		AS acrlSellAmt			--매출액
		     , SUM(T1.ACRL_PNT_AMT) 		AS acrlPntAmt			--적립금액
		     --사용포인트
		     , SUM(T1.RDM_MBR_CNT) 			AS rdmMbrCnt			--이용회원수
		     , SUM(T1.RDM_ORD_CNT)			AS rdmOrdCnt			--주문건수
		     , SUM(T1.RDM_SELL_AMT)		    AS rdmSellAmt			--매출액
		     , SUM(T1.RDM_PNT_AMT)			AS rdmPntAmt			--적립금액
		     , ${strColumn}
		FROM MRT.F_ORD_PNT T1
	    LEFT OUTER JOIN LOY.LOY_CHNL T2 ON T1.RID_MAIN_CHNL = T2.RID
	    WHERE SUBSTRING(T1.YYYYMMDD,1,6) = #{yyyymm} --일자
	   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(chnlType) and chnlType != "ALL"'>
		AND CHNL_TYPE = #{chnlType}
	   </if>
	   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(rid)'>
		AND T1.RID_MAIN_CHNL = #{rid}
	   </if>
	    AND T1.CUST_TYPE_CD IN(#{custTypeI},#{custTypeC},#{custTypeE})
	   		 AND ${strCondWhere}
      		 AND ${strWhere}
       GROUP BY T1.YYYYMMDD, T2.CHNL_NM 
       ORDER BY ${strOrderby}
		${strEndPaging}
	
	</select>
	
	
	<select id = "selectOrdPntExcelList" parameterType = "com.icignal.kepler.report.dto.request.KprReportLnlReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportLnlOrdPntResDto">
	/*KprReportMapper.selectOrdPntExcelList*/
		SELECT com.TO_CHAR(com.TO_DATE(T1.YYYYMMDD,'YYYYMMDD'),'YYYY-MM-DD')   AS yyyymmdd  
		     , T2.CHNL_NM 					AS chnlNm
		     , SUM(T1.TOT_MBR_CNT) 			AS totMbrCnt			--통합회원수
		     , SUM(T1.PUR_MBR_CNT) 			AS purMbrCnt			--이용회원수
		     --회원
		     , SUM(T1.MBR_ORD_CNT) 			AS mbrOrdCnt			--주문건수
		     , SUM(T1.MBR_SELL_AMT) 		AS mbrSellAmt			--실적
		     , SUM(T1.MBR_DISCNT_AMT) 		AS mbrDiscntAmt			--비용
		     , SUM(T1.MBR_SELTTLE_AMT) 		AS mbrSettleAmt			--합계
		     , SUM(T1.MBR_AVG_SETTLE_AMT) 	AS mbrAvgSettleAmt		--1회주문 Or 영수증당 구매금액
		     --적립포인트
		     , SUM(T1.ACRL_MBR_CNT) 	  	AS acrlMbrCnt			--이용회원수
		     , SUM(T1.ACRL_ORD_CNT) 	  	AS acrlOrdCnt			--주문건수
		     , SUM(T1.ACRL_SELL_AMT) 		AS acrlSellAmt			--매출액
		     , SUM(T1.ACRL_PNT_AMT) 		AS acrlPntAmt			--적립금액
		     --사용포인트
		     , SUM(T1.RDM_MBR_CNT) 			AS rdmMbrCnt			--이용회원수
		     , SUM(T1.RDM_ORD_CNT)			AS rdmOrdCnt			--주문건수
		     , SUM(T1.RDM_SELL_AMT)		    AS rdmSellAmt			--매출액
		     , SUM(T1.RDM_PNT_AMT)			AS rdmPntAmt			--적립금액
             , ${strColumn}
		FROM MRT.F_ORD_PNT T1
	    LEFT OUTER JOIN LOY.LOY_CHNL T2 ON T1.RID_MAIN_CHNL = T2.RID
	    WHERE SUBSTRING(T1.YYYYMMDD,1,6) = #{yyyymm} --일자
	   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(chnlType) and chnlType != "ALL"'>
		AND CHNL_TYPE = #{chnlType}
	   </if>
	   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(rid)'>
		AND T1.RID_MAIN_CHNL = #{rid}
	   </if>
	    AND T1.CUST_TYPE_CD IN(#{custTypeI},#{custTypeC},#{custTypeE})
	   		 AND ${strCondWhere}
      		 AND ${strWhere}
       GROUP BY T1.YYYYMMDD, T2.CHNL_NM
       UNION ALL 
       	SELECT '전체'
       	     , NULL
       	     , SUM(T1.TOT_MBR_CNT) 			AS totMbrCnt			--통합회원수
		     , SUM(T1.PUR_MBR_CNT) 			AS purMbrCnt			--이용회원수
		     --회원
		     , SUM(T1.MBR_ORD_CNT) 			AS mbrOrdCnt			--주문건수
		     , SUM(T1.MBR_SELL_AMT) 		AS mbrSellAmt			--실적
		     , SUM(T1.MBR_DISCNT_AMT) 		AS mbrDiscntAmt			--비용
		     , SUM(T1.MBR_SELTTLE_AMT) 		AS mbrSettleAmt			--합계
		     , DECODE(SUM(T1.MBR_ORD_CNT), 0,0,ROUND(SUM(T1.MBR_SELTTLE_AMT)/SUM(T1.MBR_ORD_CNT)))  	AS mbrAvgSettleAmt		--1회주문 Or 영수증당 구매금액
		     --적립포인트
		     , SUM(T1.ACRL_MBR_CNT) 	  	AS acrlMbrCnt			--이용회원수
		     , SUM(T1.ACRL_ORD_CNT) 	  	AS acrlOrdCnt			--주문건수
		     , SUM(T1.ACRL_SELL_AMT) 		AS acrlSellAmt			--매출액
		     , SUM(T1.ACRL_PNT_AMT) 		AS acrlPntAmt			--적립금액
		     --사용포인트
		     , SUM(T1.RDM_MBR_CNT) 			AS rdmMbrCnt			--이용회원수
		     , SUM(T1.RDM_ORD_CNT)			AS rdmOrdCnt			--주문건수
		     , SUM(T1.RDM_SELL_AMT)		    AS rdmSellAmt			--매출액
		     , SUM(T1.RDM_PNT_AMT)			AS rdmPntAmt			--적립금액
		     , ${strColumn}
		FROM MRT.F_ORD_PNT T1
	    WHERE SUBSTRING(T1.YYYYMMDD,1,6) = #{yyyymm} --일자
	   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(chnlType) and chnlType != "ALL"'>
		AND CHNL_TYPE = #{chnlType}
	   </if>
	   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(rid)'>
		AND T1.RID_MAIN_CHNL = #{rid}
	   </if>
	    AND T1.CUST_TYPE_CD IN(#{custTypeI},#{custTypeC},#{custTypeE})
	   		 AND ${strCondWhere}
      		 AND ${strWhere}
       ORDER BY ${strOrderby}
		${strEndPaging}
	
	</select>
	
	
		
	<select id = "selectDayTierSaleList" parameterType = "com.icignal.kepler.report.dto.request.KprReportLnlReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportLnlDayTierResDto">
	/*KprReportMapper.selectDayTierSaleList*/
	SELECT com.TO_CHAR(com.TO_DATE(YYYYMMDD, 'YYYYMMDD'),'YYYY-MM-DD')								    AS yyyymmdd  
	     , T2.CHNL_NM 									AS chnlNm
         , SUM(T1.ALL_MBR_CNT)                          AS allMbrCnt       --통합  회원 가입 수 
	     , SUM(T1.ALL_SAL_AMT)                          AS allSalAmt       --전체매출액(비회원+회원)
	     , SUM(T1.ALL_MBR_AMT)                          AS allMbrAmt       --회원매출액
	     , SUM(T1.M_SELL_AMT) 		                    AS mmSellAmt       --회원 실적(총매출)
	     , SUM(T1.M_DISCNT_AMT) 	                    AS mmDiscntAmt     --회원 비용(할인)
	     , SUM(T1.M_SETTLE_AMT) 	                    AS mmSettleAmt     --회원 합계 (껼제금액)
	     , DECODE(SUM(T1.ALL_SAL_AMT),0,0, ROUND(SUM(T1.M_SETTLE_AMT)/ SUM(T1.ALL_SAL_AMT)*100)) AS mmbrAmtRate       --회원매출구성비(%)
	    --전체                                          
	     , SUM(T1.ALL_ORD_CNT)                          AS allOrdCnt       --전체 주문건수
	     , SUM(T1.ALL_SELL_AMT)                         AS allSellAmt      --전체실적(총매출)
	     , SUM(T1.ALL_DISCNT_AMT)                       AS allDiscntAmt    --전체 비용(할인)
	     , SUM(T1.ALL_SETTLE_AMT)                       AS allSettleAmt    --전체 합계 (껼제금액)
         , DECODE(SUM(T1.ALL_ORD_CNT),0,0,ROUND(SUM(T1.ALL_SETTLE_AMT)/ SUM(T1.ALL_ORD_CNT)))        AS allAvgSettleAmt --전체 1회주문당 구매 금액  
	     , SUM(T1.ALL_SKU_QTY)                          AS allSkuQty       --전체 구매SKU
	     , SUM(T1.ALL_SAL_QTY)                          AS allSalQty       --전체 구매상품수량
        , DECODE(SUM(T1.ALL_ORD_CNT),0,0,ROUND(SUM(T1.ALL_SAL_QTY)/SUM(T1.ALL_ORD_CNT)))            AS allAvgSalQty    --전체 주문당 구매 수 
        		, DECODE(SUM(T1.ALL_SAL_QTY),0,0,ROUND(SUM(T1.ALL_SETTLE_AMT)/SUM(T1.ALL_SAL_QTY)))         AS allAvgUnitPrice --평균 구매단가   
   	     --회원
	     , SUM(T1.PUR_MBR_CNT)							AS purMbrCnt	  -- 이용회원수
	     , SUM(T1.M_ORD_CNT) 		                    AS mOrdCnt        --회원 주문건수
	     , SUM(T1.M_SELL_AMT) 		                    AS mSellAmt       --회원 실적(총매출)
	     , SUM(T1.M_DISCNT_AMT) 	                    AS mDiscntAmt     --회원 비용(할인)
	     , SUM(T1.M_SETTLE_AMT) 	                    AS mSettleAmt     --회원 합계 (껼제금액)
	     , SUM(T1.M_AVG_SETTLE_AMT)                     AS mAvgSettleAmt  --회원 1회주문당 구매 금액
	     , SUM(T1.M_SKU_QTY) 		                    AS mSkuQty        --회원 구매SKU
	     , SUM(T1.M_SAL_QTY) 	 	                    AS mSalQty        --회원 구매상품수량
	     , SUM(T1.M_AVG_SAL_QTY) 	                    AS mAvgSalQty     --회원 주문당 구매 수 
	     , SUM(T1.M_AVG_PUR_AMT)		        	    AS mAvgUnitPrice  --평균 구매단가
	      --비회원
	     , SUM(T1.B_ORD_CNT) 		                    AS bOrdCnt          --비회원 주문건수
	     , SUM(T1.B_SELL_AMT) 		                    AS bSellAmt     	--비회원 실적(총매출)
	     , SUM(T1.B_DISCNT_AMT) 	                    AS bDiscntAmt   	--비회원 비용(할인)
	     , SUM(T1.B_SETTLE_AMT) 	                    AS bSettleAmt   	--비회원 합계 (껼제금액)
	     , SUM(T1.B_AVG_SETTLE_AMT)                     AS bAvgSettleAmt	--비회원 1회주문당 구매 금액
	     , SUM(T1.B_SKU_QTY) 		                    AS bSkuQty      	--비회원 구매SKU
	     , SUM(T1.B_SAL_QTY) 		                    AS bSalQty      	--비회원 구매상품수량
	     , SUM(T1.B_AVG_SAL_QTY) 	                    AS bAvgSalQty   	--비회원 주문당 구매 수 
	     , SUM(T1.B_AVG_PUR_AMT)			    	    AS bAvgUnitPrice    --평균 구매단가
	      --llm 등급
	     , SUM(T1.L_MBR_CNT) 		                    AS lMbrCnt	        --llm 이용회원수
	     , SUM(T1.L_ORD_CNT) 		                    AS lOrdCnt		    --llm 주문건수
	     , SUM(T1.L_SELL_AMT) 		                    AS lSellAmt		    --llm 실적(총매출)
	     , SUM(T1.L_DISCNT_AMT) 	                    AS lDiscntAmt		--llm 비용(할인)
	     , SUM(T1.L_SETTLE_AMT) 	                    AS lSettleAmt		--llm 합계 (껼제금액)
	     , SUM(T1.L_AVG_SETTLE_AMT)                     AS lAvgSettleAmt	--llm 1회주문당 구매 금액
	     , SUM(T1.L_UNIT_PRICE) 	                    AS lUnitPrice		--llm 인당 객단가
	     , SUM(T1.L_SKU_QTY) 		                    AS lSkuQty		    --llm 구매SKU
	     , SUM(T1.L_SAL_QTY) 		                    AS lSalQty		    --llm 구매상품수량
	     , SUM(T1.L_AVG_SAL_QTY) 	                    AS lAvgSalQty		--llm 주문당 구매 수 
	     , SUM(T1.L_AVG_PUR_AMT)	    				AS lAvgUnitPrice    --평균 구매단가
	      --VIP등급
	     , SUM(T1.V_MBR_CNT) 		                    AS vMbrCnt	        --VIP이용회원수
	     , SUM(T1.V_ORD_CNT) 		                    AS vOrdCnt		    --VIP주문건수
	     , SUM(T1.V_SELL_AMT) 		                    AS vSellAmt		    --VIP실적(총매출)
	     , SUM(T1.V_DISCNT_AMT) 	                    AS vDiscntAmt		--VIP비용(할인)
	     , SUM(T1.V_SETTLE_AMT) 	                    AS vSettleAmt		--VIP합계 (껼제금액)
	     , SUM(T1.V_AVG_SETTLE_AMT)	                    AS vAvgSettleAmt	--VIP1회주문당 구매 금액
	     , SUM(T1.V_UNIT_PRICE) 	                    AS vUnitPrice		--VIP인당 객단가
	     , SUM(T1.V_SKU_QTY) 		                    AS vSkuQty		    --VIP구매SKU
	     , SUM(T1.V_SAL_QTY) 		                    AS vSalQty		    --VIP구매상품수량
	     , SUM(T1.V_AVG_SAL_QTY) 	                    AS vAvgSalQty		--VIP주문당 구매 수 
	     , SUM(T1.V_AVG_PUR_AMT)	    	            AS vAvgUnitPrice    --평균 구매단가
	      --VVIP등급
	     , SUM(T1.W_MBR_CNT) 		                    AS wMbrCnt	        --VVIP이용회원수
	     , SUM(T1.W_ORD_CNT) 		                    AS wOrdCnt		    --VVIP주문건수
	     , SUM(T1.W_SELL_AMT) 		                    AS wSellAmt		    --VVIP실적(총매출)
	     , SUM(T1.W_DISCNT_AMT) 	                    AS wDiscntAmt		--VVIP비용(할인)
	     , SUM(T1.W_SETTLE_AMT) 	                    AS wSettleAmt		--VVIP합계 (껼제금액)
	     , SUM(T1.W_AVG_SETTLE_AMT)                     AS wAvgSettleAmt	--VVIP1회주문당 구매 금액
	     , SUM(T1.W_UNIT_PRICE) 	                    AS wUnitPrice		--VVIP인당 객단가
	     , SUM(T1.W_SKU_QTY) 		                    AS wSkuQty		    --VVIP구매SKU
	     , SUM(T1.W_SAL_QTY) 		                    AS wSalQty		    --VVIP구매상품수량
	     , SUM(T1.W_AVG_SAL_QTY) 	                    AS wAvgSalQty		--VVIP주문당 구매 수 
	     , SUM(T1.W_AVG_PUR_AMT)	    			    AS wAvgUnitPrice    --평균 구매단가
	     , ${strColumn}
	FROM MRT.F_ORD_GRD T1
	LEFT OUTER JOIN LOY.LOY_CHNL T2 ON T1.RID_MAIN_CHNL = T2.RID
    WHERE SUBSTRING(T1.YYYYMMDD,1,6) = #{yyyymm} --일자
   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(chnlType) and chnlType != "ALL"'>
	AND CHNL_TYPE = #{chnlType}
   </if>
   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(rid)'>
	AND T1.RID_MAIN_CHNL = #{rid}
   </if>
    AND (T1.CUST_TYPE_CD IN(#{custTypeI},#{custTypeC},#{custTypeE})
    or T1.CUST_TYPE_CD = 'Z')
   		 AND ${strCondWhere}
     		 AND ${strWhere}
    GROUP BY T1.YYYYMMDD, T2.CHNL_NM 
    ORDER BY ${strOrderby}
	${strEndPaging}
	
	</select>
	
	
			
	<select id = "selectDayTierSaleList2" parameterType = "com.icignal.kepler.report.dto.request.KprReportLnlReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportLnlDayTierResDto">
	/*KprReportMapper.selectDayTierSaleList2*/
	SELECT SUM(T1.ALL_MBR_CNT)                          AS allMbrCnt       --통합  회원 가입 수 
	     , SUM(T1.ALL_SAL_AMT)                          AS allSalAmt       --전체매출액(비회원+회원)
	     , SUM(T1.ALL_MBR_AMT)                          AS allMbrAmt       --회원매출액
	     , SUM(T1.M_SELL_AMT) 		                    AS mmSellAmt       --회원 실적(총매출)
	     , SUM(T1.M_DISCNT_AMT) 	                    AS mmDiscntAmt     --회원 비용(할인)
	     , SUM(T1.M_SETTLE_AMT) 	                    AS mmSettleAmt     --회원 합계 (껼제금액)
	     , DECODE(SUM(T1.ALL_SAL_AMT),0,0, ROUND(SUM(T1.M_SETTLE_AMT)/ SUM(T1.ALL_SAL_AMT)*100)) AS mmbrAmtRate       --회원매출구성비(%)
	    --전체                                          
	     , SUM(T1.ALL_ORD_CNT)                          AS allOrdCnt       --전체 주문건수
	     , SUM(T1.ALL_SELL_AMT)                         AS allSellAmt      --전체실적(총매출)
	     , SUM(T1.ALL_DISCNT_AMT)                       AS allDiscntAmt    --전체 비용(할인)
	     , SUM(T1.ALL_SETTLE_AMT)                       AS allSettleAmt    --전체 합계 (껼제금액)
	     , DECODE(SUM(T1.ALL_ORD_CNT),0,0,ROUND(SUM(T1.ALL_SETTLE_AMT)/ SUM(T1.ALL_ORD_CNT)))                   AS allAvgSettleAmt --전체 1회주문당 구매 금액
	     , SUM(T1.ALL_SKU_QTY)                          AS allSkuQty       --전체 구매SKU
	     , SUM(T1.ALL_SAL_QTY)                          AS allSalQty       --전체 구매상품수량
	     , SUM(T1.ALL_AVG_SAL_QTY)                      AS allAvgSalQty    --전체 주문당 구매 수 
	     , SUM(T1.ALL_AVG_PUR_AMT)				    	AS allAvgUnitPrice --평균 구매단가
	     --회원
	     , SUM(T1.PUR_MBR_CNT)							AS purMbrCnt	  -- 이용회원수
	     , SUM(T1.M_ORD_CNT) 		                    AS mOrdCnt        --회원 주문건수
	     , SUM(T1.M_SELL_AMT) 		                    AS mSellAmt       --회원 실적(총매출)
	     , SUM(T1.M_DISCNT_AMT) 	                    AS mDiscntAmt     --회원 비용(할인)
	     , SUM(T1.M_SETTLE_AMT) 	                    AS mSettleAmt     --회원 합계 (껼제금액)
	     , DECODE(SUM(T1.M_ORD_CNT),0,0,ROUND(SUM(T1.M_SETTLE_AMT)/SUM(T1.M_ORD_CNT)))                     AS mAvgSettleAmt  --회원 1회주문당 구매 금액
	     , SUM(T1.M_SKU_QTY) 		                    AS mSkuQty        --회원 구매SKU
	     , SUM(T1.M_SAL_QTY) 	 	                    AS mSalQty        --회원 구매상품수량
	     , SUM(T1.M_AVG_SAL_QTY) 	                    AS mAvgSalQty     --회원 주문당 구매 수 
	     , SUM(T1.M_AVG_PUR_AMT)		        	    AS mAvgUnitPrice  --평균 구매단가
	      --비회원
	     , SUM(T1.B_ORD_CNT) 		                    AS bOrdCnt          --비회원 주문건수
	     , SUM(T1.B_SELL_AMT) 		                    AS bSellAmt     	--비회원 실적(총매출)
	     , SUM(T1.B_DISCNT_AMT) 	                    AS bDiscntAmt   	--비회원 비용(할인)
	     , SUM(T1.B_SETTLE_AMT) 	                    AS bSettleAmt   	--비회원 합계 (껼제금액)
	     , DECODE(SUM(T1.B_ORD_CNT),0,0,ROUND(SUM(T1.B_SETTLE_AMT) /SUM(T1.B_ORD_CNT)))                     AS bAvgSettleAmt	--비회원 1회주문당 구매 금액
	     , SUM(T1.B_SKU_QTY) 		                    AS bSkuQty      	--비회원 구매SKU
	     , SUM(T1.B_SAL_QTY) 		                    AS bSalQty      	--비회원 구매상품수량
	     , SUM(T1.B_AVG_SAL_QTY) 	                    AS bAvgSalQty   	--비회원 주문당 구매 수 
	     , SUM(T1.B_AVG_PUR_AMT)			    	    AS bAvgUnitPrice    --평균 구매단가
	      --llm 등급
	     , SUM(T1.L_MBR_CNT) 		                    AS lMbrCnt	        --llm 이용회원수
	     , SUM(T1.L_ORD_CNT) 		                    AS lOrdCnt		    --llm 주문건수
	     , SUM(T1.L_SELL_AMT) 		                    AS lSellAmt		    --llm 실적(총매출)
	     , SUM(T1.L_DISCNT_AMT) 	                    AS lDiscntAmt		--llm 비용(할인)
	     , SUM(T1.L_SETTLE_AMT) 	                    AS lSettleAmt		--llm 합계 (껼제금액)
	     , DECODE(SUM(T1.L_ORD_CNT),0,0,ROUND(SUM(T1.L_SETTLE_AMT) / SUM(T1.L_ORD_CNT)))                    AS lAvgSettleAmt	--llm 1회주문당 구매 금액
	     , SUM(T1.L_UNIT_PRICE) 	                    AS lUnitPrice		--llm 인당 객단가
	     , SUM(T1.L_SKU_QTY) 		                    AS lSkuQty		    --llm 구매SKU
	     , SUM(T1.L_SAL_QTY) 		                    AS lSalQty		    --llm 구매상품수량
	     , SUM(T1.L_AVG_SAL_QTY) 	                    AS lAvgSalQty		--llm 주문당 구매 수 
	     , SUM(T1.L_AVG_PUR_AMT)	    				AS lAvgUnitPrice    --평균 구매단가
	      --VIP등급
	     , SUM(T1.V_MBR_CNT) 		                    AS vMbrCnt	        --VIP이용회원수
	     , SUM(T1.V_ORD_CNT) 		                    AS vOrdCnt		    --VIP주문건수
	     , SUM(T1.V_SELL_AMT) 		                    AS vSellAmt		    --VIP실적(총매출)
	     , SUM(T1.V_DISCNT_AMT) 	                    AS vDiscntAmt		--VIP비용(할인)
	     , SUM(T1.V_SETTLE_AMT) 	                    AS vSettleAmt		--VIP합계 (껼제금액)
	     , DECODE(SUM(T1.V_ORD_CNT),0,0,ROUND(SUM(T1.V_SETTLE_AMT)/SUM(T1.V_ORD_CNT)))	                    AS vAvgSettleAmt	--VIP1회주문당 구매 금액
	     , SUM(T1.V_UNIT_PRICE) 	                    AS vUnitPrice		--VIP인당 객단가
	     , SUM(T1.V_SKU_QTY) 		                    AS vSkuQty		    --VIP구매SKU
	     , SUM(T1.V_SAL_QTY) 		                    AS vSalQty		    --VIP구매상품수량
	     , SUM(T1.V_AVG_SAL_QTY) 	                    AS vAvgSalQty		--VIP주문당 구매 수 
	     , SUM(T1.V_AVG_PUR_AMT)	    	            AS vAvgUnitPrice    --평균 구매단가
	      --VVIP등급
	     , SUM(T1.W_MBR_CNT) 		                    AS wMbrCnt	        --VVIP이용회원수
	     , SUM(T1.W_ORD_CNT) 		                    AS wOrdCnt		    --VVIP주문건수
	     , SUM(T1.W_SELL_AMT) 		                    AS wSellAmt		    --VVIP실적(총매출)
	     , SUM(T1.W_DISCNT_AMT) 	                    AS wDiscntAmt		--VVIP비용(할인)
	     , SUM(T1.W_SETTLE_AMT) 	                    AS wSettleAmt		--VVIP합계 (껼제금액)
	     , DECODE(SUM(T1.W_ORD_CNT),0,0,ROUND(SUM(T1.W_SETTLE_AMT)/SUM(T1.W_ORD_CNT)))                     AS wAvgSettleAmt	--VVIP1회주문당 구매 금액
	     , SUM(T1.W_UNIT_PRICE) 	                    AS wUnitPrice		--VVIP인당 객단가
	     , SUM(T1.W_SKU_QTY) 		                    AS wSkuQty		    --VVIP구매SKU
	     , SUM(T1.W_SAL_QTY) 		                    AS wSalQty		    --VVIP구매상품수량
	     , SUM(T1.W_AVG_SAL_QTY) 	                    AS wAvgSalQty		--VVIP주문당 구매 수 
	     , SUM(T1.W_AVG_PUR_AMT)	    			    AS wAvgUnitPrice    --평균 구매단가
	     , ${strColumn}
	FROM MRT.F_ORD_GRD T1
    WHERE SUBSTRING(T1.YYYYMMDD,1,6) = #{yyyymm} --일자
   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(chnlType) and chnlType != "ALL"'>
	AND CHNL_TYPE = #{chnlType}
   </if>
   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(rid)'>
	AND T1.RID_MAIN_CHNL = #{rid}
   </if>
    AND (T1.CUST_TYPE_CD IN(#{custTypeI},#{custTypeC},#{custTypeE})
    or T1.CUST_TYPE_CD = 'Z')
   		 AND ${strCondWhere}
     		 AND ${strWhere}
	
	</select>
	
	
	
	
	
			
	<select id = "dayTierListExcelDown" parameterType = "com.icignal.kepler.report.dto.request.KprReportLnlReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportLnlDayTierResDto">
	/*KprReportMapper.dayTierListExcelDown*/


	SELECT CASE WHEN T1.YYYYMMDD IS NULL THEN '월 합계' ELSE com.TO_CHAR(com.TO_DATE(T1.YYYYMMDD,'YYYYMMDD'),'YYYY-MM-DD') END    AS yyyymmdd  
	     , T2.CHNL_NM 									AS chnlNm
         , SUM(T1.ALL_MBR_CNT)                          AS allMbrCnt       --통합  회원 가입 수 
	     , SUM(T1.ALL_SAL_AMT)                          AS allSalAmt       --전체매출액(비회원+회원)
	     , SUM(T1.ALL_MBR_AMT)                          AS allMbrAmt       --회원매출액
	     , SUM(T1.M_SELL_AMT) 		                    AS mmSellAmt       --회원 실적(총매출)
	     , SUM(T1.M_DISCNT_AMT) 	                    AS mmDiscntAmt     --회원 비용(할인)
	     , SUM(T1.M_SETTLE_AMT) 	                    AS mmSettleAmt     --회원 합계 (껼제금액)
		 , DECODE(SUM(T1.ALL_SAL_AMT),0,0, ROUND(SUM(T1.M_SETTLE_AMT)/ SUM(T1.ALL_SAL_AMT)*100)) AS mmbrAmtRate 	    --전체                                          
	     , SUM(T1.ALL_ORD_CNT)                          AS allOrdCnt       --전체 주문건수
	     , SUM(T1.ALL_SELL_AMT)                         AS allSellAmt      --전체실적(총매출)
	     , SUM(T1.ALL_DISCNT_AMT)                       AS allDiscntAmt    --전체 비용(할인)
	     , SUM(T1.ALL_SETTLE_AMT)                       AS allSettleAmt    --전체 합계 (껼제금액)
	     , DECODE(SUM(T1.ALL_ORD_CNT),0,0,ROUND(SUM(T1.ALL_SETTLE_AMT)/ SUM(T1.ALL_ORD_CNT)))   AS allAvgSettleAmt --전체 1회주문당 구매 금액
	     , SUM(T1.ALL_SKU_QTY)                          AS allSkuQty       --전체 구매SKU
	     , SUM(T1.ALL_SAL_QTY)                          AS allSalQty       --전체 구매상품수량
 		 , DECODE(SUM(T1.ALL_ORD_CNT),0,0,ROUND(SUM(T1.ALL_SAL_QTY)/SUM(T1.ALL_ORD_CNT)))            AS allAvgSalQty    --전체 주문당 구매 수 	  
 		 , DECODE(SUM(T1.ALL_SAL_QTY),0,0,ROUND(SUM(T1.ALL_SETTLE_AMT)/SUM(T1.ALL_SAL_QTY)))         AS allAvgUnitPrice --평균 구매단가   
 	     --회원
	     , SUM(T1.PUR_MBR_CNT)							AS purMbrCnt	  -- 이용회원수
	     , SUM(T1.M_ORD_CNT) 		                    AS mOrdCnt        --회원 주문건수
	     , SUM(T1.M_SELL_AMT) 		                    AS mSellAmt       --회원 실적(총매출)
	     , SUM(T1.M_DISCNT_AMT) 	                    AS mDiscntAmt     --회원 비용(할인)
	     , SUM(T1.M_SETTLE_AMT) 	                    AS mSettleAmt     --회원 합계 (껼제금액)
	     , SUM(T1.M_AVG_SETTLE_AMT)                     AS mAvgSettleAmt  --회원 1회주문당 구매 금액
	     , SUM(T1.M_SKU_QTY) 		                    AS mSkuQty        --회원 구매SKU
	     , SUM(T1.M_SAL_QTY) 	 	                    AS mSalQty        --회원 구매상품수량
	     , SUM(T1.M_AVG_SAL_QTY) 	                    AS mAvgSalQty     --회원 주문당 구매 수 
	     , SUM(T1.M_AVG_PUR_AMT)		        	    AS mAvgUnitPrice  --평균 구매단가
	      --비회원
	     , SUM(T1.B_ORD_CNT) 		                    AS bOrdCnt          --비회원 주문건수
	     , SUM(T1.B_SELL_AMT) 		                    AS bSellAmt     	--비회원 실적(총매출)
	     , SUM(T1.B_DISCNT_AMT) 	                    AS bDiscntAmt   	--비회원 비용(할인)
	     , SUM(T1.B_SETTLE_AMT) 	                    AS bSettleAmt   	--비회원 합계 (껼제금액)
	     , SUM(T1.B_AVG_SETTLE_AMT)                     AS bAvgSettleAmt	--비회원 1회주문당 구매 금액
	     , SUM(T1.B_SKU_QTY) 		                    AS bSkuQty      	--비회원 구매SKU
	     , SUM(T1.B_SAL_QTY) 		                    AS bSalQty      	--비회원 구매상품수량
	     , SUM(T1.B_AVG_SAL_QTY) 	                    AS bAvgSalQty   	--비회원 주문당 구매 수 
	     , SUM(T1.B_AVG_PUR_AMT)			    	    AS bAvgUnitPrice    --평균 구매단가
	      --llm 등급
	     , SUM(T1.L_MBR_CNT) 		                    AS lMbrCnt	        --llm 이용회원수
	     , SUM(T1.L_ORD_CNT) 		                    AS lOrdCnt		    --llm 주문건수
	     , SUM(T1.L_SELL_AMT) 		                    AS lSellAmt		    --llm 실적(총매출)
	     , SUM(T1.L_DISCNT_AMT) 	                    AS lDiscntAmt		--llm 비용(할인)
	     , SUM(T1.L_SETTLE_AMT) 	                    AS lSettleAmt		--llm 합계 (껼제금액)
	     , SUM(T1.L_AVG_SETTLE_AMT)                     AS lAvgSettleAmt	--llm 1회주문당 구매 금액
	     , SUM(T1.L_UNIT_PRICE) 	                    AS lUnitPrice		--llm 인당 객단가
	     , SUM(T1.L_SKU_QTY) 		                    AS lSkuQty		    --llm 구매SKU
	     , SUM(T1.L_SAL_QTY) 		                    AS lSalQty		    --llm 구매상품수량
	     , SUM(T1.L_AVG_SAL_QTY) 	                    AS lAvgSalQty		--llm 주문당 구매 수 
	     , SUM(T1.L_AVG_PUR_AMT)	    				AS lAvgUnitPrice    --평균 구매단가
	      --VIP등급
	     , SUM(T1.V_MBR_CNT) 		                    AS vMbrCnt	        --VIP이용회원수
	     , SUM(T1.V_ORD_CNT) 		                    AS vOrdCnt		    --VIP주문건수
	     , SUM(T1.V_SELL_AMT) 		                    AS vSellAmt		    --VIP실적(총매출)
	     , SUM(T1.V_DISCNT_AMT) 	                    AS vDiscntAmt		--VIP비용(할인)
	     , SUM(T1.V_SETTLE_AMT) 	                    AS vSettleAmt		--VIP합계 (껼제금액)
	     , SUM(T1.V_AVG_SETTLE_AMT)	                    AS vAvgSettleAmt	--VIP1회주문당 구매 금액
	     , SUM(T1.V_UNIT_PRICE) 	                    AS vUnitPrice		--VIP인당 객단가
	     , SUM(T1.V_SKU_QTY) 		                    AS vSkuQty		    --VIP구매SKU
	     , SUM(T1.V_SAL_QTY) 		                    AS vSalQty		    --VIP구매상품수량
	     , SUM(T1.V_AVG_SAL_QTY) 	                    AS vAvgSalQty		--VIP주문당 구매 수 
	     , SUM(T1.V_AVG_PUR_AMT)	    	            AS vAvgUnitPrice    --평균 구매단가
	      --VVIP등급
	     , SUM(T1.W_MBR_CNT) 		                    AS wMbrCnt	        --VVIP이용회원수
	     , SUM(T1.W_ORD_CNT) 		                    AS wOrdCnt		    --VVIP주문건수
	     , SUM(T1.W_SELL_AMT) 		                    AS wSellAmt		    --VVIP실적(총매출)
	     , SUM(T1.W_DISCNT_AMT) 	                    AS wDiscntAmt		--VVIP비용(할인)
	     , SUM(T1.W_SETTLE_AMT) 	                    AS wSettleAmt		--VVIP합계 (껼제금액)
	     , SUM(T1.W_AVG_SETTLE_AMT)                     AS wAvgSettleAmt	--VVIP1회주문당 구매 금액
	     , SUM(T1.W_UNIT_PRICE) 	                    AS wUnitPrice		--VVIP인당 객단가
	     , SUM(T1.W_SKU_QTY) 		                    AS wSkuQty		    --VVIP구매SKU
	     , SUM(T1.W_SAL_QTY) 		                    AS wSalQty		    --VVIP구매상품수량
	     , SUM(T1.W_AVG_SAL_QTY) 	                    AS wAvgSalQty		--VVIP주문당 구매 수 
	     , SUM(T1.W_AVG_PUR_AMT)	    			    AS wAvgUnitPrice    --평균 구매단가
	     , ${strColumn}
	FROM MRT.F_ORD_GRD T1
	LEFT OUTER JOIN LOY.LOY_CHNL T2 ON T1.RID_MAIN_CHNL = T2.RID
    WHERE SUBSTRING(T1.YYYYMMDD,1,6) = #{yyyymm} --일자
   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(chnlType) and chnlType != "ALL"'>
	AND CHNL_TYPE = #{chnlType}
   </if>
   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(rid)'>
	AND T1.RID_MAIN_CHNL = #{rid}
   </if>
    AND (T1.CUST_TYPE_CD IN(#{custTypeI},#{custTypeC},#{custTypeE})
    or T1.CUST_TYPE_CD = 'Z')
   		 AND ${strCondWhere}
     		 AND ${strWhere}
    GROUP BY T1.YYYYMMDD, T2.CHNL_NM
    UNION ALL
    	SELECT '전체'								    AS yyyymmdd  
	     , NULL 									AS chnlNm
         , SUM(T1.ALL_MBR_CNT)                          AS allMbrCnt       --통합  회원 가입 수 
	     , SUM(T1.ALL_SAL_AMT)                          AS allSalAmt       --전체매출액(비회원+회원)
	     , SUM(T1.ALL_MBR_AMT)                          AS allMbrAmt       --회원매출액
	     , SUM(T1.M_SELL_AMT) 		                    AS mmSellAmt       --회원 실적(총매출)
	     , SUM(T1.M_DISCNT_AMT) 	                    AS mmDiscntAmt     --회원 비용(할인)
	     , SUM(T1.M_SETTLE_AMT) 	                    AS mmSettleAmt     --회원 합계 (껼제금액)
	     , MAX(T1.MBR_AMT_RATE)                         AS mmbrAmtRate      --회원매출구성비(%)
	    --전체                                          
	     , SUM(T1.ALL_ORD_CNT)                          AS allOrdCnt       --전체 주문건수
	     , SUM(T1.ALL_SELL_AMT)                         AS allSellAmt      --전체실적(총매출)
	     , SUM(T1.ALL_DISCNT_AMT)                       AS allDiscntAmt    --전체 비용(할인)
	     , SUM(T1.ALL_SETTLE_AMT)                       AS allSettleAmt    --전체 합계 (껼제금액)
	     , DECODE(SUM(T1.ALL_ORD_CNT),0,0,ROUND(SUM(T1.ALL_SETTLE_AMT)/ SUM(T1.ALL_ORD_CNT)))                   AS allAvgSettleAmt --전체 1회주문당 구매 금액
	     , SUM(T1.ALL_SKU_QTY)                          AS allSkuQty       --전체 구매SKU
	     , SUM(T1.ALL_SAL_QTY)                          AS allSalQty       --전체 구매상품수량
	     , DECODE(SUM(T1.ALL_ORD_CNT),0,0,ROUND(SUM(T1.ALL_SAL_QTY)/SUM(T1.ALL_ORD_CNT)))            AS allAvgSalQty   --전체 주문당 구매 수 
	     , DECODE(SUM(T1.ALL_SAL_QTY),0,0,ROUND(SUM(T1.ALL_SETTLE_AMT)/SUM(T1.ALL_SAL_QTY)))         AS allAvgUnitPrice --평균 구매단가    --평균 구매단가
	     --회원
	     , SUM(T1.PUR_MBR_CNT)							AS purMbrCnt	  -- 이용회원수
	     , SUM(T1.M_ORD_CNT) 		                    AS mOrdCnt        --회원 주문건수
	     , SUM(T1.M_SELL_AMT) 		                    AS mSellAmt       --회원 실적(총매출)
	     , SUM(T1.M_DISCNT_AMT) 	                    AS mDiscntAmt     --회원 비용(할인)
	     , SUM(T1.M_SETTLE_AMT) 	                    AS mSettleAmt     --회원 합계 (껼제금액)
	     , DECODE(SUM(T1.M_ORD_CNT),0,0,ROUND(SUM(T1.M_SETTLE_AMT)/SUM(T1.M_ORD_CNT)))                     AS mAvgSettleAmt  --회원 1회주문당 구매 금액
	     , SUM(T1.M_SKU_QTY) 		                    AS mSkuQty        --회원 구매SKU
	     , SUM(T1.M_SAL_QTY) 	 	                    AS mSalQty        --회원 구매상품수량
	     , SUM(T1.M_AVG_SAL_QTY) 	                    AS mAvgSalQty     --회원 주문당 구매 수 
	     , SUM(T1.M_AVG_PUR_AMT)		        	    AS mAvgUnitPrice  --평균 구매단가
	      --비회원
	     , SUM(T1.B_ORD_CNT) 		                    AS bOrdCnt          --비회원 주문건수
	     , SUM(T1.B_SELL_AMT) 		                    AS bSellAmt     	--비회원 실적(총매출)
	     , SUM(T1.B_DISCNT_AMT) 	                    AS bDiscntAmt   	--비회원 비용(할인)
	     , SUM(T1.B_SETTLE_AMT) 	                    AS bSettleAmt   	--비회원 합계 (껼제금액)
	     , DECODE(SUM(T1.B_ORD_CNT),0,0,ROUND(SUM(T1.B_SETTLE_AMT) /SUM(T1.B_ORD_CNT)))                     AS bAvgSettleAmt	--비회원 1회주문당 구매 금액
	     , SUM(T1.B_SKU_QTY) 		                    AS bSkuQty      	--비회원 구매SKU
	     , SUM(T1.B_SAL_QTY) 		                    AS bSalQty      	--비회원 구매상품수량
	     , SUM(T1.B_AVG_SAL_QTY) 	                    AS bAvgSalQty   	--비회원 주문당 구매 수 
	     , SUM(T1.B_AVG_PUR_AMT)			    	    AS bAvgUnitPrice    --평균 구매단가
	      --llm 등급
	     , SUM(T1.L_MBR_CNT) 		                    AS lMbrCnt	        --llm 이용회원수
	     , SUM(T1.L_ORD_CNT) 		                    AS lOrdCnt		    --llm 주문건수
	     , SUM(T1.L_SELL_AMT) 		                    AS lSellAmt		    --llm 실적(총매출)
	     , SUM(T1.L_DISCNT_AMT) 	                    AS lDiscntAmt		--llm 비용(할인)
	     , SUM(T1.L_SETTLE_AMT) 	                    AS lSettleAmt		--llm 합계 (껼제금액)
	     , DECODE(SUM(T1.L_ORD_CNT),0,0,ROUND(SUM(T1.L_SETTLE_AMT) / SUM(T1.L_ORD_CNT)))                    AS lAvgSettleAmt	--llm 1회주문당 구매 금액
	     , SUM(T1.L_UNIT_PRICE) 	                    AS lUnitPrice		--llm 인당 객단가
	     , SUM(T1.L_SKU_QTY) 		                    AS lSkuQty		    --llm 구매SKU
	     , SUM(T1.L_SAL_QTY) 		                    AS lSalQty		    --llm 구매상품수량
	     , SUM(T1.L_AVG_SAL_QTY) 	                    AS lAvgSalQty		--llm 주문당 구매 수 
	     , SUM(T1.L_AVG_PUR_AMT)	    				AS lAvgUnitPrice    --평균 구매단가
	      --VIP등급
	     , SUM(T1.V_MBR_CNT) 		                    AS vMbrCnt	        --VIP이용회원수
	     , SUM(T1.V_ORD_CNT) 		                    AS vOrdCnt		    --VIP주문건수
	     , SUM(T1.V_SELL_AMT) 		                    AS vSellAmt		    --VIP실적(총매출)
	     , SUM(T1.V_DISCNT_AMT) 	                    AS vDiscntAmt		--VIP비용(할인)
	     , SUM(T1.V_SETTLE_AMT) 	                    AS vSettleAmt		--VIP합계 (껼제금액)
	     , DECODE(SUM(T1.V_ORD_CNT),0,0,ROUND(SUM(T1.V_SETTLE_AMT)/SUM(T1.V_ORD_CNT)))	                    AS vAvgSettleAmt	--VIP1회주문당 구매 금액
	     , SUM(T1.V_UNIT_PRICE) 	                    AS vUnitPrice		--VIP인당 객단가
	     , SUM(T1.V_SKU_QTY) 		                    AS vSkuQty		    --VIP구매SKU
	     , SUM(T1.V_SAL_QTY) 		                    AS vSalQty		    --VIP구매상품수량
	     , SUM(T1.V_AVG_SAL_QTY) 	                    AS vAvgSalQty		--VIP주문당 구매 수 
	     , SUM(T1.V_AVG_PUR_AMT)	    	            AS vAvgUnitPrice    --평균 구매단가
	      --VVIP등급
	     , SUM(T1.W_MBR_CNT) 		                    AS wMbrCnt	        --VVIP이용회원수
	     , SUM(T1.W_ORD_CNT) 		                    AS wOrdCnt		    --VVIP주문건수
	     , SUM(T1.W_SELL_AMT) 		                    AS wSellAmt		    --VVIP실적(총매출)
	     , SUM(T1.W_DISCNT_AMT) 	                    AS wDiscntAmt		--VVIP비용(할인)
	     , SUM(T1.W_SETTLE_AMT) 	                    AS wSettleAmt		--VVIP합계 (껼제금액)
	     , DECODE(SUM(T1.W_ORD_CNT),0,0,ROUND(SUM(T1.W_SETTLE_AMT)/SUM(T1.W_ORD_CNT)))                     AS wAvgSettleAmt	--VVIP1회주문당 구매 금액
	     , SUM(T1.W_UNIT_PRICE) 	                    AS wUnitPrice		--VVIP인당 객단가
	     , SUM(T1.W_SKU_QTY) 		                    AS wSkuQty		    --VVIP구매SKU
	     , SUM(T1.W_SAL_QTY) 		                    AS wSalQty		    --VVIP구매상품수량
	     , SUM(T1.W_AVG_SAL_QTY) 	                    AS wAvgSalQty		--VVIP주문당 구매 수 
	     , SUM(T1.W_AVG_PUR_AMT)	    			    AS wAvgUnitPrice    --평균 구매단가
	     , ${strColumn}
	FROM MRT.F_ORD_GRD T1
    WHERE SUBSTRING(T1.YYYYMMDD,1,6) = #{yyyymm} --일자
   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(chnlType) and chnlType != "ALL"'>
	AND CHNL_TYPE = #{chnlType}
   </if>
   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(rid)'>
	AND T1.RID_MAIN_CHNL = #{rid}
   </if>
    AND (T1.CUST_TYPE_CD IN(#{custTypeI},#{custTypeC},#{custTypeE})
    or T1.CUST_TYPE_CD = 'Z')
   		 AND ${strCondWhere}
     		 AND ${strWhere}
    ORDER BY ${strOrderby}
	${strEndPaging}
	
	</select>
	
	
	
<select id = "selectCamTotList" parameterType = "com.icignal.kepler.report.dto.request.KprReportLnlReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportLnlCampaignResDto">
	/*KprReportMapper.selectCamTotList*/

	SELECT com.TO_CHAR(CAM_SDATE,'YYYY') 	          AS yyyy
	     , RID_CAM                                AS ridCam
	     , CAM_EXE_SEQ                            AS camExeSeq        --실행 차수 
	     , WEEK                                   AS week             --주차
	     , T2.DIV_NM                              AS camOrgNm         --발송팀
	     , CAM_CHNL_CD                            AS camChnlCd        --발송 채널
	     , CAM_NO                                 AS camNo            --캠페인번호
	     , CAM_NM                                 AS camNm            --캠페인명
	     , com.TO_CHAR(CAM_SDATE,'YYYY-MM-DD')        AS camSdate         --시작일자
	     , com.TO_CHAR(CAM_EDATE,'YYYY-MM-DD')        AS camEdate         --종료일자
	     , SUM(TRGT_CNT)                               AS trgtCnt          --타겟수
	     , SUM(CTRL_CNT)                               AS ctrlCnt          --Control수
	     , SUM(SEND_CNT)                               AS sendCnt          --발송수
	     , SUM(SEND_SCSS_CNT)                          AS sendScssCnt      --발송성공수
	     --타겟                                   
	     , SUM(TSAL_MBR_CNT)                           AS tsalMbrCnt       --고객수
	     , SUM(TSAL_VISIT_RATE)                        AS tsalVisitRate    --방문율(%)     
	     , SUM(TSAL_MBR_AMT)                           AS tsalMbrAmt       --매출액
	     , SUM(TSAL_ORD_CNT)                           AS tsalOrdCnt       --주문건수
	     , SUM(TSAL_PER_AMT)                           AS tsalPerAmt       --고객당매출
	     --control                                
	     , SUM(CSAL_MBR_CNT)                           AS csalMbrCnt       --고객수
	     , SUM(CSAL_VISIT_RATE)                        AS csalVisitRate    --방문율(%)
	     , SUM(CSAL_MBR_AMT)                           AS csalMbrAmt       --매출액
	     , SUM(CSAL_ORD_CNT)                           AS csalOrdCnt       --주문건수
	     , SUM(CSAL_PER_AMT)                           AS csalPerAmt       --고객당매출
	     --쿠폰                                   
	     , SUM(CPN_MBR_CNT)                            AS cpnMbrCnt        --고객수
	     , SUM(CPN_USE_RATE)                           AS cpnUseRate       --쿠폰사용율(%)
	     , SUM(CPN_MBR_AMT)                            AS cpnMbrAmt        --매출액
	     , SUM(CPN_ORD_CNT)                            AS cpnOrdCnt        --주문건수
	     , SUM(CPN_PER_AMT)                            AS cpnPerAmt        --고객당매출
	     , ${strColumn}
	FROM MRT.F_CAM T1
	LEFT OUTER JOIN COM.CRM_DIVISION T2 ON T2.RID = T1.CAM_ORG_CD 
    WHERE FLAG = 1
		AND com.TO_CHAR(CAM_SDATE,'YYYY-MM-DD')<![CDATA[>= ]]> #{camSdate} 
		AND com.TO_CHAR(CAM_SDATE,'YYYY-MM-DD')<![CDATA[   <= ]]> #{camSdate2}
   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(rid)'>
		AND T1.RID_CAM = #{rid}
   </if>
	   	AND ${strCondWhere}
	    AND ${strWhere}
	GROUP BY  CAM_SDATE
			, RID_CAM
			, CAM_EXE_SEQ
			, WEEK
			, DIV_NM 
			, CAM_CHNL_CD
			, CAM_NO
			, CAM_NM
			, CAM_SDATE
			, CAM_EDATE
    ORDER BY com.TO_CHAR(CAM_SDATE,'YYYY-MM-DD'), CAM_NO,  CAM_EXE_SEQ ASC
	${strEndPaging}
	
	</select>
	
	
	
	<select id = "selectKprCamlList" parameterType = "com.icignal.kepler.report.dto.request.KprReportLnlReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportLnlCampaignResDto">
	/*KprReportMapper.selectKprCamlList*/

	SELECT DISP_NO AS camNo
	     , CAM_NM as camNm
	     , ID as rid
	     , ${strColumn}
	FROM MKT.MKT_CAM_MST
    WHERE FLAG = 1 
    	AND CAM_STATUS_CD IN ('A','E')
	   	AND ${strCondWhere}
	    AND ${strWhere}
	${strEndPaging}
	
	</select>
	
	
	
	
	<select id = "selectOrdDayWeekList" parameterType = "com.icignal.kepler.report.dto.request.KprReportLnlReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportLnlOrdDayWeekResDto">
	/*KprReportMapper.selectOrdDayWeekList*/	
	SELECT T1.DAY_NM                     AS dayCd
	     , T2.CHNL_NM                    AS chnlNm
	     , SUM(T1.PUR_MBR_CNT) 	         AS purMbrCnt	--이용회원수
	     , SUM(T1.SELL_AMT)              AS sellAmt		--실적
	     , SUM(T1.DISCNT_AMT)            AS discntAmt	--비용
	     , SUM(T1.SETTLE_AMT)           AS settleAmt	--합계
	     , SUM(T1.ORD_CNT)               AS ordCnt		--주문건수
	     , SUM(T1.AVG_SETTLE_AMT)        AS avgSettleAmt	--1회주문당 구매 금액
	     , SUM(UNIT_PRICE) AS unitPrice	--인당 객단가
	     , ${strColumn}
	FROM MRT.F_ORD_DAY_WEEK T1
	LEFT OUTER JOIN LOY.LOY_CHNL T2 ON T1.RID_MAIN_CHNL = T2.RID
	JOIN MRT.D_DAY T3 ON T1.DAY_CD  = T3.DAY_CD 
	WHERE 1=1 
		AND SUBSTRING(T1.YYYYMM,1,6) = #{yyyymm} --일자
	   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(chnlType) and chnlType != "ALL"'>
		AND CHNL_TYPE = #{chnlType}
	   </if>
	   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(rid)'>
		AND T1.RID_MAIN_CHNL = #{rid}
	   </if>
    	AND T1.CUST_TYPE_CD IN(#{custTypeI},#{custTypeC},#{custTypeE})
	  	AND ${strCondWhere}
	    AND ${strWhere}
	GROUP BY T1.DAY_NM 
	       , T2.CHNL_NM 
	       , T3.SEQ
    ORDER BY CHNL_NM DESC, T3.SEQ ASC
	${strEndPaging}
       
	
	
	</select>
		
				
	
		
		
	<select id = "selectOrdAgeList" parameterType = "com.icignal.kepler.report.dto.request.KprReportLnlReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportLnlOrdDayWeekResDto">
	/*KprReportMapper.selectOrdAgeList*/
	
	SELECT T1.AGE_NM                     AS ageCd
	     , T2.CHNL_NM                    AS chnlNm
	     , SUM(T1.PUR_MBR_CNT) 	         AS purMbrCnt	--이용회원수
	     , SUM(T1.SELL_AMT)              AS sellAmt		--실적
	     , SUM(T1.DISCNT_AMT)            AS discntAmt	--비용
	     , SUM(T1.SETTLE_AMT)           AS settleAmt	--합계
	     , SUM(T1.ORD_CNT)               AS ordCnt		--주문건수
	     , SUM(T1.AVG_SETTLE_AMT)        AS avgSettleAmt	--1회주문당 구매 금액
	     , DECODE(SUM(T1.PUR_MBR_CNT), 0,0,SUM(T1.SETTLE_AMT)/SUM(T1.PUR_MBR_CNT)) AS unitPrice	--인당 객단가
	     , ${strColumn}
	FROM MRT.F_ORD_AGE T1
	LEFT OUTER JOIN LOY.LOY_CHNL T2 ON T1.RID_MAIN_CHNL = T2.RID
	WHERE 1=1 
		AND SUBSTRING(T1.YYYYMM,1,6) = #{yyyymm} --일자
	   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(chnlType) and chnlType != "ALL"'>
		AND CHNL_TYPE = #{chnlType}
	   </if>
	   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(rid)'>
		AND T1.RID_MAIN_CHNL = #{rid}
	   </if>
    	AND T1.CUST_TYPE_CD IN(#{custTypeI},#{custTypeC},#{custTypeE})
	  	AND ${strCondWhere}
	    AND ${strWhere}
	GROUP BY T1.AGE_NM
	       , T2.CHNL_NM 
	       , T1.AGE_CD
    ORDER BY T1.AGE_CD
	${strEndPaging}
       
	
	</select>
	
	
	
	<select id = "selectOrdProdList" parameterType = "com.icignal.kepler.report.dto.request.KprReportLnlReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportLnlOrdProdResDto">
	/*KprReportMapper.selectOrdProdList*/
	
	SELECT PROD_ID                AS prodId
	     , ITEM_CD                AS itemCd 
	     , PROD_NM                AS prodNm
	     , com.nvl(SUM(PUR_MBR_CNT),0)       AS purMbrCnt
	     , SUM(ORD_CNT)           AS ordCnt
	     , SUM(SELL_AMT)          AS sellAmt
	     , SUM(DISCNT_AMT)        AS discntAmt
	     , SUM(SETTLE_AMT)        AS settleAmt
	     , ${strColumn}
	FROM MRT.F_ORD_PROD T1
	WHERE 1=1 
		<![CDATA[	
		AND com.TO_DATE(YYYYMMDD,'YYYY-MM-DD')  >=  com.TO_DATE(#{sellDate1} ,'YYYY-MM-DD') 
		AND com.TO_DATE(YYYYMMDD,'YYYY-MM-DD')  <=  com.TO_DATE(#{sellDate2} ,'YYYY-MM-DD') 
		]]>
	   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(chnlType) and chnlType != "ALL"'>
		AND CHNL_TYPE = #{chnlType}
	   </if>
	   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(itemCd)'>
		AND ITEM_CD = #{itemCd}
	   </if>
	    <if test='@com.icignal.common.util.StringUtil@isNotEmpty(prodId)'>
		AND PROD_ID = #{prodId}
	   </if>
	   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(mbrTypeCd) and mbrTypeCd != "ALL"'>
		AND MBR_TYPE_CD = #{mbrTypeCd}
	   </if>
	    <if test='@com.icignal.common.util.StringUtil@isNotEmpty(custTypeI) or @com.icignal.common.util.StringUtil@isNotEmpty(custTypeC) or @com.icignal.common.util.StringUtil@isNotEmpty(custTypeE)'>
	   	AND T1.CUST_TYPE_CD IN(#{custTypeI},#{custTypeC},#{custTypeE})
	   	</if>
	  	AND ${strCondWhere}
	    AND ${strWhere}
	GROUP BY YYYYMMDD
	       , PROD_ID
	       , ITEM_CD
	       , PROD_NM
	ORDER BY ${strOrderby}
	${strEndPaging}       
	
	</select>
	
	<select id = "ordProdListExelDown" parameterType = "com.icignal.kepler.report.dto.request.KprReportLnlReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportLnlOrdProdResDto">
	/*KprReportMapper.ordProdListExelDown*/
	
		SELECT com.nvl(PROD_ID,'전체')                AS prodId
	     , ITEM_CD                AS itemCd 
	     , PROD_NM                AS prodNm
	     , com.nvl(SUM(PUR_MBR_CNT),0)    AS purMbrCnt
	     , SUM(ORD_CNT)           AS ordCnt
	     , SUM(SELL_AMT)          AS sellAmt
	     , SUM(DISCNT_AMT)        AS discntAmt
	     , SUM(SETTLE_AMT)        AS settleAmt
	     , ${strColumn}
	FROM MRT.F_ORD_PROD T1
	WHERE 1=1 
		<![CDATA[	
		AND com.TO_DATE(YYYYMMDD,'YYYY-MM-DD')  >=  com.TO_DATE(#{sellDate1} ,'YYYY-MM-DD') 
		AND com.TO_DATE(YYYYMMDD,'YYYY-MM-DD')  <=  com.TO_DATE(#{sellDate2} ,'YYYY-MM-DD') 
		]]>
      <if test='@com.icignal.common.util.StringUtil@isNotEmpty(chnlType) and chnlType != "ALL"'>
		AND CHNL_TYPE = #{chnlType}
	   </if>
	   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(itemCd)'>
		AND ITEM_CD = #{itemCd}
	   </if>
	    <if test='@com.icignal.common.util.StringUtil@isNotEmpty(prodId)'>
		AND PROD_ID = #{prodId}
	   </if>
	   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(mbrTypeCd) and mbrTypeCd != "ALL"'>
		AND MBR_TYPE_CD = #{mbrTypeCd}
	   </if>
	    <if test='@com.icignal.common.util.StringUtil@isNotEmpty(custTypeI) or @com.icignal.common.util.StringUtil@isNotEmpty(custTypeC) or @com.icignal.common.util.StringUtil@isNotEmpty(custTypeE)'>
	   	AND T1.CUST_TYPE_CD IN(#{custTypeI},#{custTypeC},#{custTypeE})
	   	</if>
	  	AND ${strCondWhere}
	    AND ${strWhere}
	GROUP BY ROLLUP((YYYYMMDD
	       , PROD_ID
	       , ITEM_CD
	       , PROD_NM))
	ORDER BY ${strOrderby}
	${strEndPaging}    
	
	</select>
	
	
	
	
	<select id = "selectOrdCrossList" parameterType = "com.icignal.kepler.report.dto.request.KprReportLnlReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportLnlOrdCrossResDto">
	/*KprReportMapper.selectOrdCrossList*/
	
		
	SELECT  salTypeCd                                             AS salTypeCd      
	      , grdTypeCd                                             AS grdTypeCd      
	      , purMbrCnt                                             AS purMbrCnt      
	      , CASE WHEN purMbrRate > 100 THEN NULL ELSE purMbrRate END       AS purMbrRate     
	      , ordCnt                                                AS ordCnt         
	      , CASE WHEN ordCntRate>100 THEN NULL ELSE  ordCntRate END        AS ordCntRate     
	      , sellAmt                                               AS sellAmt        
	      , discntAmt                                             AS discntAmt      
	      , settleAmt                                             AS settleAmt      
	FROM (                                                                          
	SELECT com.nvl(T1.SAL_TYPE_CD,'TOTAL')                                                                                AS salTypeCd
	     , CASE WHEN T1.SAL_TYPE_CD IS NULL AND T1.GRD_TYPE_CD IS NULL THEN '합계' ELSE  com.nvl(T1.GRD_TYPE_CD,'소계') END   AS grdTypeCd
	     , SUM(T1.PUR_MBR_CNT)                                                                                        AS purMbrCnt
	     , SUM(T1.PUR_MBR_RATE)                                                                                       AS purMbrRate
	     , SUM(T1.ORD_CNT)                                                                                            AS ordCnt
	     , SUM(T1.ORD_CNT_RATE)                                                                                       AS ordCntRate
	     , SUM(T1.SELL_AMT)                                                                                           AS sellAmt
	     , SUM(T1.DISCNT_AMT)                                                                                         AS discntAmt
	     , SUM(T1.SETTLE_AMT)                                                                                         AS settleAmt
	FROM MRT.F_ORD_CROSS T1
	WHERE YYYYMM = #{yyyymm}    
	AND T1.CUST_TYPE_CD IN(#{custTypeI},#{custTypeC},#{custTypeE})
	AND T1.GRD_TYPE_CD IN(#{tierW},#{tierV},#{tierL}) 
	GROUP BY T1.SAL_TYPE_CD, ROLLUP(
	      T1.GRD_TYPE_CD) 
	UNION ALL
	SELECT 'TOTAL'
	     , com.nvl(T1.GRD_TYPE_CD,'합계')
	     , SUM(PUR_MBR_CNT)
	     , ROUND((RATIO_TO_REPORT(SUM(PUR_MBR_CNT)) OVER( PARTITION BY GROUPING(T1.GRD_TYPE_CD)))*100) AS P
	     , SUM(T1.ORD_CNT)
	     , ROUND((RATIO_TO_REPORT(SUM(ORD_CNT)) OVER(PARTITION BY GROUPING(T1.GRD_TYPE_CD)))*100)       AS O
	     , SUM(T1.SELL_AMT)
	     , SUM(T1.DISCNT_AMT)
	     , SUM(T1.SETTLE_AMT)
	FROM  (
			SELECT 'Total'
			      , T1.GRD_TYPE_CD        
                  , T1.PUR_MBR_CNT   
                  , T1.PUR_MBR_RATE  
                  , T1.ORD_CNT       
                  , T1.ORD_CNT_RATE  
                  , T1.SELL_AMT      
                  , T1.DISCNT_AMT    
                  , T1.SETTLE_AMT  
            FROM MRT.F_ORD_CROSS T1
         	WHERE YYYYMM = #{yyyymm}    
			AND T1.CUST_TYPE_CD IN(#{custTypeI},#{custTypeC},#{custTypeE})
			AND T1.GRD_TYPE_CD IN(#{tierW},#{tierV},#{tierL}) 
		)T1
	GROUP BY ROLLUP ((T1.GRD_TYPE_CD))
	)
	ORDER BY DECODE(salTypeCd, 'OFF',1,'ON',2,'ALL',3)
	,  DECODE(grdTypeCd, '합계',1,'소계',2,'W',3,'V',4,'L',5)
	
	</select>
	
	
	<select id = "selectPathDeviceList" parameterType = "com.icignal.kepler.report.dto.request.KprReportLnlReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportLnlPathDeviceResDto">
		/*KprReportMapper.selectPathDeviceList*/
	
	SELECT T3.MARK_NAME       AS sbscPathCd
	     , DECODE(T2.MARK_NAME,NULL,'기타',T2.MARK_NAME)    AS sbscDeviceCd
	     , MAX(NEW_CNT) KEEP(DENSE_RANK LAST ORDER BY YYYYMMDD)   AS newCnt
	     , SUM(NEW_2_CNT)	  AS new2Cnt
	     , SUM(TRANS_CNT)	  AS transCnt
	     , SUM(TOT_MBR_CNT)	  AS totMbrCnt
	     , ${strColumn}
	FROM MRT.F_PATH_DEVICE T1
	LEFT OUTER JOIN COM.COMM_CODE T2 ON T1.SBSC_DEVICE_CD = T2.CODE_NAME AND T2.GROUP_CODE ='LOY_SBSC_DEVICE_CD' AND T2.FLAG =1
	LEFT OUTER JOIN COM.COMM_CODE T3 ON T1.SBSC_PATH_CD  = T3.CODE_NAME AND T3.GROUP_CODE ='LOY_SBSC_PATH_CD' AND T3.FLAG =1
	WHERE 1=1	<![CDATA[	
		AND com.TO_DATE(YYYYMMDD,'YYYY-MM-DD')  >=  com.TO_DATE(#{sellDate1} ,'YYYY-MM-DD') 
		AND com.TO_DATE(YYYYMMDD,'YYYY-MM-DD')  <=  com.TO_DATE(#{sellDate2} ,'YYYY-MM-DD') 
		]]>
	AND T1.CUST_TYPE_CD IN(#{custTypeI},#{custTypeC},#{custTypeE})  
	GROUP BY  T3.MARK_NAME
		     ,T2.MARK_NAME
	ORDER BY ${strOrderby}
	${strEndPaging}   	
		
	</select>
	
	
 <select id = "selectOffPromList" parameterType = "com.icignal.kepler.report.dto.request.KprReportLnlReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportLnlOffPromResDto">
		/*KprReportMapper.selectOffPromList*/
		
	SELECT CC.MARK_NAME		AS chnlType
	     , CHNL_NM               AS chnlNm
	     , PROM_NM               AS promNm
	     , com.TO_CHAR(com.TO_DATE(PROM_DATE,'YYYYMMDD'),'YYYY-MM-DD')             AS promDate
	     , PROD_ID               AS prodId
	     , PROD_NM               AS prodNm
	     , CTG_L_NM              AS ctgLNm
	     , CTG_M_NM              AS ctgMNm
	     , CTG_S_NM              AS ctgSNm
	     , SUM(ALL_ORD_CNT)      AS allOrdCnt
	     , SUM(INTG_ORD_CNT)     AS intgOrdCnt
	     , SUM(M2_ORD_CNT)       AS m2OrdCnt
	     , SUM(TOT_SALE_AMT)     AS totSaleAmt
	     , SUM(SALE_AMT)         AS saleAmt
	     , SUM(ORD_CNT)          AS ordCnt
	     , ${strColumn}
	FROM MRT.F_ORD_OFF_PROM T1
	LEFT OUTER JOIN COM.COMM_CODE CC ON T1.CHNL_SUB_TYPE = CC.CODE_NAME AND GROUP_CODE = 'LOY_CHNL_SUB_TYPE_CD' AND CC.FLAG =1 
	WHERE 1=1	<![CDATA[	
		AND PROM_DATE  >=  #{sellDate1} 
		AND PROM_DATE  <=  #{sellDate2} 
		]]>
	   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(ridProm)'>
		AND RID_PROM = #{ridProm}
	   </if>
	   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(rid)'>
		AND RID_CHNL = #{rid}
	   </if>
	    <if test='@com.icignal.common.util.StringUtil@isNotEmpty(chnlType) and chnlType != "ALL"'>
		AND CHNL_SUB_TYPE = #{chnlType}
	   </if>
	GROUP BY CC.MARK_NAME
		   , CHNL_NM
	       , PROM_NM
	       , PROM_DATE
	       , PROD_ID
	       , PROD_NM
	       , CTG_L_NM
	       , CTG_M_NM
	       , CTG_S_NM
   ORDER BY ${strOrderby}
	${strEndPaging}   	
		
		
 </select>
 
 
 
 
 <select id = "ordCrossExcelDown" parameterType = "com.icignal.kepler.report.dto.request.KprReportLnlReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportLnlOrdCrossResDto">
	/*KprReportMapper.ordCrossExcelDown*/
		
	SELECT  CASE WHEN salTypeCd = 'OFF' THEN 'Offline Only'
			     WHEN salTypeCd = 'ON' THEN 'Online Only'
			     WHEN salTypeCd = 'ALL' THEN <![CDATA[	'Offline && Online']]>
			     ELSE salTypeCd END                                         AS salTypeCd      
	      , CASE WHEN grdTypeCd = 'W' THEN 'VVIP' 
	      		 WHEN grdTypeCd = 'V' THEN 'VIP'
	      		 WHEN grdTypeCd = 'L' THEN 'LL Member'
	      		 ELSE grdTypeCd END                                        AS grdTypeCd      
	      , purMbrCnt                                             AS purMbrCnt      
	      , CASE WHEN purMbrRate > 100 THEN NULL ELSE purMbrRate END       AS purMbrRate     
	      , ordCnt                                                AS ordCnt         
	      , CASE WHEN ordCntRate>100 THEN NULL ELSE  ordCntRate END        AS ordCntRate     
	      , sellAmt                                               AS sellAmt        
	      , discntAmt                                             AS discntAmt      
	      , settleAmt                                             AS settleAmt      
	      , ${strColumn}
	FROM (                                                                          
	SELECT com.nvl(T1.SAL_TYPE_CD,'TOTAL')                                                                                AS salTypeCd
	     , CASE WHEN T1.SAL_TYPE_CD IS NULL AND T1.GRD_TYPE_CD IS NULL THEN '합계' ELSE  com.nvl(T1.GRD_TYPE_CD,'소계') END   AS grdTypeCd
	     , SUM(T1.PUR_MBR_CNT)                                                                                        AS purMbrCnt
	     , SUM(T1.PUR_MBR_RATE)                                                                                       AS purMbrRate
	     , SUM(T1.ORD_CNT)                                                                                            AS ordCnt
	     , SUM(T1.ORD_CNT_RATE)                                                                                       AS ordCntRate
	     , SUM(T1.SELL_AMT)                                                                                           AS sellAmt
	     , SUM(T1.DISCNT_AMT)                                                                                         AS discntAmt
	     , SUM(T1.SETTLE_AMT)                                                                                         AS settleAmt
	FROM MRT.F_ORD_CROSS T1
	WHERE YYYYMM = #{yyyymm}    
	AND T1.CUST_TYPE_CD IN(#{custTypeI},#{custTypeC},#{custTypeE})
	AND T1.GRD_TYPE_CD IN(#{tierW},#{tierV},#{tierL}) 
	GROUP BY T1.SAL_TYPE_CD, ROLLUP(
	      T1.GRD_TYPE_CD) 
	UNION ALL
	SELECT 'Total'
	     , com.nvl(T1.GRD_TYPE_CD,'합계')
	     , SUM(PUR_MBR_CNT)
	     , ROUND((RATIO_TO_REPORT(SUM(PUR_MBR_CNT)) OVER( PARTITION BY GROUPING(T1.GRD_TYPE_CD)))*100) AS P
	     , SUM(T1.ORD_CNT)
	     , ROUND((RATIO_TO_REPORT(SUM(ORD_CNT)) OVER(PARTITION BY GROUPING(T1.GRD_TYPE_CD)))*100)       AS O
	     , SUM(T1.SELL_AMT)
	     , SUM(T1.DISCNT_AMT)
	     , SUM(T1.SETTLE_AMT)
	FROM  (
			SELECT 'TOTAL'
			      , T1.GRD_TYPE_CD        
                  , T1.PUR_MBR_CNT   
                  , T1.PUR_MBR_RATE  
                  , T1.ORD_CNT       
                  , T1.ORD_CNT_RATE  
                  , T1.SELL_AMT      
                  , T1.DISCNT_AMT    
                  , T1.SETTLE_AMT  
            FROM MRT.F_ORD_CROSS T1
         	WHERE YYYYMM = #{yyyymm}    
			AND T1.CUST_TYPE_CD IN(#{custTypeI},#{custTypeC},#{custTypeE})
			AND T1.GRD_TYPE_CD IN(#{tierW},#{tierV},#{tierL}) 
		)T1
	GROUP BY ROLLUP ((T1.GRD_TYPE_CD))
	)
	ORDER BY DECODE(salTypeCd, 'Offline Only',1,'Online Only',2, <![CDATA[	'Offline && Online']]>,3)
	,  DECODE(grdTypeCd, '합계',1,'소계',2,'VVIP',3,'VIP',4,'LL Member',5)
	
	</select>
	
	
	
	<select id = "selectKprPromList" parameterType = "com.icignal.kepler.report.dto.request.KprReportLnlReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportLnlOffPromResDto">
		/*KprReportMapper.selectKprPromList*/
			
		SELECT RID AS ridProm
		     , PROM_CODE AS promCd
			 , PROM_NAME AS promNm
			  , ${strColumn}
		FROM LOY.LOY_LNL_PROM LLP
		WHERE ONOFF_FG  = 1 
			  AND FLAG =1	  	
			  AND ${strCondWhere}
		      AND ${strWhere}
		ORDER BY ${strOrderby}
		${strEndPaging}   	
	
	
		
 	</select>
 	
 	
	<select id = "offPromExcelDown" parameterType = "com.icignal.kepler.report.dto.request.KprReportLnlReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportLnlOffPromResDto">
		/*KprReportMapper.offPromExcelDown*/
	
	SELECT DECODE(CC.MARK_NAME ,NULL,'합계',CC.MARK_NAME)		AS chnlType
	     , CHNL_NM               AS chnlNm
	     , PROM_NM               AS promNm
	     , com.TO_CHAR(com.TO_DATE(PROM_DATE,'YYYYMMDD'),'YYYY-MM-DD')             AS promDate
	     , PROD_ID               AS prodId
	     , PROD_NM               AS prodNm
	     , CTG_L_NM              AS ctgLNm
	     , CTG_M_NM              AS ctgMNm
	     , CTG_S_NM              AS ctgSNm
	     , SUM(ALL_ORD_CNT)      AS allOrdCnt
	     , SUM(INTG_ORD_CNT)     AS intgOrdCnt
	     , SUM(M2_ORD_CNT)       AS m2OrdCnt
	     , SUM(TOT_SALE_AMT)     AS totSaleAmt
	     , SUM(SALE_AMT)         AS saleAmt
	     , SUM(ORD_CNT)          AS ordCnt
	     , ${strColumn}
	FROM MRT.F_ORD_OFF_PROM T1
	LEFT OUTER JOIN COM.COMM_CODE CC ON T1.CHNL_SUB_TYPE = CC.CODE_NAME AND GROUP_CODE = 'LOY_CHNL_SUB_TYPE_CD' AND CC.FLAG =1 
	WHERE 1=1	<![CDATA[	
		AND com.TO_DATE(PROM_DATE,'YYYY-MM-DD')  >=  com.TO_DATE(#{sellDate1} ,'YYYY-MM-DD') 
		AND com.TO_DATE(PROM_DATE,'YYYY-MM-DD')  <=  com.TO_DATE(#{sellDate2} ,'YYYY-MM-DD') 
		]]>
	   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(ridProm)'>
		AND RID_PROM = #{ridProm}
	   </if>
	   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(rid)'>
		AND RID_CHNL = #{rid}
	   </if>
	    <if test='@com.icignal.common.util.StringUtil@isNotEmpty(chnlType) and chnlType != "ALL"'>
		AND CHNL_SUB_TYPE = #{chnlType}
	   </if>
	GROUP BY ROLLUP(( CHNL_NM
	       , PROM_NM
	       , PROM_DATE
	       , PROD_ID
	       , PROD_NM
	       , CTG_L_NM
	       , CTG_M_NM
	       , CTG_S_NM
	       , CC.MARK_NAME ))
   ORDER BY ${strOrderby}
	${strEndPaging}   	
		
 	</select>
 	
 	
 	<select id = "ordDayWeekExcelDown" parameterType = "com.icignal.kepler.report.dto.request.KprReportLnlReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportLnlOrdDayWeekResDto">
	/*KprReportMapper.ordDayWeekExcelDown*/
	
	SELECT  DECODE(T1.DAY_NM,NULL,'합계',T1.DAY_NM)              AS dayCd
	     , T2.CHNL_NM                    AS chnlNm
	     , SUM(T1.PUR_MBR_CNT) 	         AS purMbrCnt	--이용회원수
	     , SUM(T1.SELL_AMT)              AS sellAmt		--실적
	     , SUM(T1.DISCNT_AMT)            AS discntAmt	--비용
	     , SUM(T1.SETTLE_AMT)           AS settleAmt	--합계
	     , SUM(T1.ORD_CNT)               AS ordCnt		--주문건수
	     , SUM(T1.AVG_SETTLE_AMT)        AS avgSettleAmt	--1회주문당 구매 금액
	     , SUM(UNIT_PRICE) AS unitPrice	--인당 객단가
	     , ${strColumn}
	FROM MRT.F_ORD_DAY_WEEK T1
	LEFT OUTER JOIN LOY.LOY_CHNL T2 ON T1.RID_MAIN_CHNL = T2.RID
	JOIN MRT.D_DAY T3 ON T1.DAY_CD  = T3.DAY_CD 
	WHERE 1=1 
		AND SUBSTRING(T1.YYYYMM,1,6) = #{yyyymm} --일자
	   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(chnlType) and chnlType != "ALL"'>
		AND CHNL_TYPE = #{chnlType}
	   </if>
	   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(rid)'>
		AND T1.RID_MAIN_CHNL = #{rid}
	   </if>
    	AND T1.CUST_TYPE_CD IN(#{custTypeI},#{custTypeC},#{custTypeE})
	  	AND ${strCondWhere}
	    AND ${strWhere}
	GROUP BY ROLLUP((T1.DAY_NM 
	       , T2.CHNL_NM 
	       , T3.SEQ))
    ORDER BY CHNL_NM DESC, T3.SEQ ASC
	${strEndPaging}
       
	</select>
 
 
 <select id = "ordAgeExcelDown" parameterType = "com.icignal.kepler.report.dto.request.KprReportLnlReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportLnlOrdDayWeekResDto">
	/*KprReportMapper.ordAgeExcelDown*/
	
	SELECT T1.AGE_NM                    AS ageCd
	     , T2.CHNL_NM                    AS chnlNm
	     , SUM(T1.PUR_MBR_CNT) 	         AS purMbrCnt	--이용회원수
	     , SUM(T1.SELL_AMT)              AS sellAmt		--실적
	     , SUM(T1.DISCNT_AMT)            AS discntAmt	--비용
	     , SUM(T1.SETTLE_AMT)           AS settleAmt	--합계
	     , SUM(T1.ORD_CNT)               AS ordCnt		--주문건수
	     , SUM(T1.AVG_SETTLE_AMT)        AS avgSettleAmt	--1회주문당 구매 금액
	     , SUM(UNIT_PRICE) AS unitPrice	--인당 객단가
	     , T1.AGE_CD
	FROM MRT.F_ORD_AGE T1
	LEFT OUTER JOIN LOY.LOY_CHNL T2 ON T1.RID_MAIN_CHNL = T2.RID
	WHERE 1=1 
		AND SUBSTRING(T1.YYYYMM,1,6) = #{yyyymm} --일자
	   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(chnlType) and chnlType != "ALL"'>
		AND CHNL_TYPE = #{chnlType}
	   </if>
	   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(rid)'>
		AND T1.RID_MAIN_CHNL = #{rid}
	   </if>
    	AND T1.CUST_TYPE_CD IN(#{custTypeI},#{custTypeC},#{custTypeE})
	  	AND ${strCondWhere}
	    AND ${strWhere}
	GROUP BY T1.AGE_NM
	       , T2.CHNL_NM
	       , T1.AGE_CD
	UNION ALL 
	SELECT '전체'
	     , NULL
	     , SUM(T1.PUR_MBR_CNT) 	         AS purMbrCnt	--이용회원수
	     , SUM(T1.SELL_AMT)              AS sellAmt		--실적
	     , SUM(T1.DISCNT_AMT)            AS discntAmt	--비용
	     , SUM(T1.SETTLE_AMT)           AS settleAmt	--합계
	     , SUM(T1.ORD_CNT)               AS ordCnt		--주문건수
	     , DECODE(SUM(T1.ORD_CNT) ,0,0, ROUND(SUM(T1.SETTLE_AMT)/SUM(T1.ORD_CNT)))        AS avgSettleAmt	--1회주문당 구매 금액
	     , SUM(UNIT_PRICE) AS unitPrice	--인당 객단가
	     , NULL
	FROM MRT.F_ORD_AGE T1
	WHERE 1=1       
	    AND SUBSTRING(T1.YYYYMM,1,6) = #{yyyymm} --일자
	   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(chnlType) and chnlType != "ALL"'>
		AND CHNL_TYPE = #{chnlType}
	   </if>
	   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(rid)'>
		AND T1.RID_MAIN_CHNL = #{rid}
	   </if>
    	AND T1.CUST_TYPE_CD IN(#{custTypeI},#{custTypeC},#{custTypeE})
	  	AND ${strCondWhere}
	    AND ${strWhere}
    ORDER BY 10
	${strEndPaging}
	
	</select>
	
	
	 <select id = "selectOrdAgeList2" parameterType = "com.icignal.kepler.report.dto.request.KprReportLnlReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportLnlOrdDayWeekResDto">
	/*KprReportMapper.selectOrdAgeList2*/
	SELECT SUM(T1.PUR_MBR_CNT) 	         AS purMbrCnt	--이용회원수
	     , SUM(T1.SELL_AMT)              AS sellAmt		--실적
	     , SUM(T1.DISCNT_AMT)            AS discntAmt	--비용
	     , SUM(T1.SETTLE_AMT)           AS settleAmt	--합계
	     , SUM(T1.ORD_CNT)               AS ordCnt		--주문건수
	     , DECODE(SUM(T1.ORD_CNT) ,0,0, ROUND(SUM(T1.SETTLE_AMT)/SUM(T1.ORD_CNT)))        AS avgSettleAmt	--1회주문당 구매 금액
   	     , DECODE(SUM(T1.PUR_MBR_CNT), 0,0,SUM(T1.SETTLE_AMT)/SUM(T1.PUR_MBR_CNT)) AS unitPrice	--인당 객단가
	     , ${strColumn}
	FROM MRT.F_ORD_AGE T1
	LEFT OUTER JOIN LOY.LOY_CHNL T2 ON T1.RID_MAIN_CHNL = T2.RID
	WHERE 1=1 
		AND SUBSTRING(T1.YYYYMM,1,6) = #{yyyymm} --일자
	   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(chnlType) and chnlType != "ALL"'>
		AND CHNL_TYPE = #{chnlType}
	   </if>
	   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(rid)'>
		AND T1.RID_MAIN_CHNL = #{rid}
	   </if>
    	AND T1.CUST_TYPE_CD IN(#{custTypeI},#{custTypeC},#{custTypeE})
	  	AND ${strCondWhere}
	    AND ${strWhere}
	
	</select>
	
	
	
	<select id = "selectOrdPntList2" parameterType = "com.icignal.kepler.report.dto.request.KprReportLnlReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportLnlOrdPntResDto">
	/*KprReportMapper.selectOrdPntList2*/
		SELECT SUM(T1.TOT_MBR_CNT) 			AS totMbrCnt			--통합회원수
		     , SUM(T1.PUR_MBR_CNT) 			AS purMbrCnt			--이용회원수
		     --회원
		     , SUM(T1.MBR_ORD_CNT) 			AS mbrOrdCnt			--주문건수
		     , SUM(T1.MBR_SELL_AMT) 		AS mbrSellAmt			--실적
		     , SUM(T1.MBR_DISCNT_AMT) 		AS mbrDiscntAmt			--비용
		     , SUM(T1.MBR_SELTTLE_AMT) 		AS mbrSettleAmt			--합계
		     , DECODE(SUM(T1.MBR_ORD_CNT), 0,0,ROUND(SUM(T1.MBR_SELTTLE_AMT)/SUM(T1.MBR_ORD_CNT)))  	AS mbrAvgSettleAmt		--1회주문 Or 영수증당 구매금액
		     --적립포인트
		     , SUM(T1.ACRL_MBR_CNT) 	  	AS acrlMbrCnt			--이용회원수
		     , SUM(T1.ACRL_ORD_CNT) 	  	AS acrlOrdCnt			--주문건수
		     , SUM(T1.ACRL_SELL_AMT) 		AS acrlSellAmt			--매출액
		     , SUM(T1.ACRL_PNT_AMT) 		AS acrlPntAmt			--적립금액
		     --사용포인트
		     , SUM(T1.RDM_MBR_CNT) 			AS rdmMbrCnt			--이용회원수
		     , SUM(T1.RDM_ORD_CNT)			AS rdmOrdCnt			--주문건수
		     , SUM(T1.RDM_SELL_AMT)		    AS rdmSellAmt			--매출액
		     , SUM(T1.RDM_PNT_AMT)			AS rdmPntAmt			--적립금액
		     , ${strColumn}
		FROM MRT.F_ORD_PNT T1
	    WHERE SUBSTRING(T1.YYYYMMDD,1,6) = #{yyyymm} --일자
	   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(chnlType) and chnlType != "ALL"'>
		AND CHNL_TYPE = #{chnlType}
	   </if>
	   <if test='@com.icignal.common.util.StringUtil@isNotEmpty(rid)'>
		AND T1.RID_MAIN_CHNL = #{rid}
	   </if>
	    AND T1.CUST_TYPE_CD IN(#{custTypeI},#{custTypeC},#{custTypeE})
	   		 AND ${strCondWhere}
      		 AND ${strWhere}
	
	</select>
	
	<select id = "getMbrPerformList2"  parameterType = "com.icignal.kepler.report.dto.request.KprReportLnlReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportLnlMbrPerformResDto">
	 /*KprReportMapper.selectMbrPerformList*/
	SELECT 
	 	   SUM(NEW_MBR_CNT) 					AS newMbrCnt		--이용회원수
	     , SUM(NEW_SELL_AMT) 					AS newSellAmt		--실적
	     , SUM(NEW_DISCNT_AMT) 					AS newDiscntAmt		--비용
	     , SUM(NEW_SETTLE_AMT) 					AS newSettleAmt		--합계
		 , SUM(NEW_ORD_CNT) 					AS newOrdCnt		--주문건수
	      , DECODE(SUM(NEW_SETTLE_AMT), 0,0,ROUND(SUM(NEW_SETTLE_AMT)/SUM(NEW_ORD_CNT)))  AS newAvgOrdVal --객단가
		 , SUM(EXIST_MBR_CNT) 					AS existMbrCnt		--이용회원수
	     , SUM(EXIST_SELL_AMT) 					AS existSellAmt		--실적
	     , SUM(EXIST_DISCNT_AMT) 				AS existDiscntAmt	--비용
	     , SUM(EXIST_SETTLE_AMT) 				AS existSettleAmt	--합계
		 , SUM(EXIST_ORD_CNT) 					AS existOrdCnt		--주문건수
		 , DECODE(SUM(EXIST_SETTLE_AMT), 0,0,ROUND(SUM(EXIST_SETTLE_AMT)/SUM(EXIST_ORD_CNT)))  AS existAvgOrdVal --객단가
        , ${strColumn}
	FROM MRT.F_MBRTYPE T1 
	LEFT OUTER JOIN LOY.LOY_CHNL T2 ON T1.RID_MAIN_CHNL = T2.RID 
	WHERE SUBSTRING(T1.YYYYMMDD,1,6) = #{yyyymm} --일자
	    <if test='@com.icignal.common.util.StringUtil@isNotEmpty(chnlType) and chnlType != "ALL"'>
		AND CHNL_TYPE = #{chnlType}
	    </if>
	    <if test='@com.icignal.common.util.StringUtil@isNotEmpty(rid)'>
	  	AND T1.RID_MAIN_CHNL = #{rid}
	    </if>
	    AND T1.CUST_TYPE_CD IN(#{custTypeI},#{custTypeC},#{custTypeE})
	      		 AND ${strCondWhere}
     		 AND ${strWhere}
   </select>
   
   <!-- /**************************************
    -   관련 파일        : KprReportService.java
    ============================================
    -   제목             : 추천인 리포트 조회
    -   설명             : [정형 Report > 추천인 리포트] 추천인 리포트의 리스트를 조회한다
    -   결과형태         : 복수
    ============================================
    -   입력			 :
    -	출력			 :
    -   메모             : * 3번째 SELECT문까지 두어서 '추천자명 조회'를 한 이유: 2번째 select문(group by와 decrypt가 이뤄지는)의 where에서 이름검색을 했더니 속도가 너무 느림
    ============================================
    -   작성자           : jb.kim
    -   작성일           : 2021.02.26
    ***************************************/ -->
    <select id = "selectRecommReportList" parameterType="com.icignal.kepler.report.dto.request.KprReportRecommListReqDto"
    		resultType="com.icignal.kepler.report.dto.response.KprReportRecommListResDto">
    	/* KprReportMapper.selectRecommReportList */
    	SELECT 		 t.rcmmd_No			        AS rcmmdNo           
		           	,t.recommender_Nm	        AS recommenderNm     
					,t.mbr_No 			        AS mbrNo             
					,t.cust_No 			        AS custNo            
					,t.ridMbr					AS ridMbr            
					,t.mbr_Type_Cd 		        AS mbrTypeCd 	      
					,t.mbr_Type_Cd_Nm	        AS mbrTypeCdNm       
					,t.cust_Type_Cd 	        AS custTypeCd 	      
					,t.cust_Type_Cd_Nm	        AS custTypeCdNm
					,t.cust_Stat_Cd				AS custStatCd     
					,t.cust_Stat_Cd_Nm  		AS custStatCdNm
					,t.tier_Nm 			        AS tierNm
					,t.gen_Cd 			        AS genCd		      
					,t.gen_Cd_Nm		        AS genCdNm           
					,t.web_Id			        AS webId            
		            ,CASE WHEN t.cust_Stat_Cd = 'C' THEN '' ELSE t.hhp 		END		        AS hhp               
		            ,CASE WHEN t.cust_Stat_Cd = 'C' THEN '' ELSE t.email	END		        AS email             
		            ,t.recomm_Count		        AS recommCount       
		            ,st.sumAcrlAmt				AS accumulPointAmt   
		       		,RANK() OVER (ORDER BY t.recomm_Count DESC) AS ranking
		       		,com.nvl(t.agre_Yn,'N')					AS agreYn
		       		,${strColumn}
		FROM (
		          SELECT		 T1.RCMMD_NO		AS rcmmd_No
				           		,T3.CUST_NM			AS recommender_Nm
				           		,T3.CUST_STAT_CD	AS cust_Stat_Cd
								,C6.MARK_NAME		as cust_Stat_Cd_Nm
								,T2.MBR_NO 			AS mbr_No
								,T2.RID 			AS ridMbr
								,T3.CUST_NO 		AS cust_No
								,T2.MBR_TYPE_CD 	AS mbr_Type_Cd 	
								,C1.MARK_NAME		AS mbr_Type_Cd_Nm
								,T3.CUST_TYPE_CD	AS cust_Type_Cd
								,C5.MARK_NAME		AS cust_Type_Cd_Nm
								,T6.TIER_NM 		AS tier_Nm 		
								,T3.GEN_CD 			AS gen_Cd 		
								,C4.MARK_NAME		AS gen_Cd_Nm
								,T5.USER_ID			AS web_Id
					           	,T3.HHP				AS hhp
					            ,T3.EMAIL			AS email
					            ,C7.AGRE_YN 		AS agre_Yn
					            ,COUNT(*)  			AS recomm_Count
			      FROM LOY.LOY_MBR_RCMMD                   T1
			      	INNER JOIN LOY.LOY_CUST                T3 ON T1.RCMMD_NO = T3.CUST_NO AND T3.FLAG = 1
			        INNER JOIN LOY.LOY_MBR                 T2 ON T3.RID = T2.RID_CUST AND T2.FLAG = 1
			        <if test="(mbrMgtAttr != null and mbrMgtAttr != '') and (mbrMgtAttrVal != null and mbrMgtAttrVal != '')">	 
			        LEFT OUTER JOIN LOY.LOY_MBR_MGT_ATTR   T4 ON T2.RID      = T4.RID_MBR   AND T4.FLAG = 1
			        LEFT OUTER JOIN com.COMM_CODE		   C2 ON T4.ATTR_CD = C2.CODE_NAME 		AND C2.GROUP_CODE = 'LOY_MBR_MGT_ATTR_CD' AND C2.FLAG = 1
			        LEFT OUTER JOIN com.COMM_CODE 		   C3 ON T4.ATTR_SUB_CD = C3.CODE_NAME  AND C3.GROUP_CODE = 'LOY_MBR_MGT_ATTR_SUB_CD' AND C3.FLAG = 1
			        </if>
			        LEFT OUTER JOIN LOY.LOY_CUST_LOGIN_INF T5 ON T3.RID 	 = T5.RID_CUST  AND T5.FLAG = 1 AND T5.REP_YN = 'Y'
			        LEFT OUTER JOIN LOY.LOY_TIERS          T6 ON T2.RID_TIER = T6.RID 		AND T6.FLAG = 1 
			        LEFT OUTER JOIN com.COMM_CODE          C1 ON T2.MBR_TYPE_CD = C1.CODE_NAME  AND C1.GROUP_CODE = 'LOY_MBR_TYPE_CD' 	  AND C1.FLAG = 1
			        LEFT OUTER JOIN com.COMM_CODE          C5 ON T3.CUST_TYPE_CD = C5.CODE_NAME AND C5.GROUP_CODE = 'LOY_CUST_TYPE_CD'    AND C5.FLAG = 1
					LEFT OUTER JOIN com.COMM_CODE 		   C4 ON T3.GEN_CD = C4.CODE_NAME 		AND C4.GROUP_CODE = 'LOY_GEN_CD' 		  AND C4.FLAG = 1
					LEFT OUTER JOIN com.COMM_CODE 		   C6 ON T3.CUST_STAT_CD = C6.CODE_NAME AND C6.GROUP_CODE = 'LOY_CUST_STAT_CD'	  AND C6.FLAG = 1
					LEFT OUTER JOIN LOY.LOY_CUST_AGRE 	   C7 ON T3.RID = C7.RID_CUST AND C7.AGRE_TYPE_CD ='C3'
			      WHERE 1=1
			      	AND T1.FLAG = 1
			      	AND T1.RCMMD_TYPE_CD = 'J'   /* 추천타입이 '가입' 인 경우 */
			      	<if test="(mbrMgtAttr != null and mbrMgtAttr != '') and (mbrMgtAttrVal != null and mbrMgtAttrVal != '')">
		     	 	AND T4.ATTR_CD = #{mbrMgtAttr} AND T4.ATTR_SUB_CD = #{mbrMgtAttrVal}
			      	</if>
			      	<if test="(startDt != null and startDt != '') and (endDt != null and endDt != '')">
		     	 	AND com.TO_CHAR(T1.REG_DATE, 'YYYY-MM-DD') BETWEEN #{startDt} AND #{endDt}
			      	</if>
			      GROUP BY T1.RCMMD_NO, T3.CUST_NM, T2.MBR_NO, T2.MBR_TYPE_CD, T5.USER_ID, T6.TIER_NM
			      		  ,T3.GEN_CD, T3.HHP, T3.EMAIL, C1.MARK_NAME, C4.MARK_NAME, T3.CUST_TYPE_CD, C5.MARK_NAME
			      		  ,T2.RID, T3.CUST_NO, T3.CUST_STAT_CD, C6.MARK_NAME ,C7.AGRE_YN 
		) t
		LEFT JOIN (
					SELECT  lpa.RID_MBR			AS ridMbr
						   ,SUM(lpa.ACRL_AMT)	AS sumAcrlAmt
					FROM loy.LOY_PNT_ACRL lpa 
					JOIN LOY.LOY_PNT_TXN lpt ON lpa.RID_PNT_TXN = lpt.RID AND lpt.FLAG = 1
					WHERE lpa.FLAG = 1 AND lpa.OFFER_NO = 'OFR-100111'
					AND   lpt.PNT_TXN_TYPE_2_CD ='110'
					GROUP BY lpa.RID_MBR  								) st ON t.ridMbr = st.ridMbr
		
		WHERE 1=1
		AND ${strCondWhere}
		AND ${strWhere}
		<if test="mbrType != null and mbrType != ''">
		/* 현 메뉴에서 회원유형은 CUST_TYPE_CD 임 */
		AND t.cust_Type_Cd = #{mbrType}
		</if>
		<if test="mbrNm != null and mbrNm != ''">
		AND t.recommender_Nm = #{mbrNm}
		</if>		
		ORDER BY ${strOrderby}
    	${strEndPaging}
    </select>
    
    <select id = "selectRecommReportExcelList" parameterType="com.icignal.kepler.report.dto.request.KprReportRecommListReqDto"
    		resultType="com.icignal.kepler.report.dto.response.selectRecommReportExcelList">
    	/* KprReportMapper.selectRecommReportList */
    	SELECT 		 t.rcmmd_No			        AS rcmmdNo           
		           	,CASE WHEN t.cust_Stat_Cd = 'C' THEN '탈퇴' ELSE t.recommender_Nm	END        AS recommenderNm     
					,t.mbr_No 			        AS mbrNo             
					,t.cust_No 			        AS custNo            
					,t.ridMbr					AS ridMbr            
					,t.mbr_Type_Cd 		        AS mbrTypeCd 	      
					,t.mbr_Type_Cd_Nm	        AS mbrTypeCdNm       
					,t.cust_Type_Cd 	        AS custTypeCd 	      
					,t.cust_Type_Cd_Nm	        AS custTypeCdNm
					,t.cust_Stat_Cd				AS custStatCd     
					,t.cust_Stat_Cd_Nm  		AS custStatCdNm
					,t.tier_Nm 			        AS tierNm
					,t.gen_Cd 			        AS genCd		      
					,t.gen_Cd_Nm		        AS genCdNm           
					,CASE WHEN t.cust_Stat_Cd = 'C' THEN '' ELSE t.web_Id	END		        AS webId             
		            ,CASE WHEN t.cust_Stat_Cd = 'C' THEN '' ELSE t.hhp 	END			        AS hhp               
		            ,CASE WHEN t.cust_Stat_Cd = 'C' THEN '' ELSE t.email END			        AS email             
		            ,t.recomm_Count		        AS recommCount       
		            ,st.sumAcrlAmt				AS accumulPointAmt   
		       		,RANK() OVER (ORDER BY t.recomm_Count DESC) AS ranking
		       		,com.nvl(t.agre_Yn,'N')					AS agreYn
		       		,${strColumn}
		FROM (
		          SELECT		 T1.RCMMD_NO		AS rcmmd_No
				           		,T3.CUST_NM			AS recommender_Nm
				           		,T3.CUST_STAT_CD	AS cust_Stat_Cd
								,C6.MARK_NAME		as cust_Stat_Cd_Nm
								,T2.MBR_NO 			AS mbr_No
								,T2.RID 			AS ridMbr
								,T3.CUST_NO 		AS cust_No
								,T2.MBR_TYPE_CD 	AS mbr_Type_Cd 	
								,C1.MARK_NAME		AS mbr_Type_Cd_Nm
								,T3.CUST_TYPE_CD	AS cust_Type_Cd
								,C5.MARK_NAME		AS cust_Type_Cd_Nm
								,T6.TIER_NM 		AS tier_Nm 		
								,T3.GEN_CD 			AS gen_Cd 		
								,C4.MARK_NAME		AS gen_Cd_Nm
								,T5.USER_ID			AS web_Id
					           	,T3.HHP				AS hhp
					            ,T3.EMAIL			AS email
					            ,C7.AGRE_YN 		AS agre_Yn
					            ,COUNT(*)  			AS recomm_Count
			      FROM LOY.LOY_MBR_RCMMD                   T1
			      	INNER JOIN LOY.LOY_CUST                T3 ON T1.RCMMD_NO = T3.CUST_NO AND T3.FLAG = 1
			        INNER JOIN LOY.LOY_MBR                 T2 ON T3.RID = T2.RID_CUST AND T2.FLAG = 1
			        <if test="(mbrMgtAttr != null and mbrMgtAttr != '') and (mbrMgtAttrVal != null and mbrMgtAttrVal != '')">	 
			        LEFT OUTER JOIN LOY.LOY_MBR_MGT_ATTR   T4 ON T2.RID      = T4.RID_MBR   AND T4.FLAG = 1
			        LEFT OUTER JOIN com.COMM_CODE		   C2 ON T4.ATTR_CD = C2.CODE_NAME 		AND C2.GROUP_CODE = 'LOY_MBR_MGT_ATTR_CD' AND C2.FLAG = 1
			        LEFT OUTER JOIN com.COMM_CODE 		   C3 ON T4.ATTR_SUB_CD = C3.CODE_NAME  AND C3.GROUP_CODE = 'LOY_MBR_MGT_ATTR_SUB_CD' AND C3.FLAG = 1
			        </if>
			        LEFT OUTER JOIN LOY.LOY_CUST_LOGIN_INF T5 ON T3.RID 	 = T5.RID_CUST  AND T5.FLAG = 1 AND T5.REP_YN = 'Y'
			        LEFT OUTER JOIN LOY.LOY_TIERS          T6 ON T2.RID_TIER = T6.RID 		AND T6.FLAG = 1 
			        LEFT OUTER JOIN com.COMM_CODE          C1 ON T2.MBR_TYPE_CD = C1.CODE_NAME  AND C1.GROUP_CODE = 'LOY_MBR_TYPE_CD' 	  AND C1.FLAG = 1
			        LEFT OUTER JOIN com.COMM_CODE          C5 ON T3.CUST_TYPE_CD = C5.CODE_NAME AND C5.GROUP_CODE = 'LOY_CUST_TYPE_CD'    AND C5.FLAG = 1
					LEFT OUTER JOIN com.COMM_CODE 		   C4 ON T3.GEN_CD = C4.CODE_NAME 		AND C4.GROUP_CODE = 'LOY_GEN_CD' 		  AND C4.FLAG = 1
					LEFT OUTER JOIN com.COMM_CODE 		   C6 ON T3.CUST_STAT_CD = C6.CODE_NAME AND C6.GROUP_CODE = 'LOY_CUST_STAT_CD'	  AND C6.FLAG = 1
					LEFT OUTER JOIN LOY.LOY_CUST_AGRE 	   C7 ON T3.RID = C7.RID_CUST AND C7.AGRE_TYPE_CD ='C3'
			      WHERE 1=1
			      	AND T1.FLAG = 1
			      	AND T1.RCMMD_TYPE_CD = 'J'   /* 추천타입이 '가입' 인 경우 */
			      	<if test="(mbrMgtAttr != null and mbrMgtAttr != '') and (mbrMgtAttrVal != null and mbrMgtAttrVal != '')">
		     	 	AND T4.ATTR_CD = #{mbrMgtAttr} AND T4.ATTR_SUB_CD = #{mbrMgtAttrVal}
			      	</if>
			      	<if test="(startDt != null and startDt != '') and (endDt != null and endDt != '')">
		     	 	AND com.TO_CHAR(T1.REG_DATE, 'YYYY-MM-DD') BETWEEN #{startDt} AND #{endDt}
			      	</if>
			      GROUP BY T1.RCMMD_NO, T3.CUST_NM, T2.MBR_NO, T2.MBR_TYPE_CD, T5.USER_ID, T6.TIER_NM
			      		  ,T3.GEN_CD, T3.HHP, T3.EMAIL, C1.MARK_NAME, C4.MARK_NAME, T3.CUST_TYPE_CD, C5.MARK_NAME
			      		  ,T2.RID, T3.CUST_NO, T3.CUST_STAT_CD, C6.MARK_NAME ,C7.AGRE_YN 
		) t
		LEFT JOIN (
					SELECT  lpa.RID_MBR			AS ridMbr
						   ,SUM(lpa.ACRL_AMT)	AS sumAcrlAmt
					FROM loy.LOY_PNT_ACRL lpa 
					JOIN LOY.LOY_PNT_TXN lpt ON lpa.RID_PNT_TXN = lpt.RID AND lpt.FLAG = 1
					WHERE lpa.FLAG = 1 AND lpa.OFFER_NO = 'OFR-100111'
					AND   lpt.PNT_TXN_TYPE_2_CD ='110'
					GROUP BY lpa.RID_MBR  								) st ON t.ridMbr = st.ridMbr
		
		WHERE 1=1
		AND ${strCondWhere}
		AND ${strWhere}
		<if test="mbrType != null and mbrType != ''">
		/* 현 메뉴에서 회원유형은 CUST_TYPE_CD 임 */
		AND t.cust_Type_Cd = #{mbrType}
		</if>
		<if test="mbrNm != null and mbrNm != ''">
		AND t.recommender_Nm = #{mbrNm}
		</if>		
		ORDER BY ${strOrderby}
    	${strEndPaging}
    </select>
  
  
	 <!-- /**************************************
	    -   관련 파일        : KprReportService.java
	    ============================================
	    -   제목             : 추천을 해온 사람들 리스트 조회
	    -   설명             : [정형 Report > 추천인 리포트] 한 추천자가 본인이 여태까지 추천해왔던 사람들의 리스트를 조회한다.
	    -   결과형태         : 복수
	    ============================================
	    -   입력			 :
	    -	출력			 :
	    ============================================
	    -   작성자           : jb.kim
	    -   작성일           : 2021.03.02
	    ***************************************/ -->
    <select id="selectRecommendedPersonList" parameterType="com.icignal.kepler.report.dto.request.KprReportRecommListReqDto"
    		resultType="com.icignal.kepler.report.dto.response.KprReportRecommListResDto">
    	/* KprReportMapper.selectRecommendedPersonList */
		SELECT   lmr.RID_MBR	 AS recommendedPersonRid		/* 추천으로 인하여 가입하게 된 회원 RID */
				,lc.CUST_TYPE_CD AS custTypeCd /* 고객 유형 */
				,lcli.USER_ID 	 AS webId	/* 추천으로 가입한 회원의 웹ID */
				,lm.MBR_NO 		 AS mbrNo	/* 추천으로 가입한 회원의 회원번호 */
				,lc.CUST_NM	 	 AS custNm	/* 추천으로 가입한 회원이름 */
                ,lc.CUST_STAT_CD   AS custStatCd
                ,cc.MARK_NAME	   AS custStatCdNm
				,lc.HHP 		 AS hhp		/* 추천으로 가입한 회원 휴대전화번호 */								 
				,com.TO_CHAR(lmr.REG_DATE,'YYYY-MM-DD')
								 AS regDate	/* 가입일 */
				,${strColumn}
		FROM loy.LOY_MBR_RCMMD lmr 
		INNER JOIN loy.LOY_MBR lm ON lmr.RID_MBR = lm.RID AND lm.FLAG = 1
		INNER JOIN loy.LOY_CUST lc ON lm.RID_CUST = lc.RID AND lc.FLAG = 1
		LEFT OUTER JOIN loy.LOY_CUST_LOGIN_INF lcli ON lc.RID = lcli.RID_CUST AND lcli.FLAG = 1 AND lcli.REP_YN = 'Y'
        LEFT OUTER JOIN com.COMM_CODE cc ON lc.CUST_STAT_CD = cc.CODE_NAME AND cc.GROUP_CODE = 'LOY_CUST_STAT_CD' AND cc.FLAG = 1
		WHERE 1=1
			AND lmr.FLAG = 1
			AND lmr.RCMMD_TYPE_CD = 'J'
			AND lmr.RCMMD_NO = #{rcmmdNo}
		<if test="(startDt != null and startDt != '') and (endDt != null and endDt != '')">
			AND com.TO_CHAR(lmr.REG_DATE, 'YYYY-MM-DD') BETWEEN #{startDt} AND #{endDt}
		</if>
			AND ${strCondWhere}
			AND ${strWhere}
		ORDER BY ${strOrderby}
		${strEndPaging}
	</select>

	<select id ="selectMonthOfPoint" parameterType = "com.icignal.kepler.report.dto.request.KprReportPntReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportPointOfMonthResDto">
	/* KprReportMapper.selectMonthOfPoint */
	SELECT '온라인'                           AS chnlType /* 온오프라인 구분 */
     , SUM(BASE)                        AS basePnt /* 기초포인트 */
     , SUM(ACRL)                        AS acrlPnt /* 적립포인트 */
     , SUM(RDM)                         AS rdmPnt /* 사용포인트 */
     , SUM(EXP)                         AS extPnt /* 소멸포인트 */
     , SUM(EXT)                         AS EXT /* 탈회소멸포인트 */
     , SUM(BASE) + SUM(ACRL) - SUM(RDM) AS totPnt /* 기말포인트 */
	FROM (
      SELECT com.nvl(SUM(CASE WHEN T3.VALID_START_DATE <![CDATA[<=]]> GETDATE() AND T3.VALID_END_DATE <![CDATA[>=]]> com.TRUNC_DATE(GETDATE() + 1) THEN T3.BALNC ELSE 0 END), 0) AS BASE
           , 0 AS ACRL
           , 0 AS RDM
           , 0 AS EXP
           , 0 AS EXT
      FROM   LOY.LOY_CHNL                T1
        INNER      JOIN LOY.LOY_PNT_TXN  T2 ON T1.RID = T2.RID_CHNL AND T2.FLAG = 1
        LEFT OUTER JOIN LOY.LOY_PNT_ACRL T3 ON T2.RID = T3.RID_PNT_TXN AND T3.OFFER_TYPE_CD = 'P' AND T3.BALNC <![CDATA[>]]> 0 AND T3.FLAG = 1
      WHERE  1=1
      AND    T1.CHNL_TYPE_CD  = 'S'
      AND    T1.CHNL_SUB_TYPE_CD  IN ('S4')
      AND    T2.APPR_DATE    <![CDATA[<]]> #{startDt}
      UNION ALL
      SELECT 0 AS BASE
           , SUM(CASE WHEN T2.PNT_TXN_TYPE_1_CD = '100' AND T2.PNT_TXN_TYPE_2_CD NOT IN ('210','211') THEN T2.PNT_AMT ELSE 0 END) ACRL
           , SUM(CASE WHEN T2.PNT_TXN_TYPE_1_CD = '200' AND T2.PNT_TXN_TYPE_2_CD NOT IN ('130','131') THEN T2.PNT_AMT ELSE 0 END) RDM
           , SUM(CASE WHEN T2.PNT_TXN_TYPE_1_CD = '200' AND T2.PNT_TXN_TYPE_2_CD     IN ('220') THEN T2.PNT_AMT ELSE 0 END) EXP
           , SUM(CASE WHEN T2.PNT_TXN_TYPE_1_CD = '200' AND T2.PNT_TXN_TYPE_2_CD     IN ('270') THEN T2.PNT_AMT ELSE 0 END) EXT
      	FROM   LOY.LOY_CHNL    T1
        INNER JOIN LOY.LOY_PNT_TXN T2 ON T1.RID = T2.RID_CHNL
      WHERE  1=1
      AND    T1.CHNL_TYPE_CD  = 'S'
      AND    T1.CHNL_SUB_TYPE_CD  IN ('S4')
      AND    T2.TXN_STAT_CD  = 'A'
      AND    T2.APPR_DATE BETWEEN #{startDt} AND #{endDt}
     )
	UNION ALL
	SELECT '오프라인'                            AS CHNL_TYPE
     , SUM(BASE)                        AS BASE
     , SUM(ACRL)                        AS ACRL
     , SUM(RDM)                         AS RDM
     , SUM(EXP)                         AS EXP
     , SUM(EXT)                         AS EXT
     , SUM(BASE) + SUM(ACRL) - SUM(RDM) AS TOT
	FROM (
      SELECT com.nvl(SUM(CASE WHEN T3.VALID_START_DATE <![CDATA[<=]]>  GETDATE() AND T3.VALID_END_DATE <![CDATA[>=]]>  com.TRUNC_DATE(GETDATE() + 1) THEN T3.BALNC ELSE 0 END), 0) AS BASE
           , 0 AS ACRL
           , 0 AS RDM
           , 0 AS EXP
           , 0 AS EXT
      FROM   LOY.LOY_CHNL T1
        INNER      JOIN LOY.LOY_PNT_TXN  T2 ON T1.RID = T2.RID_CHNL AND T2.FLAG = 1
        LEFT OUTER JOIN LOY.LOY_PNT_ACRL T3 ON T2.RID = T3.RID_PNT_TXN AND T3.OFFER_TYPE_CD = 'P' AND T3.BALNC <![CDATA[>]]>  0 AND T3.FLAG = 1
      WHERE 1=1
      AND  ((T1.CHNL_TYPE_CD = 'S' AND T1.CHNL_SUB_TYPE_CD  IN ('S1','S2','S3')) OR T1.CHNL_NO = 'NC1370')
      AND    T2.APPR_DATE  <![CDATA[<]]> #{startDt}  
      UNION ALL
      SELECT 0 AS BASE
           , SUM(CASE WHEN T2.PNT_TXN_TYPE_1_CD = '100' AND T2.PNT_TXN_TYPE_2_CD NOT IN ('210','211') THEN T2.PNT_AMT ELSE 0 END) ACRL
           , SUM(CASE WHEN T2.PNT_TXN_TYPE_1_CD = '200' AND T2.PNT_TXN_TYPE_2_CD NOT IN ('130','131') THEN T2.PNT_AMT ELSE 0 END) RDM
           , SUM(CASE WHEN T2.PNT_TXN_TYPE_1_CD = '200' AND T2.PNT_TXN_TYPE_2_CD     IN ('220') THEN T2.PNT_AMT ELSE 0 END) EXP
           , SUM(CASE WHEN T2.PNT_TXN_TYPE_1_CD = '200' AND T2.PNT_TXN_TYPE_2_CD     IN ('270') THEN T2.PNT_AMT ELSE 0 END) EXT
      FROM   LOY.LOY_CHNL           T1
        INNER JOIN  LOY.LOY_PNT_TXN T2 ON T1.RID = T2.RID_CHNL
      WHERE 1=1 
      AND (( T1.CHNL_TYPE_CD = 'S' AND T1.CHNL_SUB_TYPE_CD  IN ('S1','S2','S3')) OR T1.CHNL_NO = 'NC1370' )
      AND    T2.TXN_STAT_CD  = 'A'
      AND    T2.APPR_DATE BETWEEN #{startDt} AND #{endDt}
     )
	</select>
	
	 <select id = "selectEmpAggPntReport" parameterType = "com.icignal.kepler.report.dto.request.KprReportLnlReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportEmpPntResDto">
		/* KprReportMapper.selectEmpAggPntReport */
		SELECT 
      Z1.RID_MBR  AS ridMbr
    , Z1.RID_OFR   AS ridOfr
    , O1.OFR_NM  AS ofrNm
    , C1.CUST_NM   AS custNm
    , C2.EMP_NO     AS empNo
    , L1.COMPANY_NM  AS companyNm
    , L1.TEAM_NM     AS teamNm
   , SUM(SUM(A1)) OVER() AS A1_SUM
   , SUM(SUM(B1)) OVER() AS B1_SUM
   , SUM(SUM(B2)) OVER() AS B2_SUM
   , SUM(SUM(B3)) OVER() AS B3_SUM   
   , SUM(SUM(C1)) OVER() AS C1_SUM  
   , SUM(SUM(C2)) OVER() AS C2_SUM 
   , SUM(SUM(C3)) OVER() AS C3_SUM 
   , SUM(SUM(C4)) OVER() AS C4_SUM 
   , SUM(SUM(D1)) OVER() AS D1_SUM 
   , SUM(SUM(D2)) OVER() AS D2_SUM  
   , SUM(SUM(D3)) OVER() AS D3_SUM 
   , SUM(SUM(A1) + SUM(B3) - SUM(C4) - SUM(D3)) OVER() AS E1_SUM      
   , SUM(A1) AS A1
   , SUM(B1) AS B1
   , SUM(B2) AS B2
   , SUM(B3) AS B3
   , SUM(C1) AS C1
   , SUM(C2) AS C2
   , SUM(C3) AS C3
   , SUM(C4) AS C4
   , SUM(D1) AS D1
   , SUM(D2) AS D2
   , SUM(D3) AS D3
   ,  SUM(A1) + SUM(B3) - SUM(C4) - SUM(D3) AS E1
   ,${strColumn}
FROM (
      SELECT        
           RID_MBR
          ,RID_OFR      
          , (SUM(com.nvl(C100, 0)) + SUM(com.nvl(C110, 0)) + SUM(com.nvl(C111, 0)) + SUM(com.nvl(C160, 0)) + SUM(com.nvl(C161, 0)) + SUM(com.nvl(C198, 0)) + SUM(com.nvl(C190, 0)))  -- + 적립
          
          - (SUM(com.nvl(C210, 0)) + SUM(com.nvl(C212, 0))) --   - 적립취소   
          
          - (SUM(com.nvl(C200, 0)) + SUM(com.nvl(C260, 0)) + SUM(com.nvl(C290, 0)))  --  - 사용(구매,관리자차감)
          
          + (SUM(com.nvl(C130, 0)) + SUM(com.nvl(C132, 0))) --  + 사용취소
          - SUM(com.nvl(C250, 0)) --  - 마이너스충당          
          - (SUM(com.nvl(C270, 0)) + SUM(com.nvl(C220, 0)))  -- - 소멸(탈회, 만료)
          AS A1  -- D1+D2
          , 0 AS B1          
          , 0 AS B2
          , 0 AS B3
          , 0 AS C1
          , 0 AS C2
          , 0 AS C3
          , 0 AS C4
          , 0 AS D1
          , 0 AS D2
          , 0 AS D3
     FROM (       
                    WITH T AS ( 
                         SELECT 
                                  T1.RID_OFR 
                                , T1.RID_MBR 
                               , T1.TXN_TYPE 
                               , T1.TXN_DTL_TYPE                                                        
                               , SUM(PNT_AMT) AS PNT_AMT
                           FROM LOY.LOY_AGG_PNT_OFR_DAILY T1
                          WHERE 1=1
                           AND T1.TXN_DT <![CDATA[ < #{startDt} ]]>
                           AND  T1.OFR_CTG = 'E'
                             <if test="ridOfr != null and ridOfr != ''"> 
                           AND  T1.RID_OFR =#{ridOfr}
                           </if>
                         GROUP BY  T1.RID_OFR , T1.RID_MBR , T1.TXN_TYPE , T1.TXN_DTL_TYPE
                         ORDER BY T1.RID_OFR , T1.RID_MBR, TXN_TYPE , TXN_DTL_TYPE 
                         
                ) 
               SELECT * FROM (
                   SELECT  RID_MBR, RID_OFR ,  TXN_DTL_TYPE , PNT_AMT
                   FROM T 
               ) 
               PIVOT ( SUM(PNT_AMT) FOR  TXN_DTL_TYPE  IN (                                                        
                                                 '100'  AS C100   --  B1    구매적립      
                                                ,'110'  AS C110   --  B1    이벤트_멤버십  
                                                ,'111'  AS C111    -- B1    이벤트_온라인몰 
                                                ,'160'  AS C160   --  B1    CS적립        
                                                ,'161'  AS C161   --  B1    임직원적립     
                                                ,'198'  AS C198   --  B1    통합이관                                                                           
                                                ,'130'  AS C130   --  C2     사용취소                           
                                                ,'132'  AS C132   --  C2    사용취소_구거래
                                                ,'200'  AS C200   --  C1    상품구매      
                                                ,'250'  AS C250   --  C3    마이너스_충당  
                                                ,'260'  AS C260   --  C1    관리자차감    
                                                ,'210'  AS C210   --  B2     적립취소                               
                                                ,'212'  AS C212   --  B2     적립취소_구거래                              
                                                ,'270'  AS C270   --  D1    탈회소멸      
                                                ,'220'  AS C220   --  D2    만료소멸     
                                                ,'190'  AS C190   --  B1    전산오류적립
                                                ,'290'  AS C290   --  C4    전산오류차감
                                                )
                  )
            ) S1 
         WHERE 1=1
         GROUP BY S1.RID_OFR , S1.RID_MBR 
 UNION ALL 
       SELECT  
                RID_MBR
              , RID_OFR
             , 0 AS A1
             , SUM(com.nvl(C100, 0)) + SUM(com.nvl(C110, 0)) + SUM(com.nvl(C111, 0)) + SUM(com.nvl(C160, 0)) + SUM(com.nvl(C161, 0)) + SUM(com.nvl(C198, 0)) + SUM(com.nvl(C190, 0)) AS B1  -- 적립          
             , SUM(com.nvl(C210, 0)) + SUM(com.nvl(C212, 0)) AS B2  -- 적립취소
             , (SUM(com.nvl(C100, 0)) + SUM(com.nvl(C110, 0)) + SUM(com.nvl(C111, 0)) + SUM(com.nvl(C160, 0)) + SUM(com.nvl(C161, 0)) + SUM(com.nvl(C198, 0))) - (SUM(com.nvl(C210, 0)) + SUM(com.nvl(C212, 0))) AS B3 -- (B1-B2)          
             , SUM(com.nvl(C200, 0)) + SUM(com.nvl(C260, 0)) + SUM(com.nvl(C290, 0)) AS C1  -- 사용
             , SUM(com.nvl(C130, 0)) + SUM(com.nvl(C132, 0))  AS C2   -- 사용취소
             , SUM(com.nvl(C250, 0))  AS C3   -- 마이너스충당
             , (SUM(com.nvl(C200, 0)) + SUM(com.nvl(C260, 0))) - (SUM(com.nvl(C130, 0)) + SUM(com.nvl(C132, 0)))  AS C4 -- (C1-C2+C3)
             , SUM(com.nvl(C270, 0))  AS D1   -- 탈회
             , SUM(com.nvl(C220, 0))  AS D2   -- 만료소멸
             , (SUM(com.nvl(C270, 0)) + SUM(com.nvl(C220, 0)) )  AS D3
        FROM (       
                   WITH T AS ( 
                            SELECT                                  
                                     T1.RID_OFR 
                                   , T1.RID_MBR 
                                  , T1.TXN_TYPE 
                                  , T1.TXN_DTL_TYPE                                                        
                                  , SUM(PNT_AMT) AS PNT_AMT
                              FROM LOY.LOY_AGG_PNT_OFR_DAILY T1
                             WHERE 1=1
                              AND T1.TXN_DT BETWEEN #{startDt} AND #{endDt}
                              AND  T1.OFR_CTG = 'E'
                              <if test="ridOfr != null and ridOfr != ''"> 
                                  AND  T1.RID_OFR =#{ridOfr}
                              </if>
                            GROUP BY  T1.RID_OFR , T1.RID_MBR , T1.TXN_TYPE , T1.TXN_DTL_TYPE
                            ORDER BY T1.RID_OFR , T1.RID_MBR, TXN_TYPE , TXN_DTL_TYPE 
                            
                   ) 
                  SELECT * FROM (
                      SELECT  RID_MBR, RID_OFR ,  TXN_DTL_TYPE , PNT_AMT
                      FROM T 
                  ) 
                  PIVOT ( SUM(PNT_AMT) FOR  TXN_DTL_TYPE  IN (                                                        
                                                    '100'  AS C100   --  B1    구매적립      
                                                   ,'110'  AS C110   --  B1    이벤트_멤버십  
                                                   ,'111'  AS C111    -- B1    이벤트_온라인몰 
                                                   ,'160'  AS C160   --  B1    CS적립        
                                                   ,'161'  AS C161   --  B1    임직원적립     
                                                   ,'198'  AS C198   --  B1    통합이관                                                                           
                                                   ,'130'  AS C130   --  C2     사용취소                           
                                                   ,'132'  AS C132   --  C2    사용취소_구거래
                                                   ,'200'  AS C200   --  C1    상품구매      
                                                   ,'250'  AS C250   --  C3    마이너스_충당  
                                                   ,'260'  AS C260   --  C1    관리자차감    
                                                   ,'210'  AS C210   --  B2     적립취소                               
                                                   ,'212'  AS C212   --  B2     적립취소_구거래                              
                                                   ,'270'  AS C270   --  D1    탈회소멸      
                                                   ,'220'  AS C220   --  D2    만료소멸     
                                                   ,'190'  AS C190   --  B1    전산오류적립
                                                   ,'290'  AS C290   --  C4    전산오류차감                                                   
                                                   )
                     )
               ) S1       
            WHERE 1=1
            GROUP BY S1.RID_OFR , S1.RID_MBR 
   ) Z1  -- UNION ALL 
   LEFT JOIN LOY.LOY_MBR  M1 ON Z1.RID_MBR = M1.RID 
   LEFT JOIN LOY.LOY_CUST C1 ON C1.RID = M1.RID_CUST 
   LEFT JOIN LOY.LOY_CUST_I C2 ON  C1.RID    = C2.RID_CUST
   LEFT JOIN LOY.LOY_INTER_PERSON L1 ON C2.EMP_NO = L1.EMP_NO
   LEFT JOIN LOY.LOY_OFR O1 ON Z1.RID_OFR = O1.RID
   WHERE 1=1
    <if test="mbrNm != null and mbrNm != ''"> 
   	AND c1.CUST_NM = #{mbrNm}
   </if>
   GROUP BY Z1.RID_MBR, Z1.RID_OFR, C2.EMP_NO , C1.CUST_NM , L1.COMPANY_NM , O1.OFR_NM ,L1.TEAM_NM
 	ORDER BY
 	 <if test="offSetFlag != null and offSetFlag != ''"> 
 	 1 asc offset 0 rows fetch next 10 rows only
	</if>
	<if test="offSetFlag == null">
		${strOrderby}	
		${strEndPaging}
	</if>
	
   	</select>
   

	<select id = "selectStoreAggPntReport" parameterType = "com.icignal.kepler.report.dto.request.KprReportLnlReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportEmpPntResDto">
	/* KprReportMapper.selectStoreAggPntReport */	
	SELECT 
     Z2.CHNL_TYPE_CD  as chnlTypeCd
   , CC.MARK_NAME   as chnlType
   , Z2.CHNL_NO   as chnlNo
   , Z2.CHNL_NM  as chnlNm
   , Z1.RID_CHNL as ridChnl
   , SUM(A1) AS A1
   , SUM(B1) AS B1
   , SUM(B2) AS B2
   , SUM(B3) AS B3
   , SUM(C1) AS C1
   , SUM(C2) AS C2
   , SUM(C3) AS C3
   , SUM(C4) AS C4
   , SUM(D1) AS D1
   , SUM(D2) AS D2
   , SUM(D3) AS D3
   , SUM(E2) AS E2
   , SUM(E3) AS E3
   , SUM(E4) AS E4
   ,  SUM(A1) + SUM(B3) - SUM(C4) - SUM(D3) AS E1
   ,${strColumn}
FROM (

       SELECT        
           S1.RID_CHNL       
          , (SUM(com.nvl(C100, 0)) + SUM(com.nvl(C110, 0)) + SUM(com.nvl(C111, 0)) + SUM(com.nvl(C160, 0)) + SUM(com.nvl(C161, 0)) + SUM(com.nvl(C198, 0)) + SUM(com.nvl(C190, 0)))  -- + 적립
          
          - (SUM(com.nvl(C210, 0)) + SUM(com.nvl(C212, 0))) --   - 적립취소   
          
          - (SUM(com.nvl(C200, 0)) + SUM(com.nvl(C260, 0)) + SUM(com.nvl(C290, 0)))  --  - 사용(구매,관리자차감)
          
          + (SUM(com.nvl(C130, 0)) + SUM(com.nvl(C132, 0))) --  + 사용취소
          - SUM(com.nvl(C250, 0)) --  - 마이너스충당          
          - (SUM(com.nvl(C270, 0)) + SUM(com.nvl(C220, 0)))  -- - 소멸(탈회, 만료)
          AS A1  -- D1+D2
          , 0 AS B1          
          , 0 AS B2
          , 0 AS B3
          , 0 AS C1
          , 0 AS C2
          , 0 AS C3
          , 0 AS C4
          , 0 AS D1
          , 0 AS D2
          , 0 AS D3

          , 0 AS E2
          , 0 AS E3
          , sum(com.nvl(C250,0)) AS E4
     FROM (       
                WITH T AS ( 
                         SELECT 
                                 CEILING(COUNT(1) OVER()) totalCount
                                , 'A' AS GUBUN     
                               , RID_CHNL 
                               , TXN_TYPE 
                               , TXN_DTL_TYPE
                               , T1.CHNL_CTG                         
                               , SUM(PNT_AMT) AS PNT_AMT
                           FROM LOY.LOY_AGG_PNT_OFR_DAILY T1
                          WHERE 1=1
                           AND T1.TXN_DT <![CDATA[ < #{startDt} ]]>
                            <if test="ofrCtg != null and ofrCtg != ''"> 
                           AND  T1.OFR_CTG <![CDATA[ <> 'E' ]]> -- 임직원지급 오퍼 제외
                           </if>
                         GROUP BY T1.RID_CHNL , T1.TXN_TYPE , T1.TXN_DTL_TYPE , T1.CHNL_CTG 
                         ORDER BY TXN_TYPE , TXN_DTL_TYPE 
                ) 
               SELECT * FROM (
                   SELECT CHNL_CTG,  RID_CHNL ,  TXN_DTL_TYPE , PNT_AMT  --, TXN_TYPE 
                   FROM T 
               ) 
               PIVOT ( SUM(PNT_AMT) FOR  TXN_DTL_TYPE  IN (                                                        
                                                 '100'  AS C100   --  B1    구매적립      
                                                ,'110'  AS C110   --  B1    이벤트_멤버십  
                                                ,'111'  AS C111    -- B1    이벤트_온라인몰 
                                                ,'160'  AS C160   --  B1    CS적립        
                                                ,'161'  AS C161   --  B1    임직원적립     
                                                ,'198'  AS C198   --  B1    통합이관                                                                           
                                                ,'130'  AS C130   --  C2     사용취소                           
                                                ,'132'  AS C132   --  C2    사용취소_구거래
                                                ,'200'  AS C200   --  C1    상품구매      
                                                ,'250'  AS C250   --  C3    마이너스_충당  
                                                ,'260'  AS C260   --  C1    관리자차감    
                                                ,'210'  AS C210   --  B2     적립취소                               
                                                ,'212'  AS C212   --  B2     적립취소_구거래                              
                                                ,'270'  AS C270   --  D1    탈회소멸      
                                                ,'220'  AS C220   --  D2    만료소멸     
                                                ,'190'  AS C190   --  B1    전산오류적립
                                                ,'290'  AS C290   --  C4    전산오류차감
                                                )
                  )
            ) S1 
         WHERE 1=1
         GROUP BY  S1.RID_CHNL      

   UNION ALL 

    SELECT  
             S1.RID_CHNL
          , 0 AS A1
          , SUM(com.nvl(C100, 0)) + SUM(com.nvl(C110, 0)) + SUM(com.nvl(C111, 0)) + SUM(com.nvl(C160, 0)) + SUM(com.nvl(C161, 0)) + SUM(com.nvl(C198, 0)) + SUM(com.nvl(C190, 0)) AS B1  -- 적립          
          , SUM(com.nvl(C210, 0)) + SUM(com.nvl(C212, 0)) AS B2  -- 적립취소
          , (SUM(com.nvl(C100, 0)) + SUM(com.nvl(C110, 0)) + SUM(com.nvl(C111, 0)) + SUM(com.nvl(C160, 0)) + SUM(com.nvl(C161, 0)) + SUM(com.nvl(C198, 0))) - (SUM(com.nvl(C210, 0)) + SUM(com.nvl(C212, 0))) AS B3 -- (B1-B2)          
          , SUM(com.nvl(C200, 0)) + SUM(com.nvl(C260, 0)) + SUM(com.nvl(C290, 0)) AS C1  -- 사용
          , SUM(com.nvl(C130, 0)) + SUM(com.nvl(C132, 0))  AS C2   -- 사용취소
          , SUM(com.nvl(C250, 0))  AS C3   -- 마이너스충당
          , (SUM(com.nvl(C200, 0)) + SUM(com.nvl(C260, 0))) - (SUM(com.nvl(C130, 0)) + SUM(com.nvl(C132, 0))) AS C4 -- (C1-C2+C3)
          , SUM(com.nvl(C270, 0))  AS D1   -- 탈회
          , SUM(com.nvl(C220, 0))  AS D2   -- 만료소멸
          , (SUM(com.nvl(C270, 0)) + SUM(com.nvl(C220, 0)) )  AS D3
          , 0 AS E2
          , 0 AS E3
          , 0 AS E4
     FROM (       
                WITH T AS ( 
                         SELECT 
                                 CEILING(COUNT(1) OVER()) totalCount
                                , 'A' AS GUBUN     
                               , RID_CHNL 
                               , TXN_TYPE 
                               , TXN_DTL_TYPE
                               , T1.CHNL_CTG                         
                               , SUM(PNT_AMT) AS PNT_AMT
                           FROM LOY.LOY_AGG_PNT_OFR_DAILY T1
                          WHERE 1=1
                           AND T1.TXN_DT BETWEEN #{startDt} AND #{endDt}
                           <if test="ofrCtg != null and ofrCtg != ''"> 
                           AND  T1.OFR_CTG <![CDATA[ <> 'E' ]]>
                           </if>
                         GROUP BY T1.RID_CHNL , T1.TXN_TYPE , T1.TXN_DTL_TYPE , T1.CHNL_CTG 
                         ORDER BY TXN_TYPE , TXN_DTL_TYPE 
                ) 
               SELECT * FROM (
                   SELECT CHNL_CTG,  RID_CHNL ,  TXN_DTL_TYPE , PNT_AMT  --, TXN_TYPE 
                   FROM T 
               ) 
               PIVOT ( SUM(PNT_AMT) FOR  TXN_DTL_TYPE  IN (                                                        
                                                 '100'  AS C100   --  B1    구매적립      
                                                ,'110'  AS C110   --  B1    이벤트_멤버십  
                                                ,'111'  AS C111    -- B1    이벤트_온라인몰 
                                                ,'160'  AS C160   --  B1    CS적립        
                                                ,'161'  AS C161   --  B1    임직원적립     
                                                ,'198'  AS C198   --  B1    통합이관                                                                           
                                                ,'130'  AS C130   --  C2     사용취소                           
                                                ,'132'  AS C132   --  C2    사용취소_구거래
                                                ,'200'  AS C200   --  C1    상품구매      
                                                ,'250'  AS C250   --  C3    마이너스_충당  
                                                ,'260'  AS C260   --  C1    관리자차감    
                                                ,'210'  AS C210   --  B2     적립취소                               
                                                ,'212'  AS C212   --  B2     적립취소_구거래                              
                                                ,'270'  AS C270   --  D1    탈회소멸      
                                                ,'220'  AS C220   --  D2    만료소멸     
                                                ,'190'  AS C190   --  B1    전산오류적립
												,'290'  AS C290   --  C4        전산오류차감
                                                )
                  )
            ) S1          
         WHERE 1=1
         GROUP BY S1.RID_CHNL
         
        UNION ALL
         
		SELECT  
             S1.RID_CHNL
          , 0 AS A1
          , 0 AS B1  -- 적립          
          , 0 AS B2  -- 적립취소
          , 0 AS B3 -- (B1-B2)          
          , 0 AS C1  -- 사용
          , 0  AS C2   -- 사용취소
          , 0  AS C3   -- 마이너스충당
          , 0 AS C4 -- (C1-C2+C3)
          , 0  AS D1   -- 탈회
          , 0  AS D2   -- 만료소멸
          , 0  AS D3
          , 0  AS E2
          , sum(S1.PNT_AMT) AS E3
          , 0  AS E4
     FROM (       
                WITH T AS ( 
                         SELECT 
                                 CEILING(COUNT(1) OVER()) totalCount
                                , 'A' AS GUBUN     
                               , T2.RID_CHNL     AS RID_CHNL
                               , SUM(MNS_PNT_OCCU_AMT) AS PNT_AMT
                           FROM LOY.LOY_PNT_MNS T1
                           JOIN LOY.LOY_PNT_TXN T2 ON T1.RID_PNT_TXN =T2.RID AND T2.FLAG = 1
                          WHERE 1=1
                           AND T1.FLAG = 1
                           AND T1.MNS_PNT_STAT_CD ='M'
                           AND T1.MNS_PNT_OCCU_DATE >= com.TO_DATE(#{startDt},'YYYY-MM-DD HH24:MI:SS') 
                           AND T1.MNS_PNT_OCCU_DATE <![CDATA[ < ]]> com.TO_DATE(#{endDt},'YYYY-MM-DD HH24:MI:SS') +1 
                         GROUP BY T2.RID_CHNL
                ) 
               SELECT * FROM (
                   SELECT  RID_CHNL , PNT_AMT  --, TXN_TYPE 
                   FROM T 
               ) 
            ) S1          
         WHERE 1=1
         GROUP BY S1.RID_CHNL
         
         UNION ALL
         
         SELECT  
             S1.RID_CHNL
          , 0 AS A1
          , 0 AS B1  -- 적립          
          , 0 AS B2  -- 적립취소
          , 0 AS B3 -- (B1-B2)          
          , 0 AS C1  -- 사용
          , 0  AS C2   -- 사용취소
          , 0  AS C3   -- 마이너스충당
          , 0 AS C4 -- (C1-C2+C3)
          , 0  AS D1   -- 탈회
          , 0  AS D2   -- 만료소멸
          , 0  AS D3
          , sum(S1.PNT_AMT) AS E2
          , 0 AS E3
          , 0 AS E4
     FROM (       
                WITH T AS ( 
                         SELECT 
                                 CEILING(COUNT(1) OVER()) totalCount
                                , 'A' AS GUBUN     
                               , T2.RID_CHNL     AS RID_CHNL
                               , SUM(MNS_PNT_OCCU_AMT) AS PNT_AMT
                           FROM LOY.LOY_PNT_MNS T1
                           JOIN LOY.LOY_PNT_TXN T2 ON T1.RID_PNT_TXN =T2.RID AND T2.FLAG = 1
                          WHERE 1=1
                           AND T1.FLAG = 1
                           AND T1.MNS_PNT_STAT_CD ='M'
                           AND T1.MNS_PNT_OCCU_DATE <![CDATA[ < ]]> com.TO_DATE(#{startDt},'YYYY-MM-DD HH24:MI:SS')
                         GROUP BY T2.RID_CHNL
                ) 
               SELECT * FROM (
                   SELECT  RID_CHNL , PNT_AMT  --, TXN_TYPE 
                   FROM T 
               ) 
            ) S1          
         WHERE 1=1
         GROUP BY S1.RID_CHNL
) Z1 
JOIN LOY.LOY_CHNL Z2 ON Z1.RID_CHNL = Z2.RID 
LEFT JOIN COM.COMM_CODE CC ON Z2.CHNL_TYPE_CD  = CC.CODE_NAME  AND CC.GROUP_CODE = 'LOY_CHNL_TYPE_CD' AND CC.FLAG = 1 AND CC.LANG ='ko'
GROUP BY Z2.CHNL_TYPE_CD , CC.MARK_NAME , Z2.CHNL_NO , Z2.CHNL_NM , Z1.RID_CHNL 
ORDER BY ${strOrderby}	
		${strEndPaging}
		</select>
	<select id = "selectStoreAggPntReport2" parameterType = "com.icignal.kepler.report.dto.request.KprReportLnlReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportEmpPntResDto">
		/* KprReportMapper.selectStoreAggPntReport2 */
	SELECT 
     SUM(A1) AS A1
   , SUM(B1) AS B1
   , SUM(B2) AS B2
   , SUM(B3) AS B3
   , SUM(C1) AS C1
   , SUM(C2) AS C2
   , SUM(C3) AS C3
   , SUM(C4) AS C4
   , SUM(D1) AS D1
   , SUM(D2) AS D2
   , SUM(D3) AS D3
   ,  SUM(A1) + SUM(B3) - SUM(C4) - SUM(D3) AS E1
   , SUM(E2) AS E2
   , SUM(E3) AS E3 
   , SUM(E4) AS E4
FROM (
      SELECT        
           S1.RID_CHNL       
          , (SUM(com.nvl(C100, 0)) + SUM(com.nvl(C110, 0)) + SUM(com.nvl(C111, 0)) + SUM(com.nvl(C160, 0)) + SUM(com.nvl(C161, 0)) + SUM(com.nvl(C198, 0)) + SUM(com.nvl(C190, 0)))  -- + 적립
          
          - (SUM(com.nvl(C210, 0)) + SUM(com.nvl(C212, 0))) --   - 적립취소   
          
          - (SUM(com.nvl(C200, 0)) + SUM(com.nvl(C260, 0)) + SUM(com.nvl(C290, 0)))  --  - 사용(구매,관리자차감)
          
          + (SUM(com.nvl(C130, 0)) + SUM(com.nvl(C132, 0))) --  + 사용취소
          - SUM(com.nvl(C250, 0)) --  - 마이너스충당          
          - (SUM(com.nvl(C270, 0)) + SUM(com.nvl(C220, 0)))  -- - 소멸(탈회, 만료)
          AS A1  -- D1+D2
          , 0 AS B1          
          , 0 AS B2
          , 0 AS B3
          , 0 AS C1
          , 0 AS C2
          , 0 AS C3
          , 0 AS C4
          , 0 AS D1
          , 0 AS D2
          , 0 AS D3

          , 0 AS E2
          , 0 AS E3
          , sum(com.nvl(C250,0)) AS E4
     FROM (       
                WITH T AS ( 
                         SELECT 
                                 CEILING(COUNT(1) OVER()) totalCount
                                , 'A' AS GUBUN     
                               , RID_CHNL 
                               , TXN_TYPE 
                               , TXN_DTL_TYPE
                               , T1.CHNL_CTG                         
                               , SUM(PNT_AMT) AS PNT_AMT
                           FROM LOY.LOY_AGG_PNT_OFR_DAILY T1
                          WHERE 1=1
                           AND T1.TXN_DT <![CDATA[ < #{startDt} ]]>
                         <if test="ofrCtg != null and ofrCtg != ''"> 
                         AND  T1.OFR_CTG <![CDATA[ <> 'E' ]]> -- 임직원지급 오퍼 제외
                         </if>
                         GROUP BY T1.RID_CHNL , T1.TXN_TYPE , T1.TXN_DTL_TYPE , T1.CHNL_CTG 
                         ORDER BY TXN_TYPE , TXN_DTL_TYPE 
                ) 
               SELECT * FROM (
                   SELECT CHNL_CTG,  RID_CHNL ,  TXN_DTL_TYPE , PNT_AMT  --, TXN_TYPE 
                   FROM T 
               ) 
               PIVOT ( SUM(PNT_AMT) FOR  TXN_DTL_TYPE  IN (                                                        
                                                 '100'  AS C100   --  B1    구매적립      
                                                ,'110'  AS C110   --  B1    이벤트_멤버십  
                                                ,'111'  AS C111    -- B1    이벤트_온라인몰 
                                                ,'160'  AS C160   --  B1    CS적립        
                                                ,'161'  AS C161   --  B1    임직원적립     
                                                ,'198'  AS C198   --  B1    통합이관                                                                           
                                                ,'130'  AS C130   --  C2     사용취소                           
                                                ,'132'  AS C132   --  C2    사용취소_구거래
                                                ,'200'  AS C200   --  C1    상품구매      
                                                ,'250'  AS C250   --  C3    마이너스_충당  
                                                ,'260'  AS C260   --  C1    관리자차감    
                                                ,'210'  AS C210   --  B2     적립취소                               
                                                ,'212'  AS C212   --  B2     적립취소_구거래                              
                                                ,'270'  AS C270   --  D1    탈회소멸      
                                                ,'220'  AS C220   --  D2    만료소멸     
                                                ,'190'  AS C190   --  B1    전산오류적립
                                                ,'290'  AS C290   --  C4    전산오류차감
                                                )
                  )
            ) S1 
         WHERE 1=1
         GROUP BY  S1.RID_CHNL      

   UNION ALL 

    SELECT  
             S1.RID_CHNL
          , 0 AS A1
          , SUM(com.nvl(C100, 0)) + SUM(com.nvl(C110, 0)) + SUM(com.nvl(C111, 0)) + SUM(com.nvl(C160, 0)) + SUM(com.nvl(C161, 0)) + SUM(com.nvl(C198, 0)) + SUM(com.nvl(C190, 0)) AS B1  -- 적립          
          , SUM(com.nvl(C210, 0)) + SUM(com.nvl(C212, 0)) AS B2  -- 적립취소
          , (SUM(com.nvl(C100, 0)) + SUM(com.nvl(C110, 0)) + SUM(com.nvl(C111, 0)) + SUM(com.nvl(C160, 0)) + SUM(com.nvl(C161, 0)) + SUM(com.nvl(C198, 0))) - (SUM(com.nvl(C210, 0)) + SUM(com.nvl(C212, 0))) AS B3 -- (B1-B2)          
          , SUM(com.nvl(C200, 0)) + SUM(com.nvl(C260, 0)) + SUM(com.nvl(C290, 0)) AS C1  -- 사용
          , SUM(com.nvl(C130, 0)) + SUM(com.nvl(C132, 0))  AS C2   -- 사용취소
          , SUM(com.nvl(C250, 0))  AS C3   -- 마이너스충당
          , (SUM(com.nvl(C200, 0)) + SUM(com.nvl(C260, 0))) - (SUM(com.nvl(C130, 0)) + SUM(com.nvl(C132, 0))) AS C4 -- (C1-C2+C3)
          , SUM(com.nvl(C270, 0))  AS D1   -- 탈회
          , SUM(com.nvl(C220, 0))  AS D2   -- 만료소멸
          , (SUM(com.nvl(C270, 0)) + SUM(com.nvl(C220, 0)) )  AS D3
          , 0 AS E2
          , 0 AS E3
          , 0 AS E4
     FROM (       
                WITH T AS ( 
                         SELECT 
                                 CEILING(COUNT(1) OVER()) totalCount
                                , 'A' AS GUBUN     
                               , RID_CHNL 
                               , TXN_TYPE 
                               , TXN_DTL_TYPE
                               , T1.CHNL_CTG                         
                               , SUM(PNT_AMT) AS PNT_AMT
                           FROM LOY.LOY_AGG_PNT_OFR_DAILY T1
                          WHERE 1=1
                           AND T1.TXN_DT BETWEEN #{startDt} AND #{endDt}
                           <if test="ofrCtg != null and ofrCtg != ''"> 
                            AND  T1.OFR_CTG <![CDATA[ <> 'E' ]]>
                           </if>
                         GROUP BY T1.RID_CHNL , T1.TXN_TYPE , T1.TXN_DTL_TYPE , T1.CHNL_CTG 
                         ORDER BY TXN_TYPE , TXN_DTL_TYPE 
                ) 
               SELECT * FROM (
                   SELECT CHNL_CTG,  RID_CHNL ,  TXN_DTL_TYPE , PNT_AMT  --, TXN_TYPE 
                   FROM T 
               ) 
               PIVOT ( SUM(PNT_AMT) FOR  TXN_DTL_TYPE  IN (                                                        
                                                 '100'  AS C100   --  B1    구매적립      
                                                ,'110'  AS C110   --  B1    이벤트_멤버십  
                                                ,'111'  AS C111    -- B1    이벤트_온라인몰 
                                                ,'160'  AS C160   --  B1    CS적립        
                                                ,'161'  AS C161   --  B1    임직원적립     
                                                ,'198'  AS C198   --  B1    통합이관                                                                           
                                                ,'130'  AS C130   --  C2     사용취소                           
                                                ,'132'  AS C132   --  C2    사용취소_구거래
                                                ,'200'  AS C200   --  C1    상품구매      
                                                ,'250'  AS C250   --  C3    마이너스_충당  
                                                ,'260'  AS C260   --  C1    관리자차감    
                                                ,'210'  AS C210   --  B2     적립취소                               
                                                ,'212'  AS C212   --  B2     적립취소_구거래                              
                                                ,'270'  AS C270   --  D1    탈회소멸      
                                                ,'220'  AS C220   --  D2    만료소멸     
                                                ,'190'  AS C190   --  B1    전산오류적립
                                                ,'290'  AS C290   --  C4    전산오류차감
                                                )
                  )
            ) S1          
         WHERE 1=1
         GROUP BY S1.RID_CHNL
         
         UNION ALL
         
		SELECT  
             S1.RID_CHNL
          , 0 AS A1
          , 0 AS B1  -- 적립          
          , 0 AS B2  -- 적립취소
          , 0 AS B3 -- (B1-B2)          
          , 0 AS C1  -- 사용
          , 0  AS C2   -- 사용취소
          , 0  AS C3   -- 마이너스충당
          , 0 AS C4 -- (C1-C2+C3)
          , 0  AS D1   -- 탈회
          , 0  AS D2   -- 만료소멸
          , 0  AS D3
          , 0  AS E2
          , sum(S1.PNT_AMT) AS E3
          , 0  AS E4
     FROM (       
                WITH T AS ( 
                         SELECT 
                                 CEILING(COUNT(1) OVER()) totalCount
                                , 'A' AS GUBUN     
                               , T2.RID_CHNL     AS RID_CHNL
                               , SUM(MNS_PNT_OCCU_AMT) AS PNT_AMT
                           FROM LOY.LOY_PNT_MNS T1
                           JOIN LOY.LOY_PNT_TXN T2 ON T1.RID_PNT_TXN =T2.RID AND T2.FLAG = 1
                          WHERE 1=1
                           AND T1.FLAG = 1
                           AND T1.MNS_PNT_STAT_CD ='M'
                           AND T1.MNS_PNT_OCCU_DATE >= com.TO_DATE(#{startDt},'YYYY-MM-DD HH24:MI:SS') 
                           AND T1.MNS_PNT_OCCU_DATE <![CDATA[ < ]]> com.TO_DATE(#{endDt},'YYYY-MM-DD HH24:MI:SS') +1 
                         GROUP BY T2.RID_CHNL
                ) 
               SELECT * FROM (
                   SELECT  RID_CHNL , PNT_AMT  --, TXN_TYPE 
                   FROM T 
               ) 
            ) S1          
         WHERE 1=1
         GROUP BY S1.RID_CHNL
         
         UNION ALL
         
         SELECT  
             S1.RID_CHNL
          , 0 AS A1
          , 0 AS B1  -- 적립          
          , 0 AS B2  -- 적립취소
          , 0 AS B3 -- (B1-B2)          
          , 0 AS C1  -- 사용
          , 0  AS C2   -- 사용취소
          , 0  AS C3   -- 마이너스충당
          , 0 AS C4 -- (C1-C2+C3)
          , 0  AS D1   -- 탈회
          , 0  AS D2   -- 만료소멸
          , 0  AS D3
          , sum(S1.PNT_AMT) AS E2
          , 0 AS E3
          , 0 AS E4
     FROM (       
                WITH T AS ( 
                         SELECT 
                                 CEILING(COUNT(1) OVER()) totalCount
                                , 'A' AS GUBUN     
                               , T2.RID_CHNL     AS RID_CHNL
                               , SUM(MNS_PNT_OCCU_AMT) AS PNT_AMT
                           FROM LOY.LOY_PNT_MNS T1
                           JOIN LOY.LOY_PNT_TXN T2 ON T1.RID_PNT_TXN =T2.RID AND T2.FLAG = 1
                          WHERE 1=1
                           AND T1.FLAG = 1
                           AND T1.MNS_PNT_STAT_CD ='M'
                           AND T1.MNS_PNT_OCCU_DATE <![CDATA[ < ]]> com.TO_DATE(#{startDt},'YYYY-MM-DD HH24:MI:SS')
                         GROUP BY T2.RID_CHNL
                ) 
               SELECT * FROM (
                   SELECT  RID_CHNL , PNT_AMT  --, TXN_TYPE 
                   FROM T 
               ) 
            ) S1          
         WHERE 1=1
         GROUP BY S1.RID_CHNL
) Z1 
JOIN LOY.LOY_CHNL Z2 ON Z1.RID_CHNL = Z2.RID 
LEFT JOIN COM.COMM_CODE CC ON Z2.CHNL_TYPE_CD  = CC.CODE_NAME  AND CC.GROUP_CODE = 'LOY_CHNL_TYPE_CD' AND CC.FLAG = 1 AND CC.LANG ='ko'
WHERE 
	Z2.CHNL_TYPE_CD =#{chnlTypeCd}
GROUP BY Z2.CHNL_TYPE_CD
ORDER BY Z2.CHNL_TYPE_CD
	</select>
	
	<select id = "selectStoreEmpAggPntReport" parameterType = "com.icignal.kepler.report.dto.request.KprReportLnlReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportEmpPntResDto">
		/* KprReportMapper.selectStoreEmpAggPntReport */
				SELECT 
     	Z2.CHNL_TYPE_CD as chnlTypeCd
   		, CC.MARK_NAME as chnlType
   		, Z2.CHNL_NO as chnlNo
   		, Z2.CHNL_NM as chnlNm
  		 , Z1.RID_CHNL  as ridChnl
   		, SUM(A1) AS A1
  	 	, SUM(B1) AS B1
   		, SUM(B2) AS B2
   		, SUM(B3) AS B3
  	 	, SUM(C1) AS C1
   		, SUM(C2) AS C2
   		, SUM(C3) AS C3
   		, SUM(C4) AS C4
   		, SUM(D1) AS D1
   		, SUM(D2) AS D2
   		, SUM(D3) AS D3
   		,  SUM(A1) + SUM(B3) - SUM(C4) - SUM(D3) AS E1
   		, SUM(E2) AS E2
   		, SUM(E3) AS E3
   		, SUM(E4) AS E4 
   		 ,${strColumn}
	FROM (
       SELECT        
           S1.RID_CHNL       
          , (SUM(com.nvl(C100, 0)) + SUM(com.nvl(C110, 0)) + SUM(com.nvl(C111, 0)) + SUM(com.nvl(C160, 0)) + SUM(com.nvl(C161, 0)) + SUM(com.nvl(C198, 0)) + SUM(com.nvl(C190, 0)))  -- + 적립
          
          - (SUM(com.nvl(C210, 0)) + SUM(com.nvl(C212, 0))) --   - 적립취소   
          
          - (SUM(com.nvl(C200, 0)) + SUM(com.nvl(C260, 0)) + SUM(com.nvl(C290, 0)))  --  - 사용(구매,관리자차감)
          
          + (SUM(com.nvl(C130, 0)) + SUM(com.nvl(C132, 0))) --  + 사용취소
          - SUM(com.nvl(C250, 0)) --  - 마이너스충당          
          - (SUM(com.nvl(C270, 0)) + SUM(com.nvl(C220, 0)))  -- - 소멸(탈회, 만료)
          AS A1  -- D1+D2
          , 0 AS B1          
          , 0 AS B2
          , 0 AS B3
          , 0 AS C1
          , 0 AS C2
          , 0 AS C3
          , 0 AS C4
          , 0 AS D1
          , 0 AS D2
          , 0 AS D3
          , 0 AS E2
          , 0 AS E3
          , sum(com.nvl(C250,0)) AS E4
     FROM (       
                WITH T AS ( 
                         SELECT 
                                 CEILING(COUNT(1) OVER()) totalCount
                                , 'A' AS GUBUN     
                               , RID_CHNL 
                               , TXN_TYPE 
                               , TXN_DTL_TYPE
                               , T1.CHNL_CTG                         
                               , SUM(PNT_AMT) AS PNT_AMT
                           FROM LOY.LOY_AGG_PNT_OFR_DAILY T1
                          WHERE 1=1
                           AND T1.TXN_DT <![CDATA[ < #{startDt} ]]>
                           AND  T1.OFR_CTG = 'E'  -- 임직원지급 오퍼
                           <if test="ridOfr != null and ridOfr != ''"> 
                           AND  T1.RID_OFR =#{ridOfr}
                           </if>  
                         GROUP BY T1.RID_CHNL , T1.TXN_TYPE , T1.TXN_DTL_TYPE , T1.CHNL_CTG 
                         ORDER BY TXN_TYPE , TXN_DTL_TYPE 
                ) 
               SELECT * FROM (
                   SELECT CHNL_CTG,  RID_CHNL ,  TXN_DTL_TYPE , PNT_AMT  --, TXN_TYPE 
                   FROM T 
               ) 
               PIVOT ( SUM(PNT_AMT) FOR  TXN_DTL_TYPE  IN (                                                        
                                                 '100'  AS C100   --  B1    구매적립      
                                                ,'110'  AS C110   --  B1    이벤트_멤버십  
                                                ,'111'  AS C111    -- B1    이벤트_온라인몰 
                                                ,'160'  AS C160   --  B1    CS적립        
                                                ,'161'  AS C161   --  B1    임직원적립     
                                                ,'198'  AS C198   --  B1    통합이관                                                                           
                                                ,'130'  AS C130   --  C2     사용취소                           
                                                ,'132'  AS C132   --  C2    사용취소_구거래
                                                ,'200'  AS C200   --  C1    상품구매      
                                                ,'250'  AS C250   --  C3    마이너스_충당  
                                                ,'260'  AS C260   --  C1    관리자차감    
                                                ,'210'  AS C210   --  B2     적립취소                               
                                                ,'212'  AS C212   --  B2     적립취소_구거래                              
                                                ,'270'  AS C270   --  D1    탈회소멸      
                                                ,'220'  AS C220   --  D2    만료소멸     
                                                ,'190'  AS C190   --  B1    전산오류적립
                                                ,'290'  AS C290   --  C4    전산오류차감
                                                )
                  )
            ) S1 
         WHERE 1=1
         GROUP BY  S1.RID_CHNL      
   UNION ALL 
    SELECT  
             S1.RID_CHNL
          , 0 AS A1
          , SUM(com.nvl(C100, 0)) + SUM(com.nvl(C110, 0)) + SUM(com.nvl(C111, 0)) + SUM(com.nvl(C160, 0)) + SUM(com.nvl(C161, 0)) + SUM(com.nvl(C198, 0)) + SUM(com.nvl(C190, 0)) AS B1  -- 적립          
          , SUM(com.nvl(C210, 0)) + SUM(com.nvl(C212, 0)) AS B2  -- 적립취소
          , (SUM(com.nvl(C100, 0)) + SUM(com.nvl(C110, 0)) + SUM(com.nvl(C111, 0)) + SUM(com.nvl(C160, 0)) + SUM(com.nvl(C161, 0)) + SUM(com.nvl(C198, 0))) - (SUM(com.nvl(C210, 0)) + SUM(com.nvl(C212, 0))) AS B3 -- (B1-B2)          
          , SUM(com.nvl(C200, 0)) + SUM(com.nvl(C260, 0)) + SUM(com.nvl(C290, 0)) AS C1  -- 사용
          , SUM(com.nvl(C130, 0)) + SUM(com.nvl(C132, 0))  AS C2   -- 사용취소
          , SUM(com.nvl(C250, 0))  AS C3   -- 마이너스충당
          , (SUM(com.nvl(C200, 0)) + SUM(com.nvl(C260, 0))) - (SUM(com.nvl(C130, 0)) + SUM(com.nvl(C132, 0)))  AS C4 -- (C1-C2+C3)
          , SUM(com.nvl(C270, 0))  AS D1   -- 탈회
          , SUM(com.nvl(C220, 0))  AS D2   -- 만료소멸
          , (SUM(com.nvl(C270, 0)) + SUM(com.nvl(C220, 0)) )  AS D3
          , 0 AS E2 
          , 0 AS E3
          , 0 AS E4
     FROM (       
                WITH T AS ( 
                         SELECT 
                                 CEILING(COUNT(1) OVER()) totalCount
                                , 'A' AS GUBUN     
                               , RID_CHNL 
                               , TXN_TYPE 
                               , TXN_DTL_TYPE
                               , T1.CHNL_CTG                         
                               , SUM(PNT_AMT) AS PNT_AMT
                           FROM LOY.LOY_AGG_PNT_OFR_DAILY T1
                          WHERE 1=1
                           AND T1.TXN_DT BETWEEN #{startDt} AND #{endDt}
                           AND  T1.OFR_CTG = 'E'
                          <if test="ridOfr != null and ridOfr != ''"> 
                           AND  T1.RID_OFR =#{ridOfr}
                           </if> 
                         GROUP BY T1.RID_CHNL , T1.TXN_TYPE , T1.TXN_DTL_TYPE , T1.CHNL_CTG 
                         ORDER BY TXN_TYPE , TXN_DTL_TYPE 
                ) 
               SELECT * FROM (
                   SELECT CHNL_CTG,  RID_CHNL ,  TXN_DTL_TYPE , PNT_AMT  --, TXN_TYPE 
                   FROM T 
               ) 
               PIVOT ( SUM(PNT_AMT) FOR  TXN_DTL_TYPE  IN (                                                        
                                                 '100'  AS C100   --  B1    구매적립      
                                                ,'110'  AS C110   --  B1    이벤트_멤버십  
                                                ,'111'  AS C111    -- B1    이벤트_온라인몰 
                                                ,'160'  AS C160   --  B1    CS적립        
                                                ,'161'  AS C161   --  B1    임직원적립     
                                                ,'198'  AS C198   --  B1    통합이관                                                                           
                                                ,'130'  AS C130   --  C2     사용취소                           
                                                ,'132'  AS C132   --  C2    사용취소_구거래
                                                ,'200'  AS C200   --  C1    상품구매      
                                                ,'250'  AS C250   --  C3    마이너스_충당  
                                                ,'260'  AS C260   --  C1    관리자차감    
                                                ,'210'  AS C210   --  B2     적립취소                               
                                                ,'212'  AS C212   --  B2     적립취소_구거래                              
                                                ,'270'  AS C270   --  D1    탈회소멸      
                                                ,'220'  AS C220   --  D2    만료소멸     
                                                ,'190'  AS C190   --  B1    전산오류적립
                                                ,'290'  AS C290   --  C4    전산오류차감
                                                )
                  )
            ) S1       
         WHERE 1=1
         GROUP BY S1.RID_CHNL  
         
         UNION ALL
         
		SELECT  
             S1.RID_CHNL
          , 0 AS A1
          , 0 AS B1  -- 적립          
          , 0 AS B2  -- 적립취소
          , 0 AS B3 -- (B1-B2)          
          , 0 AS C1  -- 사용
          , 0  AS C2   -- 사용취소
          , 0  AS C3   -- 마이너스충당
          , 0 AS C4 -- (C1-C2+C3)
          , 0  AS D1   -- 탈회
          , 0  AS D2   -- 만료소멸
          , 0  AS D3
          , 0  AS E2
          , sum(S1.PNT_AMT) AS E3
          , 0  AS E4
     FROM (       
                WITH T AS ( 
                         SELECT 
                                 CEILING(COUNT(1) OVER()) totalCount
                                , 'A' AS GUBUN     
                               , T2.RID_CHNL     AS RID_CHNL
                               , SUM(MNS_PNT_OCCU_AMT) AS PNT_AMT
                           FROM LOY.LOY_PNT_MNS T1
                           JOIN LOY.LOY_PNT_TXN T2 ON T1.RID_PNT_TXN =T2.RID  AND T2.FLAG = 1
                           JOIN LOY.LOY_MBR T3 ON T3.RID = T2.RID_MBR
                           JOIN LOY.LOY_CUST T4 ON T4.RID = T3.RID_CUST
                          WHERE 1=1
                           AND T1.FLAG = 1
                           AND T1.MNS_PNT_STAT_CD ='M'
                           AND T4.CUST_TYPE_CD = 'E'
                           AND T1.MNS_PNT_OCCU_DATE >= com.TO_DATE(#{startDt},'YYYY-MM-DD HH24:MI:SS') 
                           AND T1.MNS_PNT_OCCU_DATE <![CDATA[ < ]]> com.TO_DATE(#{endDt},'YYYY-MM-DD HH24:MI:SS') +1 
                         GROUP BY T2.RID_CHNL
                ) 
               SELECT * FROM (
                   SELECT  RID_CHNL , PNT_AMT  --, TXN_TYPE 
                   FROM T 
               ) 
            ) S1          
         WHERE 1=1
         GROUP BY S1.RID_CHNL
         
         UNION ALL
         
         SELECT  
             S1.RID_CHNL
          , 0 AS A1
          , 0 AS B1  -- 적립          
          , 0 AS B2  -- 적립취소
          , 0 AS B3 -- (B1-B2)          
          , 0 AS C1  -- 사용
          , 0  AS C2   -- 사용취소
          , 0  AS C3   -- 마이너스충당
          , 0 AS C4 -- (C1-C2+C3)
          , 0  AS D1   -- 탈회
          , 0  AS D2   -- 만료소멸
          , 0  AS D3
          , sum(S1.PNT_AMT) AS E2
          , 0 AS E3
          , 0 AS E4
     FROM (       
                WITH T AS ( 
                         SELECT 
                                 CEILING(COUNT(1) OVER()) totalCount
                                , 'A' AS GUBUN     
                               , T2.RID_CHNL     AS RID_CHNL
                               , SUM(MNS_PNT_OCCU_AMT) AS PNT_AMT
                           FROM LOY.LOY_PNT_MNS T1
                           JOIN LOY.LOY_PNT_TXN T2 ON T1.RID_PNT_TXN =T2.RID AND T2.FLAG = 1
                           JOIN LOY.LOY_MBR T3 ON T3.RID = T2.RID_MBR
                           JOIN LOY.LOY_CUST T4 ON T4.RID = T3.RID_CUST
                          WHERE 1=1
                           AND T1.FLAG = 1
                           AND T1.MNS_PNT_STAT_CD ='M'
                           AND T4.CUST_TYPE_CD = 'E'
                           AND T1.MNS_PNT_OCCU_DATE <![CDATA[ < ]]> com.TO_DATE(#{startDt},'YYYY-MM-DD HH24:MI:SS')
                         GROUP BY T2.RID_CHNL
                ) 
               SELECT * FROM (
                   SELECT  RID_CHNL , PNT_AMT  --, TXN_TYPE 
                   FROM T 
               ) 
            ) S1          
         WHERE 1=1
         GROUP BY S1.RID_CHNL
) Z1 
	JOIN LOY.LOY_CHNL Z2 ON Z1.RID_CHNL = Z2.RID 
	LEFT JOIN COM.COMM_CODE CC ON Z2.CHNL_TYPE_CD  = CC.CODE_NAME  AND CC.GROUP_CODE = 'LOY_CHNL_TYPE_CD' AND CC.FLAG = 1 AND CC.LANG ='ko'
	GROUP BY Z2.CHNL_TYPE_CD , CC.MARK_NAME , Z2.CHNL_NO , Z2.CHNL_NM , Z1.RID_CHNL 
	ORDER BY 
	${strOrderby}	${strEndPaging}
	</select>
	
	<select id = "selectStoreEmpAggPntReport2" parameterType = "com.icignal.kepler.report.dto.request.KprReportLnlReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportEmpPntResDto">
	/* KprReportMapper.selectStoreEmpAggPntReport2 */
				SELECT 
     	 SUM(A1) AS A1
  	 	, SUM(B1) AS B1
   		, SUM(B2) AS B2
   		, SUM(B3) AS B3
  	 	, SUM(C1) AS C1
   		, SUM(C2) AS C2
   		, SUM(C3) AS C3
   		, SUM(C4) AS C4
   		, SUM(D1) AS D1
   		, SUM(D2) AS D2
   		, SUM(D3) AS D3
   		,  SUM(A1) + SUM(B3) - SUM(C4) - SUM(D3) AS E1
   		, SUM(E2) AS E2
   		, SUM(E3) AS E3
   		, SUM(E4) AS E4 
	FROM (
      SELECT        
           S1.RID_CHNL       
          , (SUM(com.nvl(C100, 0)) + SUM(com.nvl(C110, 0)) + SUM(com.nvl(C111, 0)) + SUM(com.nvl(C160, 0)) + SUM(com.nvl(C161, 0)) + SUM(com.nvl(C198, 0)) + SUM(com.nvl(C190, 0)))  -- + 적립
          
          - (SUM(com.nvl(C210, 0)) + SUM(com.nvl(C212, 0))) --   - 적립취소   
          
          - (SUM(com.nvl(C200, 0)) + SUM(com.nvl(C260, 0)) + SUM(com.nvl(C290, 0)))  --  - 사용(구매,관리자차감)
          
          + (SUM(com.nvl(C130, 0)) + SUM(com.nvl(C132, 0))) --  + 사용취소
          - SUM(com.nvl(C250, 0)) --  - 마이너스충당          
          - (SUM(com.nvl(C270, 0)) + SUM(com.nvl(C220, 0)))  -- - 소멸(탈회, 만료)
          AS A1  -- D1+D2
          , 0 AS B1          
          , 0 AS B2
          , 0 AS B3
          , 0 AS C1
          , 0 AS C2
          , 0 AS C3
          , 0 AS C4
          , 0 AS D1
          , 0 AS D2
          , 0 AS D3
          , 0 AS E2
          , 0 AS E3
          , sum(com.nvl(C250,0)) AS E4
     FROM (       
                WITH T AS ( 
                         SELECT 
                                 CEILING(COUNT(1) OVER()) totalCount
                                , 'A' AS GUBUN     
                               , RID_CHNL 
                               , TXN_TYPE 
                               , TXN_DTL_TYPE
                               , T1.CHNL_CTG                         
                               , SUM(PNT_AMT) AS PNT_AMT
                           FROM LOY.LOY_AGG_PNT_OFR_DAILY T1
                          WHERE 1=1
                           AND T1.TXN_DT <![CDATA[ < #{startDt} ]]>
                           AND  T1.OFR_CTG = 'E'  -- 임직원지급 오퍼
                          <if test="ridOfr != null and ridOfr != ''"> 
                           AND  T1.RID_OFR =#{ridOfr}
                           </if> 
                         GROUP BY T1.RID_CHNL , T1.TXN_TYPE , T1.TXN_DTL_TYPE , T1.CHNL_CTG 
                         ORDER BY TXN_TYPE , TXN_DTL_TYPE 
                ) 
               SELECT * FROM (
                   SELECT CHNL_CTG,  RID_CHNL ,  TXN_DTL_TYPE , PNT_AMT  --, TXN_TYPE 
                   FROM T 
               ) 
               PIVOT ( SUM(PNT_AMT) FOR  TXN_DTL_TYPE  IN (                                                        
                                                 '100'  AS C100   --  B1    구매적립      
                                                ,'110'  AS C110   --  B1    이벤트_멤버십  
                                                ,'111'  AS C111    -- B1    이벤트_온라인몰 
                                                ,'160'  AS C160   --  B1    CS적립        
                                                ,'161'  AS C161   --  B1    임직원적립     
                                                ,'198'  AS C198   --  B1    통합이관                                                                           
                                                ,'130'  AS C130   --  C2     사용취소                           
                                                ,'132'  AS C132   --  C2    사용취소_구거래
                                                ,'200'  AS C200   --  C1    상품구매      
                                                ,'250'  AS C250   --  C3    마이너스_충당  
                                                ,'260'  AS C260   --  C1    관리자차감    
                                                ,'210'  AS C210   --  B2     적립취소                               
                                                ,'212'  AS C212   --  B2     적립취소_구거래                              
                                                ,'270'  AS C270   --  D1    탈회소멸      
                                                ,'220'  AS C220   --  D2    만료소멸     
                                                ,'190'  AS C190   --  B1    전산오류적립
                                                ,'290'  AS C290   --  C4    전산오류차감
                                                )
                  )
            ) S1 
         WHERE 1=1
         GROUP BY  S1.RID_CHNL      
   UNION ALL 
    SELECT  
             S1.RID_CHNL
          , 0 AS A1
          , SUM(com.nvl(C100, 0)) + SUM(com.nvl(C110, 0)) + SUM(com.nvl(C111, 0)) + SUM(com.nvl(C160, 0)) + SUM(com.nvl(C161, 0)) + SUM(com.nvl(C198, 0)) + SUM(com.nvl(C190, 0))  AS B1  -- 적립          
          , SUM(com.nvl(C210, 0)) + SUM(com.nvl(C212, 0)) AS B2  -- 적립취소
          , (SUM(com.nvl(C100, 0)) + SUM(com.nvl(C110, 0)) + SUM(com.nvl(C111, 0)) + SUM(com.nvl(C160, 0)) + SUM(com.nvl(C161, 0)) + SUM(com.nvl(C198, 0))) - (SUM(com.nvl(C210, 0)) + SUM(com.nvl(C212, 0))) AS B3 -- (B1-B2)          
          , SUM(com.nvl(C200, 0)) + SUM(com.nvl(C260, 0)) + SUM(com.nvl(C290, 0)) AS C1  -- 사용
          , SUM(com.nvl(C130, 0)) + SUM(com.nvl(C132, 0))  AS C2   -- 사용취소
          , SUM(com.nvl(C250, 0))  AS C3   -- 마이너스충당
          , (SUM(com.nvl(C200, 0)) + SUM(com.nvl(C260, 0))) - (SUM(com.nvl(C130, 0)) + SUM(com.nvl(C132, 0))) AS C4 -- (C1-C2+C3)
          , SUM(com.nvl(C270, 0))  AS D1   -- 탈회
          , SUM(com.nvl(C220, 0))  AS D2   -- 만료소멸
          , (SUM(com.nvl(C270, 0)) + SUM(com.nvl(C220, 0)) )  AS D3
          , 0 AS E2 
          , 0 AS E3
          , 0 AS E4
     FROM (       
                WITH T AS ( 
                         SELECT 
                                 CEILING(COUNT(1) OVER()) totalCount
                                , 'A' AS GUBUN     
                               , RID_CHNL 
                               , TXN_TYPE 
                               , TXN_DTL_TYPE
                               , T1.CHNL_CTG                         
                               , SUM(PNT_AMT) AS PNT_AMT
                           FROM LOY.LOY_AGG_PNT_OFR_DAILY T1
                          WHERE 1=1
                           AND T1.TXN_DT BETWEEN #{startDt} AND #{endDt}
                           AND  T1.OFR_CTG = 'E'
                           <if test="ridOfr != null and ridOfr != ''"> 
                           AND  T1.RID_OFR =#{ridOfr}
                           </if> 
                         GROUP BY T1.RID_CHNL , T1.TXN_TYPE , T1.TXN_DTL_TYPE , T1.CHNL_CTG 
                         ORDER BY TXN_TYPE , TXN_DTL_TYPE 
                ) 
               SELECT * FROM (
                   SELECT CHNL_CTG,  RID_CHNL ,  TXN_DTL_TYPE , PNT_AMT  --, TXN_TYPE 
                   FROM T 
               ) 
               PIVOT ( SUM(PNT_AMT) FOR  TXN_DTL_TYPE  IN (                                                        
                                                 '100'  AS C100   --  B1    구매적립      
                                                ,'110'  AS C110   --  B1    이벤트_멤버십  
                                                ,'111'  AS C111    -- B1    이벤트_온라인몰 
                                                ,'160'  AS C160   --  B1    CS적립        
                                                ,'161'  AS C161   --  B1    임직원적립     
                                                ,'198'  AS C198   --  B1    통합이관                                                                           
                                                ,'130'  AS C130   --  C2     사용취소                           
                                                ,'132'  AS C132   --  C2    사용취소_구거래
                                                ,'200'  AS C200   --  C1    상품구매      
                                                ,'250'  AS C250   --  C3    마이너스_충당  
                                                ,'260'  AS C260   --  C1    관리자차감    
                                                ,'210'  AS C210   --  B2     적립취소                               
                                                ,'212'  AS C212   --  B2     적립취소_구거래                              
                                                ,'270'  AS C270   --  D1    탈회소멸      
                                                ,'220'  AS C220   --  D2    만료소멸     
                                                ,'190'  AS C190   --  B1    전산오류적립
                                                ,'290'  AS C290   --  C4    전산오류차감
                                                )
                  )
            ) S1       
         WHERE 1=1
         GROUP BY S1.RID_CHNL  
         
         UNION ALL
         
		SELECT  
             S1.RID_CHNL
          , 0 AS A1
          , 0 AS B1  -- 적립          
          , 0 AS B2  -- 적립취소
          , 0 AS B3 -- (B1-B2)          
          , 0 AS C1  -- 사용
          , 0  AS C2   -- 사용취소
          , 0  AS C3   -- 마이너스충당
          , 0 AS C4 -- (C1-C2+C3)
          , 0  AS D1   -- 탈회
          , 0  AS D2   -- 만료소멸
          , 0  AS D3
          , 0  AS E2
          , sum(S1.PNT_AMT) AS E3
          , 0  AS E4
     FROM (       
                WITH T AS ( 
                         SELECT 
                                 CEILING(COUNT(1) OVER()) totalCount
                                , 'A' AS GUBUN     
                               , T2.RID_CHNL     AS RID_CHNL
                               , SUM(MNS_PNT_OCCU_AMT) AS PNT_AMT
                           FROM LOY.LOY_PNT_MNS T1
                           JOIN LOY.LOY_PNT_TXN T2 ON T1.RID_PNT_TXN =T2.RID AND T2.FLAG = 1
                           JOIN LOY.LOY_MBR T3 ON T3.RID = T2.RID_MBR
                           JOIN LOY.LOY_CUST T4 ON T4.RID = T3.RID_CUST
                          WHERE 1=1
                           AND T1.FLAG = 1
                           AND T1.MNS_PNT_STAT_CD ='M'
                           AND T4.CUST_TYPE_CD = 'E'
                           AND T1.MNS_PNT_OCCU_DATE >= com.TO_DATE(#{startDt},'YYYY-MM-DD HH24:MI:SS') 
                           AND T1.MNS_PNT_OCCU_DATE <![CDATA[ < ]]> com.TO_DATE(#{endDt},'YYYY-MM-DD HH24:MI:SS') +1 
                         GROUP BY T2.RID_CHNL
                ) 
               SELECT * FROM (
                   SELECT  RID_CHNL , PNT_AMT  --, TXN_TYPE 
                   FROM T 
               ) 
            ) S1          
         WHERE 1=1
         GROUP BY S1.RID_CHNL
         
         UNION ALL
         
         SELECT  
             S1.RID_CHNL
          , 0 AS A1
          , 0 AS B1  -- 적립          
          , 0 AS B2  -- 적립취소
          , 0 AS B3 -- (B1-B2)          
          , 0 AS C1  -- 사용
          , 0  AS C2   -- 사용취소
          , 0  AS C3   -- 마이너스충당
          , 0 AS C4 -- (C1-C2+C3)
          , 0  AS D1   -- 탈회
          , 0  AS D2   -- 만료소멸
          , 0  AS D3
          , sum(S1.PNT_AMT) AS E2
          , 0 AS E3
          , 0 AS E4
     FROM (       
                WITH T AS ( 
                         SELECT 
                                 CEILING(COUNT(1) OVER()) totalCount
                                , 'A' AS GUBUN     
                               , T2.RID_CHNL     AS RID_CHNL
                               , SUM(MNS_PNT_OCCU_AMT) AS PNT_AMT
                           FROM LOY.LOY_PNT_MNS T1
                           JOIN LOY.LOY_PNT_TXN T2 ON T1.RID_PNT_TXN =T2.RID AND T2.FLAG = 1
                           JOIN LOY.LOY_MBR T3 ON T3.RID = T2.RID_MBR
                           JOIN LOY.LOY_CUST T4 ON T4.RID = T3.RID_CUST
                          WHERE 1=1
                           AND T1.FLAG = 1
                           AND T1.MNS_PNT_STAT_CD ='M'
                           AND T4.CUST_TYPE_CD = 'E'
                           AND T1.MNS_PNT_OCCU_DATE <![CDATA[ < ]]> com.TO_DATE(#{startDt},'YYYY-MM-DD HH24:MI:SS')
                         GROUP BY T2.RID_CHNL
                ) 
               SELECT * FROM (
                   SELECT  RID_CHNL , PNT_AMT  --, TXN_TYPE 
                   FROM T 
               ) 
            ) S1          
         WHERE 1=1
         GROUP BY S1.RID_CHNL
) Z1 
	JOIN LOY.LOY_CHNL Z2 ON Z1.RID_CHNL = Z2.RID 
	LEFT JOIN COM.COMM_CODE CC ON Z2.CHNL_TYPE_CD  = CC.CODE_NAME  AND CC.GROUP_CODE = 'LOY_CHNL_TYPE_CD' AND CC.FLAG = 1 AND CC.LANG ='ko'
	WHERE Z2.CHNL_TYPE_CD =#{chnlTypeCd}
	GROUP BY Z2.CHNL_TYPE_CD
	ORDER BY Z2.CHNL_TYPE_CD
	</select>
	
	<select id = "selectEmpAggPntReport2" parameterType = "com.icignal.kepler.report.dto.request.KprReportLnlReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportEmpPntResDto">
		/* KprReportMapper.selectEmpAggPntReport2 */
		SELECT 
    SUM(A1) AS A1
   , SUM(B1) AS B1
   , SUM(B2) AS B2
   , SUM(B3) AS B3
   , SUM(C1) AS C1
   , SUM(C2) AS C2
   , SUM(C3) AS C3
   , SUM(C4) AS C4
   , SUM(D1) AS D1
   , SUM(D2) AS D2
   , SUM(D3) AS D3
   ,  SUM(A1) + SUM(B3) - SUM(C4) - SUM(D3) AS E1
   , CEILING(COUNT(1) OVER()) totalCount
FROM (
      SELECT        
            RID_MBR
          , RID_OFR   
          , (SUM(com.nvl(C100, 0)) + SUM(com.nvl(C110, 0)) + SUM(com.nvl(C111, 0)) + SUM(com.nvl(C160, 0)) + SUM(com.nvl(C161, 0)) + SUM(com.nvl(C198, 0))) - (SUM(com.nvl(C210, 0)) + SUM(com.nvl(C212, 0))) -- (B1-B2)          
          - (SUM(com.nvl(C200, 0)) + SUM(com.nvl(C260, 0))) - (SUM(com.nvl(C130, 0)) + SUM(com.nvl(C132, 0))) + SUM(com.nvl(C250, 0)) -- (C1-C2+C3)
          - (SUM(com.nvl(C270, 0)) + SUM(com.nvl(C220, 0)) )  AS A1  -- D1+D2
          , 0 AS B1          
          , 0 AS B2
          , 0 AS B3
          , 0 AS C1
          , 0 AS C2
          , 0 AS C3
          , 0 AS C4
          , 0 AS D1
          , 0 AS D2
          , 0 AS D3
     FROM (       
                    WITH T AS ( 
                         SELECT 
                                  T1.RID_OFR 
                                , T1.RID_MBR 
                               , T1.TXN_TYPE 
                               , T1.TXN_DTL_TYPE                                                        
                               , SUM(PNT_AMT) AS PNT_AMT
                           FROM LOY.LOY_AGG_PNT_OFR_DAILY T1
                          WHERE 1=1
                           AND T1.TXN_DT   <![CDATA[ < #{startDt} ]]>
                           AND  T1.OFR_CTG = 'E'
      					<if test="ridOfr != null and ridOfr != ''"> 
                           AND  T1.RID_OFR =#{ridOfr}
                           </if>
                         GROUP BY  T1.RID_OFR , T1.RID_MBR , T1.TXN_TYPE , T1.TXN_DTL_TYPE
                         ORDER BY T1.RID_OFR , T1.RID_MBR, TXN_TYPE , TXN_DTL_TYPE 

                ) 
               SELECT * FROM (
                   SELECT  RID_MBR, RID_OFR ,  TXN_DTL_TYPE , PNT_AMT
                   FROM T 
               ) 
               PIVOT ( SUM(PNT_AMT) FOR  TXN_DTL_TYPE  IN (                                                        
                                                 '100'  AS C100   --  B1    구매적립      
                                                ,'110'  AS C110   --  B1    이벤트_멤버십  
                                                ,'111'  AS C111    -- B1    이벤트_온라인몰 
                                                ,'160'  AS C160   --  B1    CS적립        
                                                ,'161'  AS C161   --  B1    임직원적립     
                                                ,'198'  AS C198   --  B1    통합이관                                                                           
                                                ,'130'  AS C130   --  C2     사용취소                           
                                                ,'132'  AS C132   --  C2    사용취소_구거래
                                                ,'200'  AS C200   --  C1    상품구매      
                                                ,'250'  AS C250   --  C3    마이너스_충당  
                                                ,'260'  AS C260   --  C1    관리자차감    
                                                ,'210'  AS C210   --  B2     적립취소                               
                                                ,'212'  AS C212   --  B2     적립취소_구거래                              
                                                ,'270'  AS C270   --  D1    탈회소멸      
                                                ,'220'  AS C220   --  D2    만료소멸     

                                                )
                  )
            ) S1 
         WHERE 1=1
         GROUP BY S1.RID_OFR , S1.RID_MBR 
 UNION ALL 
       SELECT  
                RID_MBR
              , RID_OFR
             , 0 AS A1
             , SUM(com.nvl(C100, 0)) + SUM(com.nvl(C110, 0)) + SUM(com.nvl(C111, 0)) + SUM(com.nvl(C160, 0)) + SUM(com.nvl(C161, 0)) + SUM(com.nvl(C198, 0)) AS B1  -- 적립          
             , SUM(com.nvl(C210, 0)) + SUM(com.nvl(C212, 0)) AS B2  -- 적립취소
             , (SUM(com.nvl(C100, 0)) + SUM(com.nvl(C110, 0)) + SUM(com.nvl(C111, 0)) + SUM(com.nvl(C160, 0)) + SUM(com.nvl(C161, 0)) + SUM(com.nvl(C198, 0))) - (SUM(com.nvl(C210, 0)) + SUM(com.nvl(C212, 0))) AS B3 -- (B1-B2)          
             , SUM(com.nvl(C200, 0)) + SUM(com.nvl(C260, 0)) AS C1  -- 사용
             , SUM(com.nvl(C130, 0)) + SUM(com.nvl(C132, 0))  AS C2   -- 사용취소
             , SUM(com.nvl(C250, 0))  AS C3   -- 마이너스충당
             , (SUM(com.nvl(C200, 0)) + SUM(com.nvl(C260, 0))) - (SUM(com.nvl(C130, 0)) + SUM(com.nvl(C132, 0))) + SUM(com.nvl(C250, 0)) AS C4 -- (C1-C2+C3)
             , SUM(com.nvl(C270, 0))  AS D1   -- 탈회
             , SUM(com.nvl(C220, 0))  AS D2   -- 만료소멸
             , (SUM(com.nvl(C270, 0)) + SUM(com.nvl(C220, 0)) )  AS D3
        FROM (       
                   WITH T AS ( 
                            SELECT                                  
                                     T1.RID_OFR 
                                   , T1.RID_MBR 
                                  , T1.TXN_TYPE 
                                  , T1.TXN_DTL_TYPE                                                        
                                  , SUM(PNT_AMT) AS PNT_AMT
                              FROM LOY.LOY_AGG_PNT_OFR_DAILY T1
                             WHERE 1=1
                              AND T1.TXN_DT BETWEEN #{startDt} AND #{endDt}
                              AND  T1.OFR_CTG = 'E'
     						  <if test="ridOfr != null and ridOfr != ''"> 
                                AND  T1.RID_OFR =#{ridOfr}
                              </if>
                            GROUP BY  T1.RID_OFR , T1.RID_MBR , T1.TXN_TYPE , T1.TXN_DTL_TYPE
                            ORDER BY T1.RID_OFR , T1.RID_MBR, TXN_TYPE , TXN_DTL_TYPE 

                   ) 
                  SELECT * FROM (
                      SELECT  RID_MBR, RID_OFR ,  TXN_DTL_TYPE , PNT_AMT
                      FROM T 
                  ) 
                  PIVOT ( SUM(PNT_AMT) FOR  TXN_DTL_TYPE  IN (                                                        
                                                    '100'  AS C100   --  B1    구매적립      
                                                   ,'110'  AS C110   --  B1    이벤트_멤버십  
                                                   ,'111'  AS C111    -- B1    이벤트_온라인몰 
                                                   ,'160'  AS C160   --  B1    CS적립        
                                                   ,'161'  AS C161   --  B1    임직원적립     
                                                   ,'198'  AS C198   --  B1    통합이관                                                                           
                                                   ,'130'  AS C130   --  C2     사용취소                           
                                                   ,'132'  AS C132   --  C2    사용취소_구거래
                                                   ,'200'  AS C200   --  C1    상품구매      
                                                   ,'250'  AS C250   --  C3    마이너스_충당  
                                                   ,'260'  AS C260   --  C1    관리자차감    
                                                   ,'210'  AS C210   --  B2     적립취소                               
                                                   ,'212'  AS C212   --  B2     적립취소_구거래                              
                                                   ,'270'  AS C270   --  D1    탈회소멸      
                                                   ,'220'  AS C220   --  D2    만료소멸                                                        
                                                   )
                     )
               ) S1       
            WHERE 1=1
            GROUP BY S1.RID_OFR , S1.RID_MBR 
   ) Z1  -- UNION ALL 
   LEFT JOIN LOY.LOY_MBR  M1 ON Z1.RID_MBR = M1.RID 
   LEFT JOIN LOY.LOY_CUST C1 ON C1.RID = M1.RID_CUST 
   	LEFT JOIN LOY.LOY_CUST_I C2 ON  C1.RID    = C2.RID_CUST
   	LEFT JOIN LOY.LOY_INTER_PERSON L1 ON C2.EMP_NO = L1.EMP_NO
   	LEFT JOIN LOY.LOY_OFR O1 ON Z1.RID_OFR = O1.RID
	</select>

 	<select id = "selectEmpAggUsePntReport" parameterType = "com.icignal.kepler.report.dto.request.KprReportLnlReqDto" 
	resultType="com.icignal.kepler.report.dto.response.KprReportEmpPntResDto">
	SELECT
 	  	  C2.EMP_NO      											AS empNo       -- 사번
    	, L1.COMPANY_NM  											AS companyNm  --회사명
    	, L1.TEAM_NM     											AS teamNm     --부서명
    	, C1.CUST_NM     											AS custNm  --이름
    	, lC.CHNL_NM     											AS chnlNm --채널명
    	, o1.OFR_NM      											AS ofrNm  --오퍼명
    	,  PKG_LOY_FN.FN_GET_ORD_TXN_DESC(Z1.RID_PNT_TXN)  AS txnDesc
        , txn.rcpt_no                              					AS rceptNo
    	,com.TO_CHAR(com.TO_DATE(Z1.TXN_DT,'YYYYMMDD'),'YYYY-MM-DD')                    AS txnDt
    	, txn2.RCPT_NO                              AS parRceptNo  --원거래 영수증
    	, z1.TXN_DTL_TYPE							AS txnDtlType
    	,${strColumn}
    FROM LOY.LOY_AGG_PNT_OFR_DAILY Z1 
 	LEFT OUTER JOIN LOY.LOY_MBR M1 ON Z1.RID_MBR = M1.RID 
 	LEFT OUTER JOIN LOY.LOY_CUST C1 ON C1.RID = M1.RID_CUST 
    LEFT OUTER JOIN LOY.LOY_CUST_I C2 ON  C1.RID    = C2.RID_CUST
    LEFT OUTER JOIN LOY.LOY_INTER_PERSON L1 ON C2.EMP_NO = L1.EMP_NO
    LEFT OUTER JOIN LOY.LOY_OFR O1 ON Z1.RID_OFR = O1.RID
    LEFT OUTER JOIN LOY.LOY_CHNL lc ON lc.RID = Z1.RID_CHNL
    LEFT OUTER JOIN LOY.LOY_PNT_TXN txn ON txn.RID  = z1.RID_PNT_TXN   
    LEFT OUTER JOIN  LOY.LOY_PNT_TXN txn2 ON txn.RID_PAR_PNT_TXN =txn2.rid
    WHERE  
	Z1.TXN_DTL_TYPE IN('200','130')
	AND Z1.OFR_CTG = 'E'
    AND Z1.TXN_DT BETWEEN #{startDt} AND #{endDt}
    <if test="ridOfr != null and ridOfr != ''"> 
    AND Z1.RID_OFR =#{ridOfr}
	</if>
    <if test="mbrNm != null and mbrNm != ''"> 
   	AND c1.CUST_NM = #{mbrNm}
    </if>
   	</select>

</mapper>
